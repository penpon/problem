{
  "id": "js_advanced_003",
  "version": "1.0",
  "category": "javascript",
  "level": "advanced",
  "tags": ["forEach", "array", "iteration", "callback"],
  "question": {
    "text": "ブログサイトで記事リストの各記事にビュー数を追加する処理において、配列の各要素を順次処理するメソッドは？",
    "hint": "forEachメソッドは配列の各要素に対してコールバック関数を実行します",
    "animation": {
      "type": "code_typing",
      "duration": 2000
    },
    "visual": {
      "type": "code_editor",
      "content": "// 記事リストに閲覧数を追加する処理\nconst articles = [\n  {id: 1, title: 'JavaScript入門', category: 'tech'},\n  {id: 2, title: 'React基礎講座', category: 'tech'},\n  {id: 3, title: 'データベース設計', category: 'backend'}\n];\n// 各記事にviews: 0を追加したい"
    }
  },
  "choices": [
    {
      "id": "A",
      "text": "articles.forEach(article => article.views = 0);",
      "animation": "slide_in_left"
    },
    {
      "id": "B",
      "text": "articles.each(article => article.views = 0);",
      "animation": "slide_in_right"
    },
    {
      "id": "C",
      "text": "articles.iterate(article => article.views = 0);",
      "animation": "slide_in_left"
    },
    {
      "id": "D",
      "text": "articles.loop(article => article.views = 0);",
      "animation": "slide_in_right"
    }
  ],
  "correct": "A",
  "explanation": {
    "text": "forEachメソッドは配列の各要素に対してコールバック関数を実行します。元の配列を変更する副作用のある処理や、単純な反復処理に使用されます。戻り値はundefinedです。",
    "example": "const numbers = [1, 2, 3];\nnumbers.forEach(num => console.log(num * 2));\n// 出力: 2, 4, 6\n// 元の配列は変更されない",
    "relatedCommands": ["map", "filter", "reduce"],
    "furtherReading": "forEachは副作用を伴う処理に適しており、新しい配列が不要な場合に使用します。"
  },
  "difficulty": {
    "score": 4,
    "timeLimit": 50,
    "points": 20
  },
  "statistics": {
    "attempts": 0,
    "correctRate": 0
  }
}