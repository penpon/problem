{
  "id": "js_intermediate_011",
  "version": "1.0",
  "category": "javascript",
  "level": "intermediate",
  "tags": ["function", "scope", "nested", "closure"],
  "question": {
    "text": "次のコードでinner関数からouter関数の変数にアクセスできますか？\nfunction outer() {\n  let outerVar = '外側';\n  function inner() {\n    console.log(outerVar);\n  }\n  inner();\n}",
    "hint": "内側の関数は外側の関数の変数にアクセスできます",
    "animation": {
      "type": "code_typing",
      "duration": 1500
    },
    "visual": {
      "type": "code_editor",
      "content": "function outer() {\n  let outerVar = '外側';\n  function inner() {\n    console.log(outerVar); // アクセス可能？\n  }\n  inner();\n}"
    }
  },
  "choices": [
    {
      "id": "A",
      "text": "はい、アクセスできます",
      "animation": "slide_in_left"
    },
    {
      "id": "B",
      "text": "いいえ、エラーになります",
      "animation": "slide_in_right"
    },
    {
      "id": "C",
      "text": "undefinedが出力されます",
      "animation": "slide_in_left"
    },
    {
      "id": "D",
      "text": "nullが出力されます",
      "animation": "slide_in_right"
    }
  ],
  "correct": "A",
  "explanation": {
    "text": "ネストした関数（内側の関数）は、外側の関数のスコープ内の変数にアクセスできます。これは関数スコープの重要な特徴です。",
    "example": "function outer() {\n  let outerVar = '外側';\n  let anotherVar = '別の変数';\n  \n  function inner() {\n    console.log(outerVar);    // '外側'\n    console.log(anotherVar);  // '別の変数'\n    let innerVar = '内側';\n  }\n  \n  inner();\n  // console.log(innerVar); // エラー！内側の変数は見えない\n}",
    "relatedCommands": ["nested functions", "closure", "lexical scope"],
    "furtherReading": "これがクロージャの基本概念につながります。"
  },
  "difficulty": {
    "score": 4,
    "timeLimit": 40,
    "points": 20
  },
  "statistics": {
    "attempts": 0,
    "correctRate": 0
  }
}