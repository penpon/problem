{
  "id": "js_intermediate_017",
  "version": "1.0",
  "category": "javascript",
  "level": "intermediate",
  "tags": ["callback", "function", "parameter", "higher-order"],
  "question": {
    "text": "コールバック関数を引数として受け取る関数の例として正しいものは？",
    "hint": "関数を引数として受け取り、内部で呼び出します",
    "animation": {
      "type": "code_typing",
      "duration": 1500
    },
    "visual": {
      "type": "code_editor",
      "content": "// コールバック関数を使用する関数\nfunction processData(data, callback) {\n  let result = data * 2;\n  callback(result);\n}"
    }
  },
  "choices": [
    {
      "id": "A",
      "text": "processData(10, function(result) { console.log(result); });",
      "animation": "slide_in_left"
    },
    {
      "id": "B",
      "text": "processData(10, 'console.log');",
      "animation": "slide_in_right"
    },
    {
      "id": "C",
      "text": "processData(10, result => console.log);",
      "animation": "slide_in_left"
    },
    {
      "id": "D",
      "text": "processData(10, callback(result));",
      "animation": "slide_in_right"
    }
  ],
  "correct": "A",
  "explanation": {
    "text": "コールバック関数は、他の関数に引数として渡される関数です。呼び出し側で関数を定義し、受け取り側でその関数を実行します。",
    "example": "function processData(data, callback) {\n  let result = data * 2;\n  callback(result);\n  // コールバック関数を実行\n}\n\n// 無名関数をコールバックとして渡す\nprocessData(10, function(result) {\n  console.log('結果:', result);\n  // '結果: 20'\n});\n\n// アロー関数をコールバックとして渡す\nprocessData(5, (result) => {\n  console.log('答え:', result);\n  // '答え: 10'\n});\n\n// 既存の関数をコールバックとして渡す\nfunction showResult(value) {\n  console.log('値:', value);\n}\nprocessData(3, showResult);\n// '値: 6'",
    "relatedCommands": ["higher-order functions", "anonymous functions", "arrow functions"],
    "furtherReading": "コールバック関数は非同期処理やイベント処理でよく使用されます。"
  },
  "difficulty": {
    "score": 5,
    "timeLimit": 45,
    "points": 25
  },
  "statistics": {
    "attempts": 0,
    "correctRate": 0
  }
}