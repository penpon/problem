{
  "id": "js_intermediate_019",
  "version": "1.0",
  "category": "javascript",
  "level": "intermediate",
  "tags": ["return", "object", "array", "complex"],
  "question": {
    "text": "関数からオブジェクトを返すコードとして正しいものは？",
    "hint": "{}を使ってオブジェクトを作成し、returnで返します",
    "animation": {
      "type": "code_typing",
      "duration": 1500
    },
    "visual": {
      "type": "code_editor",
      "content": "function createUser(name, age) {\n  \n// nameとageを含むオブジェクトを返す\n  _\n}"
    }
  },
  "choices": [
    {
      "id": "A",
      "text": "return { name: name, age: age };",
      "animation": "slide_in_left"
    },
    {
      "id": "B",
      "text": "return [name, age];",
      "animation": "slide_in_right"
    },
    {
      "id": "C",
      "text": "return name + age;",
      "animation": "slide_in_left"
    },
    {
      "id": "D",
      "text": "return (name, age);",
      "animation": "slide_in_right"
    }
  ],
  "correct": "A",
  "explanation": {
    "text": "関数からオブジェクトを返すには、{}を使用してオブジェクトリテラルを作成し、returnで返します。これにより複数の関連するデータを構造化して返せます。",
    "example": "function createUser(name, age) {\n  return {\n    name: name,\n    age: age,\n    greet: function() {\n      return `こんにちは、${this.name}です`;\n    }\n  };\n}\n\n// ES6のプロパティ短縮記法\nfunction createUserES6(name, age) {\n  return { name, age };\n  \n// name: name と同じ\n}\n\n// 使用例\nconst user = createUser('太郎', 25);\nconsole.log(user.name);\n\n// '太郎'\nconsole.log(user.age);\n\n// 25\nconsole.log(user.greet());\n\n// 'こんにちは、太郎です'\n\n// 配列を返す場合\nfunction getCoordinates() {\n  return [10, 20];\n  \n// 配列を返す\n}",
    "relatedCommands": ["object literal", "property shorthand", "return statement"],
    "furtherReading": "複雑なデータ構造を返すことで、関数の有用性が大幅に向上します。"
  },
  "difficulty": {
    "score": 5,
    "timeLimit": 40,
    "points": 25
  },
  "statistics": {
    "attempts": 0,
    "correctRate": 0
  }
}