{
  "id": "practice11",
  "title": "練習問題11：関数と配列",
  "description": "配列を扱う関数を作成して、配列の操作を学ぼう！",
  "instructions": [
    "配列を引数として受け取る関数の作り方を理解してください。",
    "for文を使って配列の要素を順次処理する方法を学んでください。",
    "配列のプロパティ（lengthなど）を活用する方法を理解してください。"
  ],
  "template": "// 問題11: 関数と配列\\n// 配列を扱う関数を作成して、配列の操作を学ぼう！\\n\\n// 1. showArrayItems関数を定義してください（引数: array）\\nfunction showArrayItems(array) {\\n    /* ここにfor文を使って配列の全ての要素を表示するコードを書く */\\n    /* ヒント: for (let i = 0; i < array.length; i++) を使用 */\\n}\\n\\n// 2. getFirstItem関数を定義してください（引数: array、戻り値: 配列の最初の要素）\\n/* ここにgetFirstItem関数を定義する */\\n\\n// 3. getArrayLength関数を定義してください（引数: array、戻り値: 配列の長さ）\\nfunction getArrayLength(array) {\\n    /* ここに配列の長さを返すコードを書く */\\n}\\n\\n// 4. 関数を呼び出してテストしてください\\nlet fruits = [\"りんご\", \"バナナ\", \"オレンジ\", \"ぶどう\"];\\nlet numbers = [10, 20, 30];\\n\\nconsole.log(\"=== 配列と関数のテスト ===\");\\n\\n// showArrayItems関数のテスト\\nconsole.log(\"--- fruits配列の全要素 ---\");\\n/* ここでshowArrayItems関数をfruitsで呼び出す */\\n\\nconsole.log(\"--- numbers配列の全要素 ---\");\\n/* ここでshowArrayItems関数をnumbersで呼び出す */\\n\\n// getFirstItem関数のテスト\\nlet firstFruit = /* ここでgetFirstItem関数をfruitsで呼び出す */;\\nconsole.log(\"最初の果物: \" + firstFruit);\\n\\nlet firstNumber = /* ここでgetFirstItem関数をnumbersで呼び出す */;\\nconsole.log(\"最初の数値: \" + firstNumber);\\n\\n// getArrayLength関数のテスト\\nlet fruitsLength = /* ここでgetArrayLength関数をfruitsで呼び出す */;\\nconsole.log(\"fruits配列の長さ: \" + fruitsLength);\\n\\nlet numbersLength = /* ここでgetArrayLength関数をnumbersで呼び出す */;\\nconsole.log(\"numbers配列の長さ: \" + numbersLength);",
  "testCases": [
    {
      "name": "基本ケース（配列操作）",
      "variables": {
        "fruits": ["りんご", "バナナ", "オレンジ", "ぶどう"],
        "numbers": [10, 20, 30]
      },
      "expectedOutput": "=== 配列と関数のテスト ===\\n--- fruits配列の全要素 ---\\nりんご\\nバナナ\\nオレンジ\\nぶどう\\n--- numbers配列の全要素 ---\\n10\\n20\\n30\\n最初の果物: りんご\\n最初の数値: 10\\nfruits配列の長さ: 4\\nnumbers配列の長さ: 3"
    },
    {
      "name": "showArrayItems関数チェック",
      "variables": {
        "fruits": ["りんご", "バナナ", "オレンジ", "ぶどう"],
        "numbers": [10, 20, 30]
      },
      "expectedOutput": "=== 配列と関数のテスト ===\\n--- fruits配列の全要素 ---\\nりんご\\nバナナ\\nオレンジ\\nぶどう\\n--- numbers配列の全要素 ---\\n10\\n20\\n30\\n最初の果物: りんご\\n最初の数値: 10\\nfruits配列の長さ: 4\\nnumbers配列の長さ: 3"
    },
    {
      "name": "getFirstItem関数チェック",
      "variables": {
        "fruits": ["りんご", "バナナ", "オレンジ", "ぶどう"],
        "numbers": [10, 20, 30]
      },
      "expectedOutput": "=== 配列と関数のテスト ===\\n--- fruits配列の全要素 ---\\nりんご\\nバナナ\\nオレンジ\\nぶどう\\n--- numbers配列の全要素 ---\\n10\\n20\\n30\\n最初の果物: りんご\\n最初の数値: 10\\nfruits配列の長さ: 4\\nnumbers配列の長さ: 3"
    },
    {
      "name": "getArrayLength関数チェック",
      "variables": {
        "fruits": ["りんご", "バナナ", "オレンジ", "ぶどう"],
        "numbers": [10, 20, 30]
      },
      "expectedOutput": "=== 配列と関数のテスト ===\\n--- fruits配列の全要素 ---\\nりんご\\nバナナ\\nオレンジ\\nぶどう\\n--- numbers配列の全要素 ---\\n10\\n20\\n30\\n最初の果物: りんご\\n最初の数値: 10\\nfruits配列の長さ: 4\\nnumbers配列の長さ: 3"
    },
    {
      "name": "配列要素アクセスチェック",
      "variables": {
        "fruits": ["りんご", "バナナ", "オレンジ", "ぶどう"],
        "numbers": [10, 20, 30]
      },
      "expectedOutput": "=== 配列と関数のテスト ===\\n--- fruits配列の全要素 ---\\nりんご\\nバナナ\\nオレンジ\\nぶどう\\n--- numbers配列の全要素 ---\\n10\\n20\\n30\\n最初の果物: りんご\\n最初の数値: 10\\nfruits配列の長さ: 4\\nnumbers配列の長さ: 3"
    }
  ],
  "expectedOutput": "=== 配列と関数のテスト ===\\n--- fruits配列の全要素 ---\\nりんご\\nバナナ\\nオレンジ\\nぶどう\\n--- numbers配列の全要素 ---\\n10\\n20\\n30\\n最初の果物: りんご\\n最初の数値: 10\\nfruits配列の長さ: 4\\nnumbers配列の長さ: 3",
  "testVariables": {
    "fruits": ["りんご", "バナナ", "オレンジ", "ぶどう"],
    "numbers": [10, 20, 30]
  },
  "points": 100
}