{
  "id": "js-basic-07",
  "title": "複数ボタン",
  "description": "複数のボタンを同時に管理し、それぞれに異なる機能を実装してDOM操作の応用を学習します",
  "category": "javascript-basics",
  "difficulty": 2,
  "instructions": [
    "複数のボタンにそれぞれ異なるイベントを設定する",
    "ボタンごとに異なるメッセージや処理を実行する",
    "共通の処理と個別の処理を使い分ける",
    "ボタンの状態管理を実装する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ステップ16.1 - 複数ボタン</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🎛️ 複数ボタン</h1>\n        <div class=\"step-info\">\n            <strong>ステップ16.1 - 複数の要素を操作する</strong>\n        </div>\n        \n        <div class=\"celebration\">🎛️ 🖱️ ✨</div>\n        \n        <div class=\"info-box\">\n            <h3>📚 このステップで学ぶこと</h3>\n            <ul>\n                <li><strong>複数のボタン</strong>にそれぞれ異なるイベントを設定する</li>\n                <li>各ボタンで<strong>異なるテキスト変更</strong>を実行する</li>\n                <li><strong>独立したイベント処理</strong>の理解と実装</li>\n            </ul>\n        </div>\n        \n        <div class=\"demo-section\">\n            <h3>🎪 6つのボタンデモ</h3>\n            <p>それぞれのボタンが異なる動作をします。すべて試してみましょう！</p>\n            \n            <div class=\"result-display\" id=\"message-display\">\n                🌟 ボタンをクリックして、メッセージを変更してみてください！\n            </div>\n            \n            <div class=\"button-grid\">\n                <button class=\"action-button\" id=\"welcome-btn\">\n                    👋 ようこそボタン\n                </button>\n                \n                <button class=\"action-button\" id=\"happy-btn\">\n                    😊 幸せボタン\n                </button>\n                \n                <button class=\"action-button\" id=\"rocket-btn\">\n                    🚀 ロケットボタン\n                </button>\n                \n                <button class=\"action-button\" id=\"rainbow-btn\">\n                    🌈 虹色ボタン\n                </button>\n                \n                <button class=\"action-button\" id=\"music-btn\">\n                    🎵 音楽ボタン\n                </button>\n                \n                <button class=\"action-button\" id=\"magic-btn\">\n                    ✨ 魔法ボタン\n                </button>\n            </div>\n            \n            <div class=\"stats-grid\">\n                <div class=\"stat-item\">\n                    <div>合計クリック数</div>\n                    <div class=\"stat-number\" id=\"total-clicks\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>最後のクリック</div>\n                    <div id=\"last-clicked\" style=\"font-size: 1rem; color: #feca57;\">なし</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>お気に入り</div>\n                    <div id=\"favorite-button\" style=\"font-size: 1rem; color: #feca57;\">未設定</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🎯 複数ボタンの管理方法</h3>\n            <p>複数のボタンを効率的に管理するために、以下の手順で実装します：</p>\n            \n            <div class=\"code-example\">\n// 1. 各ボタンを個別に取得\nlet welcomeBtn = document.getElementById(\"welcome-btn\");\nlet happyBtn = document.getElementById(\"happy-btn\");\n\n// 2. それぞれにイベントを設定\nwelcomeBtn.addEventListener(\"click\", function() {\n    // ようこそボタン用の処理\n});\n\nhappyBtn.addEventListener(\"click\", function() {\n    // 幸せボタン用の処理\n});\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>👀 実装されているコード例</h3>\n            <div class=\"code-example\">\n// ようこそボタンの処理\ndocument.getElementById(\"welcome-btn\").addEventListener(\"click\", function() {\n    let display = document.getElementById(\"message-display\");\n    display.textContent = \"👋 ようこそ！JavaScriptの学習へ！\";\n    display.style.background = \"linear-gradient(135deg, #667eea, #764ba2)\";\n});\n\n// 幸せボタンの処理\ndocument.getElementById(\"happy-btn\").addEventListener(\"click\", function() {\n    let display = document.getElementById(\"message-display\");\n    display.textContent = \"😊 今日は良い一日ですね！笑顔でいきましょう！\";\n    display.style.background = \"linear-gradient(135deg, #ffecd2, #fcb69f)\";\n});\n            </div>\n        </div>\n        \n        <div class=\"instruction\">\n            <h3>🚀 すべてのボタンを試してみよう！</h3>\n            <p>6つのボタンをすべてクリックして、それぞれ異なるメッセージと背景色の変化を確認してください。</p>\n            <p><strong>F12</strong>（MacはCmd+Option+I）で開発者ツールを開き、<strong>Console</strong>タブでクリックの詳細ログも確認できます！</p>\n        </div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "body {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n    max-width: 900px;\n    margin: 40px auto;\n    padding: 20px;\n    line-height: 1.6;\n    background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);\n    color: #2c3e50;\n    min-height: 100vh;\n}\n\n.container {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 40px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    color: #3498db;\n    text-align: center;\n    font-size: 2.5rem;\n    margin-bottom: 10px;\n}\n\n.step-info {\n    text-align: center;\n    margin-bottom: 30px;\n    opacity: 0.8;\n    color: #7f8c8d;\n}\n\n.demo-section {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    padding: 30px;\n    border-radius: 15px;\n    margin: 25px 0;\n    text-align: center;\n}\n\n.button-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 15px;\n    margin: 20px 0;\n}\n\n.action-button {\n    background: linear-gradient(135deg, #ff6b6b 0%, #4ecdc4 100%);\n    color: white;\n    border: none;\n    padding: 20px;\n    font-size: 1.1rem;\n    border-radius: 15px;\n    cursor: pointer;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n    transition: all 0.3s ease;\n    font-weight: bold;\n    text-align: center;\n}\n\n.action-button:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);\n}\n\n.action-button:active {\n    transform: translateY(0);\n}\n\n.result-display {\n    background: rgba(255, 255, 255, 0.2);\n    padding: 25px;\n    border-radius: 15px;\n    margin: 20px 0;\n    font-size: 1.3rem;\n    font-weight: bold;\n    min-height: 80px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    text-align: center;\n}\n\n.info-box {\n    background: #f8f9fa;\n    padding: 25px;\n    border-radius: 15px;\n    margin: 20px 0;\n    border-left: 5px solid #3498db;\n}\n\n.highlight {\n    color: #e74c3c;\n    font-weight: bold;\n}\n\n.code-example {\n    background: #2c3e50;\n    color: #ecf0f1;\n    padding: 15px;\n    border-radius: 8px;\n    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n    margin: 15px 0;\n    border: 1px solid #34495e;\n}\n\n.instruction {\n    background: linear-gradient(135deg, #36d1dc 0%, #5b86e5 100%);\n    color: white;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 20px 0;\n}\n\n.celebration {\n    font-size: 3rem;\n    text-align: center;\n    margin: 20px 0;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    gap: 10px;\n    margin: 20px 0;\n}\n\n.stat-item {\n    background: rgba(255, 255, 255, 0.1);\n    padding: 15px;\n    border-radius: 10px;\n    text-align: center;\n}\n\n.stat-number {\n    font-size: 2rem;\n    font-weight: bold;\n    color: #feca57;\n}\n\n.emoji-large {\n    font-size: 2rem;\n    margin: 0 10px;\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "console.log(\"🎛️ ステップ16.1: 複数ボタン操作を開始します！\");\nconsole.log(\"========================================\");\n\n// 統計用変数\nlet totalClicks = 0;\nlet buttonClickCounts = {};\n\n// メッセージ表示エリアの取得\nlet messageDisplay = document.getElementById(\"message-display\");\n\n// 1. ようこそボタン\ndocument.getElementById(\"welcome-btn\").addEventListener(\"click\", function() {\n    console.log(\"👋 ようこそボタンがクリックされました！\");\n    messageDisplay.textContent = \"👋 ようこそ！JavaScriptの学習へ！一緒に頑張りましょう！\";\n    messageDisplay.style.background = \"linear-gradient(135deg, #667eea, #764ba2)\";\n    updateStats(\"ようこそボタン\");\n});\n\n// 2. 幸せボタン\ndocument.getElementById(\"happy-btn\").addEventListener(\"click\", function() {\n    console.log(\"😊 幸せボタンがクリックされました！\");\n    messageDisplay.textContent = \"😊 今日は良い一日ですね！笑顔でプログラミングを楽しみましょう！\";\n    messageDisplay.style.background = \"linear-gradient(135deg, #ffecd2, #fcb69f)\";\n    updateStats(\"幸せボタン\");\n});\n\n// 3. ロケットボタン\ndocument.getElementById(\"rocket-btn\").addEventListener(\"click\", function() {\n    console.log(\"🚀 ロケットボタンがクリックされました！\");\n    messageDisplay.textContent = \"🚀 プログラミングスキルがロケットのように向上中！目指せ、宇宙！\";\n    messageDisplay.style.background = \"linear-gradient(135deg, #fa709a, #fee140)\";\n    updateStats(\"ロケットボタン\");\n});\n\n// 4. 虹色ボタン\ndocument.getElementById(\"rainbow-btn\").addEventListener(\"click\", function() {\n    console.log(\"🌈 虹色ボタンがクリックされました！\");\n    messageDisplay.textContent = \"🌈 カラフルな虹のように、あなたの未来も輝いています！\";\n    messageDisplay.style.background = \"linear-gradient(135deg, #a8edea, #fed6e3)\";\n    updateStats(\"虹色ボタン\");\n});\n\n// 5. 音楽ボタン\ndocument.getElementById(\"music-btn\").addEventListener(\"click\", function() {\n    console.log(\"🎵 音楽ボタンがクリックされました！\");\n    messageDisplay.textContent = \"🎵 プログラミングは音楽のように美しいリズムで作られます♪\";\n    messageDisplay.style.background = \"linear-gradient(135deg, #ff9a9e, #fecfef)\";\n    updateStats(\"音楽ボタン\");\n});\n\n// 6. 魔法ボタン\ndocument.getElementById(\"magic-btn\").addEventListener(\"click\", function() {\n    console.log(\"✨ 魔法ボタンがクリックされました！\");\n    messageDisplay.textContent = \"✨ JavaScriptは魔法のような力を持っています！あなたも魔法使い！\";\n    messageDisplay.style.background = \"linear-gradient(135deg, #667eea, #764ba2)\";\n    updateStats(\"魔法ボタン\");\n});\n\n// 統計更新関数\nfunction updateStats(buttonName) {\n    totalClicks++;\n    \n    // ボタン別クリック数をカウント\n    if (buttonClickCounts[buttonName]) {\n        buttonClickCounts[buttonName]++;\n    } else {\n        buttonClickCounts[buttonName] = 1;\n    }\n    \n    // 画面の統計を更新\n    document.getElementById(\"total-clicks\").textContent = totalClicks;\n    document.getElementById(\"last-clicked\").textContent = buttonName;\n    \n    // 最も多くクリックされたボタンを特定\n    let favoriteButton = \"\";\n    let maxClicks = 0;\n    for (let button in buttonClickCounts) {\n        if (buttonClickCounts[button] > maxClicks) {\n            maxClicks = buttonClickCounts[button];\n            favoriteButton = button;\n        }\n    }\n    document.getElementById(\"favorite-button\").textContent = favoriteButton + \" (\" + maxClicks + \"回)\";\n    \n    // コンソールに統計を出力\n    console.log(\"📊 合計クリック数: \" + totalClicks);\n    console.log(\"📊 最後にクリック: \" + buttonName);\n    console.log(\"📊 各ボタンのクリック数:\", buttonClickCounts);\n}\n\nconsole.log(\"✅ 6つのボタンイベントがすべて設定されました！\");\nconsole.log(\"💡 それぞれのボタンをクリックして、異なる反応を確認してください！\");"
    }
  },
  "expectedResult": {
    "individualFunctions": "各ボタンが独立した機能を実行する",
    "stateManagement": "ボタンの状態が適切に管理される",
    "behavior": "複数のボタンが連携して動作する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}