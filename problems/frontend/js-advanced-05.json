{
  "id": "js-advanced-05",
  "title": "配列基礎",
  "description": "JavaScript配列の基本概念と基本操作を学習し、配列の作成・アクセス・操作方法を習得します",
  "category": "javascript-dom",
  "difficulty": 2,
  "instructions": [
    "配列の作成方法と要素へのアクセス方法を学ぶ",
    "インデックス（0から開始）の概念を理解する",
    "push()とpop()を使った要素の追加・削除を実装する",
    "lengthプロパティを使った配列情報の取得を習得する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ステップ17.3a - 配列基礎</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>📋 配列基礎</h1>\n        <div class=\"step-info\">\n            <strong>ステップ17.3a - JavaScript配列の基本概念と基本操作</strong>\n        </div>\n        \n        <div class=\"celebration\">📋 📦 ⚡</div>\n        \n        <div class=\"info-box\">\n            <h3>📚 このステップで学ぶこと</h3>\n            <ul>\n                <li><strong>配列</strong>（Array）の基本概念と作成方法</li>\n                <li><strong>インデックス</strong>による要素アクセス</li>\n                <li><strong>length</strong>プロパティによる配列の長さ取得</li>\n                <li><strong>push/pop</strong>による要素の追加・削除</li>\n            </ul>\n        </div>\n        \n        <div class=\"demo-section\">\n            <h3>🎪 配列操作デモ</h3>\n            <p>ボタンをクリックして、配列の基本操作を体験してみましょう！</p>\n            \n            <div class=\"content-display\" id=\"content-display\">\n                <h3 style=\"color: #3498db; margin-top: 0;\">🎯 配列操作結果表示エリア</h3>\n                <p>下のボタンをクリックして、配列がどのように動作するか確認してください。</p>\n                <div class=\"current-array\" id=\"current-array\">\n                    現在の配列状態がここに表示されます\n                </div>\n            </div>\n            \n            <div class=\"button-grid\">\n                <button class=\"array-btn btn-display\" id=\"display-btn\">\n                    📋 配列表示\n                </button>\n                \n                <button class=\"array-btn btn-access\" id=\"access-btn\">\n                    🔍 要素アクセス\n                </button>\n                \n                <button class=\"array-btn btn-add\" id=\"add-btn\">\n                    ➕ 要素追加\n                </button>\n                \n                <button class=\"array-btn btn-remove\" id=\"remove-btn\">\n                    ➖ 要素削除\n                </button>\n            </div>\n            \n            <div class=\"operation-details\" id=\"operation-details\">\n                操作の詳細がここに表示されます...\n            </div>\n        </div>\n        \n        <div class=\"array-info\">\n            <h4>📊 現在使用中の配列</h4>\n            <div class=\"array-cards\">\n                <div class=\"array-card\">\n                    <h4>🍎 果物配列</h4>\n                    <div class=\"array-content\" id=\"fruits-display\">\n                        [\"りんご\", \"バナナ\", \"オレンジ\", \"ぶどう\"]\n                    </div>\n                    <div class=\"array-stats\">長さ: <span id=\"fruits-length\">4</span></div>\n                </div>\n                <div class=\"array-card\">\n                    <h4>🎨 色配列</h4>\n                    <div class=\"array-content\" id=\"colors-display\">\n                        [\"赤\", \"青\", \"緑\", \"黄色\"]\n                    </div>\n                    <div class=\"array-stats\">長さ: <span id=\"colors-length\">4</span></div>\n                </div>\n                <div class=\"array-card\">\n                    <h4>🔢 数字配列</h4>\n                    <div class=\"array-content\" id=\"numbers-display\">\n                        [10, 20, 30, 40, 50]\n                    </div>\n                    <div class=\"array-stats\">長さ: <span id=\"numbers-length\">5</span></div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🎯 配列の基本構造</h3>\n            <p>配列は複数の要素をインデックス（番号）で管理するデータ構造です：</p>\n            \n            <div class=\"code-example\">\n// 配列の作成\nlet fruits = [\"りんご\", \"バナナ\", \"オレンジ\"];\n\n// インデックスでアクセス（0から開始）\nlet first = fruits[0];    // \"りんご\"\nlet second = fruits[1];   // \"バナナ\"\nlet third = fruits[2];    // \"オレンジ\"\n\n// 配列の長さ\nlet count = fruits.length; // 3\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🔧 基本操作</h3>\n            <ul>\n                <li><strong>📋 配列表示</strong>: 配列の全内容とインデックスを確認</li>\n                <li><strong>🔍 要素アクセス</strong>: 指定したインデックスの要素を取得</li>\n                <li><strong>➕ 要素追加</strong>: push()で配列の末尾に要素を追加</li>\n                <li><strong>➖ 要素削除</strong>: pop()で配列の末尾から要素を削除</li>\n            </ul>\n        </div>\n        \n        <div class=\"instruction\">\n            <h3>🚀 すべての操作を試してみよう！</h3>\n            <p>4つのボタンを順番にクリックして、配列がどのように動作するか確認してください。特に「操作の詳細」で内部処理を理解しましょう。</p>\n            <p><strong>F12</strong>（MacはCmd+Option+I）で開発者ツールを開き、<strong>Console</strong>タブで配列操作のログも確認できます！</p>\n        </div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "/* ベーススタイル */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    line-height: 1.6;\n    color: #333;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    padding: 20px;\n}\n\n.container {\n    max-width: 1000px;\n    margin: 0 auto;\n    background: white;\n    border-radius: 20px;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    padding: 40px;\n    animation: slideIn 0.8s ease-out;\n}\n\n@keyframes slideIn {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* ヘッダー部分 */\nh1 {\n    color: #2c3e50;\n    text-align: center;\n    margin-bottom: 10px;\n    font-size: 2.5rem;\n    font-weight: 700;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.step-info {\n    background: linear-gradient(135deg, #ff6b6b, #ffa726);\n    color: white;\n    padding: 15px;\n    border-radius: 15px;\n    text-align: center;\n    margin-bottom: 30px;\n    font-weight: 600;\n    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);\n}\n\n.celebration {\n    text-align: center;\n    font-size: 3rem;\n    margin: 20px 0;\n    animation: bounce 2s infinite;\n}\n\n@keyframes bounce {\n    0%, 20%, 50%, 80%, 100% {\n        transform: translateY(0);\n    }\n    40% {\n        transform: translateY(-10px);\n    }\n    60% {\n        transform: translateY(-5px);\n    }\n}\n\n/* 情報ボックス */\n.info-box {\n    background: #f8f9fa;\n    border: 2px solid #e9ecef;\n    border-radius: 15px;\n    padding: 25px;\n    margin: 25px 0;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);\n}\n\n.info-box h3 {\n    color: #495057;\n    margin-bottom: 15px;\n    font-size: 1.3rem;\n    border-bottom: 2px solid #dee2e6;\n    padding-bottom: 8px;\n}\n\n.info-box ul {\n    list-style: none;\n    padding-left: 0;\n}\n\n.info-box li {\n    background: white;\n    margin: 10px 0;\n    padding: 12px 15px;\n    border-radius: 8px;\n    border-left: 4px solid #007bff;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\n    transition: transform 0.2s ease;\n}\n\n.info-box li:hover {\n    transform: translateX(5px);\n}\n\n/* デモセクション */\n.demo-section {\n    background: #f8f9fa;\n    border-radius: 20px;\n    padding: 30px;\n    margin: 30px 0;\n    border: 3px solid #e9ecef;\n    position: relative;\n    overflow: hidden;\n}\n\n.demo-section::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: linear-gradient(90deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4, #feca57);\n}\n\n.demo-section h3 {\n    color: #2c3e50;\n    margin-bottom: 15px;\n    font-size: 1.5rem;\n}\n\n.demo-section p {\n    color: #6c757d;\n    margin-bottom: 20px;\n    font-size: 1.1rem;\n}\n\n/* コンテンツ表示エリア */\n.content-display {\n    background: white;\n    border: 2px solid #dee2e6;\n    border-radius: 15px;\n    padding: 25px;\n    margin: 25px 0;\n    min-height: 200px;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.08);\n    position: relative;\n    overflow: hidden;\n}\n\n.content-display::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: linear-gradient(90deg, #667eea, #764ba2);\n}\n\n.current-array {\n    background: #e3f2fd;\n    border: 2px solid #2196f3;\n    border-radius: 10px;\n    padding: 15px;\n    margin-top: 15px;\n    font-family: 'Courier New', monospace;\n    font-size: 1.1rem;\n    color: #1976d2;\n    word-break: break-all;\n}\n\n/* ボタングリッド */\n.button-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 15px;\n    margin: 25px 0;\n}\n\n.array-btn {\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    color: white;\n    border: none;\n    padding: 18px 25px;\n    border-radius: 12px;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n    position: relative;\n    overflow: hidden;\n}\n\n.array-btn::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    transition: left 0.5s;\n}\n\n.array-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n}\n\n.array-btn:hover::before {\n    left: 100%;\n}\n\n.array-btn:active {\n    transform: translateY(0);\n}\n\n/* 個別ボタンスタイル */\n.btn-display {\n    background: linear-gradient(135deg, #4ecdc4, #44a08d);\n    box-shadow: 0 4px 15px rgba(78, 205, 196, 0.3);\n}\n\n.btn-display:hover {\n    box-shadow: 0 6px 20px rgba(78, 205, 196, 0.4);\n}\n\n.btn-access {\n    background: linear-gradient(135deg, #ffa726, #ff7043);\n    box-shadow: 0 4px 15px rgba(255, 167, 38, 0.3);\n}\n\n.btn-access:hover {\n    box-shadow: 0 6px 20px rgba(255, 167, 38, 0.4);\n}\n\n.btn-add {\n    background: linear-gradient(135deg, #66bb6a, #4caf50);\n    box-shadow: 0 4px 15px rgba(102, 187, 106, 0.3);\n}\n\n.btn-add:hover {\n    box-shadow: 0 6px 20px rgba(102, 187, 106, 0.4);\n}\n\n.btn-remove {\n    background: linear-gradient(135deg, #ef5350, #e53935);\n    box-shadow: 0 4px 15px rgba(239, 83, 80, 0.3);\n}\n\n.btn-remove:hover {\n    box-shadow: 0 6px 20px rgba(239, 83, 80, 0.4);\n}\n\n/* 操作詳細 */\n.operation-details {\n    background: #fff3e0;\n    border: 2px solid #ffb74d;\n    border-radius: 10px;\n    padding: 20px;\n    margin-top: 20px;\n    font-family: 'Courier New', monospace;\n    font-size: 0.95rem;\n    color: #e65100;\n    line-height: 1.6;\n}\n\n/* 配列情報セクション */\n.array-info {\n    background: #f5f5f5;\n    border-radius: 15px;\n    padding: 25px;\n    margin: 25px 0;\n}\n\n.array-info h4 {\n    color: #2c3e50;\n    margin-bottom: 20px;\n    font-size: 1.3rem;\n    text-align: center;\n}\n\n.array-cards {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n    gap: 20px;\n}\n\n.array-card {\n    background: white;\n    border: 2px solid #e9ecef;\n    border-radius: 12px;\n    padding: 20px;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.array-card:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);\n}\n\n.array-card h4 {\n    color: #495057;\n    margin-bottom: 15px;\n    font-size: 1.1rem;\n    border-bottom: 2px solid #e9ecef;\n    padding-bottom: 8px;\n}\n\n.array-content {\n    background: #f8f9fa;\n    border: 1px solid #dee2e6;\n    border-radius: 8px;\n    padding: 12px;\n    font-family: 'Courier New', monospace;\n    font-size: 0.9rem;\n    color: #495057;\n    word-break: break-all;\n    margin-bottom: 10px;\n}\n\n.array-stats {\n    color: #6c757d;\n    font-size: 0.9rem;\n    text-align: right;\n    font-weight: 500;\n}\n\n/* コード例 */\n.code-example {\n    background: #282c34;\n    color: #abb2bf;\n    padding: 20px;\n    border-radius: 10px;\n    font-family: 'Courier New', monospace;\n    font-size: 0.9rem;\n    line-height: 1.6;\n    overflow-x: auto;\n    margin: 15px 0;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n}\n\n/* 指示セクション */\n.instruction {\n    background: linear-gradient(135deg, #56ccf2, #2f80ed);\n    color: white;\n    padding: 25px;\n    border-radius: 15px;\n    margin: 30px 0;\n    text-align: center;\n    box-shadow: 0 6px 20px rgba(86, 204, 242, 0.3);\n}\n\n.instruction h3 {\n    margin-bottom: 15px;\n    font-size: 1.4rem;\n}\n\n.instruction p {\n    margin-bottom: 10px;\n    font-size: 1.05rem;\n    line-height: 1.6;\n}\n\n/* レスポンシブデザイン */\n@media (max-width: 768px) {\n    .container {\n        padding: 20px;\n        margin: 10px;\n    }\n\n    h1 {\n        font-size: 2rem;\n    }\n\n    .celebration {\n        font-size: 2rem;\n    }\n\n    .button-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .array-cards {\n        grid-template-columns: 1fr;\n    }\n\n    .code-example {\n        font-size: 0.8rem;\n        padding: 15px;\n    }\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "console.log(\"📋 ステップ17.3a: 配列基礎を開始します！\");\nconsole.log(\"=====================================\");\n\n// 学習用配列データ\nlet fruits = [\"りんご\", \"バナナ\", \"オレンジ\", \"ぶどう\"];\nlet colors = [\"赤\", \"青\", \"緑\", \"黄色\"];\nlet numbers = [10, 20, 30, 40, 50];\n\n// 現在操作中の配列（初期設定）\nlet currentArray = [...fruits]; // fruitsのコピーを作成\nlet currentArrayName = \"果物\";\n\n// DOM要素の取得\nlet contentDisplay = document.getElementById(\"content-display\");\nlet currentArrayDisplay = document.getElementById(\"current-array\");\nlet operationDetails = document.getElementById(\"operation-details\");\n\n// 配列表示を更新する関数\nfunction updateArrayDisplays() {\n    // メイン表示エリアの更新\n    currentArrayDisplay.textContent = `[${currentArray.map(item => `\"${item}\"`).join(\", \")}] (長さ: ${currentArray.length})`;\n    \n    // 各配列カードの更新\n    document.getElementById(\"fruits-display\").textContent = `[${fruits.map(item => `\"${item}\"`).join(\", \")}]`;\n    document.getElementById(\"fruits-length\").textContent = fruits.length;\n    \n    document.getElementById(\"colors-display\").textContent = `[${colors.map(item => `\"${item}\"`).join(\", \")}]`;\n    document.getElementById(\"colors-length\").textContent = colors.length;\n    \n    document.getElementById(\"numbers-display\").textContent = `[${numbers.join(\", \")}]`;\n    document.getElementById(\"numbers-length\").textContent = numbers.length;\n}\n\n// 操作詳細を表示する関数\nfunction showOperationDetails(operation, details) {\n    operationDetails.innerHTML = `\n        <strong>🔍 ${operation}の詳細:</strong><br>\n        ${details}\n    `;\n}\n\n// 1. 配列表示ボタン\ndocument.getElementById(\"display-btn\").addEventListener(\"click\", function() {\n    contentDisplay.innerHTML = `\n        <h3 style=\"color: #4ecdc4; margin-top: 0;\">📋 配列表示機能</h3>\n        <div style=\"background: #e0f7fa; padding: 20px; border-radius: 10px; border-left: 4px solid #4ecdc4;\">\n            <h4>現在の${currentArrayName}配列:</h4>\n            <div style=\"background: white; padding: 15px; border-radius: 8px; margin: 10px 0; font-family: monospace;\">\n                [${currentArray.map(item => `\"${item}\"`).join(\", \")}]\n            </div>\n            <div style=\"margin-top: 15px;\">\n                <h4>インデックス番号と要素:</h4>\n                ${currentArray.map((item, index) => `\n                    <div style=\"background: white; padding: 8px 12px; margin: 5px 0; border-radius: 6px; font-family: monospace;\">\n                        インデックス ${index} → \"${item}\"\n                    </div>\n                `).join('')}\n            </div>\n        </div>\n        <p style=\"color: #7f8c8d; font-size: 0.9rem; margin-top: 15px;\">\n            💡 配列は0から始まるインデックス番号で各要素を管理します。\n        </p>\n    `;\n    \n    showOperationDetails(\"配列表示\", `\n        配列名: ${currentArrayName}配列<br>\n        配列の長さ: ${currentArray.length}<br>\n        各要素: ${currentArray.map((item, i) => `[${i}]=\"${item}\"`).join(\", \")}<br>\n        配列の型: ${typeof currentArray} (object)\n    `);\n    \n    console.log(\"📋 配列表示実行\");\n    console.log(`配列: [${currentArray.join(\", \")}]`);\n    console.log(`長さ: ${currentArray.length}`);\n    console.log(\"インデックス詳細:\", currentArray.map((item, i) => `[${i}] = \"${item}\"`));\n});\n\n// 2. 要素アクセスボタン\ndocument.getElementById(\"access-btn\").addEventListener(\"click\", function() {\n    // ランダムなインデックスを選択（0から配列長-1まで）\n    let randomIndex = Math.floor(Math.random() * currentArray.length);\n    let selectedElement = currentArray[randomIndex];\n    \n    // 最初と最後の要素も表示\n    let firstElement = currentArray[0];\n    let lastElement = currentArray[currentArray.length - 1];\n    \n    contentDisplay.innerHTML = `\n        <h3 style=\"color: #ffa726; margin-top: 0;\">🔍 要素アクセス機能</h3>\n        <div style=\"background: #fff3e0; padding: 20px; border-radius: 10px; border-left: 4px solid #ffa726;\">\n            <div style=\"background: white; padding: 15px; border-radius: 8px; margin-bottom: 15px; text-align: center;\">\n                <h4 style=\"color: #f57c00;\">ランダム選択結果</h4>\n                <div style=\"font-size: 1.5rem; color: #e65100; margin: 10px 0; font-family: monospace;\">\n                    ${currentArrayName}配列[${randomIndex}] = \"${selectedElement}\"\n                </div>\n                <p style=\"color: #bf360c; margin: 0;\">\n                    インデックス${randomIndex}の要素が選ばれました\n                </p>\n            </div>\n            \n            <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 15px;\">\n                <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center;\">\n                    <h5 style=\"color: #2e7d32; margin-bottom: 8px;\">最初の要素</h5>\n                    <div style=\"font-family: monospace; font-size: 1.1rem; color: #1b5e20;\">\n                        [0] = \"${firstElement}\"\n                    </div>\n                </div>\n                <div style=\"background: white; padding: 15px; border-radius: 8px; text-align: center;\">\n                    <h5 style=\"color: #c62828; margin-bottom: 8px;\">最後の要素</h5>\n                    <div style=\"font-family: monospace; font-size: 1.1rem; color: #b71c1c;\">\n                        [${currentArray.length - 1}] = \"${lastElement}\"\n                    </div>\n                </div>\n            </div>\n        </div>\n        <p style=\"color: #7f8c8d; font-size: 0.9rem; margin-top: 15px;\">\n            🎯 ${currentArray.length}個の要素から インデックス${randomIndex} の要素にアクセスしました\n        </p>\n    `;\n    \n    showOperationDetails(\"要素アクセス\", `\n        選択されたインデックス: ${randomIndex}<br>\n        選択された要素: \"${selectedElement}\"<br>\n        最初の要素: [0] = \"${firstElement}\"<br>\n        最後の要素: [${currentArray.length - 1}] = \"${lastElement}\"<br>\n        アクセス方法: ${currentArrayName}配列[インデックス番号]\n    `);\n    \n    console.log(\"🔍 要素アクセス実行\");\n    console.log(`選択インデックス: ${randomIndex}`);\n    console.log(`選択要素: \"${selectedElement}\"`);\n    console.log(`最初: [0] = \"${firstElement}\"`);\n    console.log(`最後: [${currentArray.length - 1}] = \"${lastElement}\"`);\n});\n\n// 3. 要素追加ボタン\ndocument.getElementById(\"add-btn\").addEventListener(\"click\", function() {\n    // 配列の種類に応じて適切な要素を追加\n    let newElement;\n    let oldLength = currentArray.length;\n    \n    if (currentArrayName === \"果物\") {\n        let additionalFruits = [\"いちご\", \"メロン\", \"パイナップル\", \"キウイ\", \"マンゴー\"];\n        newElement = additionalFruits[Math.floor(Math.random() * additionalFruits.length)];\n    } else if (currentArrayName === \"色\") {\n        let additionalColors = [\"紫\", \"オレンジ\", \"ピンク\", \"茶色\", \"グレー\"];\n        newElement = additionalColors[Math.floor(Math.random() * additionalColors.length)];\n    } else {\n        // 数字の場合\n        newElement = (currentArray.length + 1) * 10;\n    }\n    \n    // 要素を配列の末尾に追加\n    currentArray.push(newElement);\n    let newLength = currentArray.length;\n    \n    contentDisplay.innerHTML = `\n        <h3 style=\"color: #66bb6a; margin-top: 0;\">➕ 要素追加機能</h3>\n        <div style=\"background: #e8f5e9; padding: 20px; border-radius: 10px; border-left: 4px solid #66bb6a;\">\n            <div style=\"background: white; padding: 15px; border-radius: 8px; margin-bottom: 15px;\">\n                <h4 style=\"color: #2e7d32;\">要素追加結果</h4>\n                <div style=\"display: grid; grid-template-columns: 1fr auto 1fr; gap: 15px; align-items: center; margin: 15px 0;\">\n                    <div style=\"text-align: center;\">\n                        <h5 style=\"color: #757575; margin-bottom: 8px;\">変更前</h5>\n                        <div style=\"font-family: monospace; font-size: 0.9rem; padding: 10px; background: #f5f5f5; border-radius: 6px;\">\n                            [${currentArray.slice(0, -1).map(item => `\"${item}\"`).join(\", \")}]\n                        </div>\n                        <div style=\"color: #757575; font-size: 0.8rem; margin-top: 5px;\">\n                            長さ: ${oldLength}\n                        </div>\n                    </div>\n                    <div style=\"font-size: 2rem; color: #4caf50;\">→</div>\n                    <div style=\"text-align: center;\">\n                        <h5 style=\"color: #2e7d32; margin-bottom: 8px;\">変更後</h5>\n                        <div style=\"font-family: monospace; font-size: 0.9rem; padding: 10px; background: #c8e6c9; border-radius: 6px;\">\n                            [${currentArray.map(item => `\"${item}\"`).join(\", \")}]\n                        </div>\n                        <div style=\"color: #2e7d32; font-size: 0.8rem; margin-top: 5px;\">\n                            長さ: ${newLength}\n                        </div>\n                    </div>\n                </div>\n                <div style=\"background: #c8e6c9; padding: 12px; border-radius: 8px; text-align: center;\">\n                    <strong>追加された要素: \"${newElement}\" (インデックス: ${newLength - 1})</strong>\n                </div>\n            </div>\n        </div>\n        <p style=\"color: #7f8c8d; font-size: 0.9rem; margin-top: 15px;\">\n            ✅ push()メソッドで配列の末尾に要素が追加されました\n        </p>\n    `;\n    \n    showOperationDetails(\"要素追加 (push)\", `\n        使用メソッド: ${currentArrayName}配列.push(\"${newElement}\")<br>\n        追加前の長さ: ${oldLength}<br>\n        追加後の長さ: ${newLength}<br>\n        追加された要素: \"${newElement}\"<br>\n        追加位置: インデックス ${newLength - 1} (末尾)\n    `);\n    \n    // 配列表示を更新\n    updateArrayDisplays();\n    \n    console.log(\"➕ 要素追加実行\");\n    console.log(`追加要素: \"${newElement}\"`);\n    console.log(`変更前: [${currentArray.slice(0, -1).join(\", \")}] (長さ: ${oldLength})`);\n    console.log(`変更後: [${currentArray.join(\", \")}] (長さ: ${newLength})`);\n});\n\n// 4. 要素削除ボタン\ndocument.getElementById(\"remove-btn\").addEventListener(\"click\", function() {\n    if (currentArray.length === 0) {\n        contentDisplay.innerHTML = `\n            <h3 style=\"color: #ef5350; margin-top: 0;\">➖ 要素削除機能</h3>\n            <div style=\"background: #ffebee; padding: 20px; border-radius: 10px; border-left: 4px solid #ef5350;\">\n                <div style=\"background: white; padding: 20px; border-radius: 8px; text-align: center;\">\n                    <div style=\"font-size: 3rem; color: #ef5350;\">⚠️</div>\n                    <h4 style=\"color: #c62828; margin: 15px 0;\">配列が空です</h4>\n                    <p style=\"color: #d32f2f; margin: 0;\">\n                        削除する要素がありません。まず要素を追加してください。\n                    </p>\n                </div>\n            </div>\n        `;\n        \n        showOperationDetails(\"要素削除エラー\", `\n            エラー: 空の配列からは要素を削除できません<br>\n            現在の配列長: ${currentArray.length}<br>\n            対処方法: 先に要素を追加してから削除を試してください\n        `);\n        \n        console.log(\"⚠️ 削除エラー: 配列が空です\");\n        return;\n    }\n    \n    let oldLength = currentArray.length;\n    let removedElement = currentArray.pop(); // 末尾の要素を削除\n    let newLength = currentArray.length;\n    \n    contentDisplay.innerHTML = `\n        <h3 style=\"color: #ef5350; margin-top: 0;\">➖ 要素削除機能</h3>\n        <div style=\"background: #ffebee; padding: 20px; border-radius: 10px; border-left: 4px solid #ef5350;\">\n            <div style=\"background: white; padding: 15px; border-radius: 8px; margin-bottom: 15px;\">\n                <h4 style=\"color: #c62828;\">要素削除結果</h4>\n                <div style=\"display: grid; grid-template-columns: 1fr auto 1fr; gap: 15px; align-items: center; margin: 15px 0;\">\n                    <div style=\"text-align: center;\">\n                        <h5 style=\"color: #757575; margin-bottom: 8px;\">変更前</h5>\n                        <div style=\"font-family: monospace; font-size: 0.9rem; padding: 10px; background: #f5f5f5; border-radius: 6px;\">\n                            [${[...currentArray, removedElement].map(item => `\"${item}\"`).join(\", \")}]\n                        </div>\n                        <div style=\"color: #757575; font-size: 0.8rem; margin-top: 5px;\">\n                            長さ: ${oldLength}\n                        </div>\n                    </div>\n                    <div style=\"font-size: 2rem; color: #f44336;\">→</div>\n                    <div style=\"text-align: center;\">\n                        <h5 style=\"color: #c62828; margin-bottom: 8px;\">変更後</h5>\n                        <div style=\"font-family: monospace; font-size: 0.9rem; padding: 10px; background: #ffcdd2; border-radius: 6px;\">\n                            ${currentArray.length > 0 ? `[${currentArray.map(item => `\"${item}\"`).join(\", \")}]` : '[ ] (空の配列)'}\n                        </div>\n                        <div style=\"color: #c62828; font-size: 0.8rem; margin-top: 5px;\">\n                            長さ: ${newLength}\n                        </div>\n                    </div>\n                </div>\n                <div style=\"background: #ffcdd2; padding: 12px; border-radius: 8px; text-align: center;\">\n                    <strong>削除された要素: \"${removedElement}\" (元インデックス: ${oldLength - 1})</strong>\n                </div>\n            </div>\n        </div>\n        <p style=\"color: #7f8c8d; font-size: 0.9rem; margin-top: 15px;\">\n            ✅ pop()メソッドで配列の末尾から要素が削除されました\n        </p>\n    `;\n    \n    showOperationDetails(\"要素削除 (pop)\", `\n        使用メソッド: ${currentArrayName}配列.pop()<br>\n        削除前の長さ: ${oldLength}<br>\n        削除後の長さ: ${newLength}<br>\n        削除された要素: \"${removedElement}\"<br>\n        削除位置: インデックス ${oldLength - 1} (末尾)\n    `);\n    \n    // 配列表示を更新\n    updateArrayDisplays();\n    \n    console.log(\"➖ 要素削除実行\");\n    console.log(`削除要素: \"${removedElement}\"`);\n    console.log(`変更前: [${[...currentArray, removedElement].join(\", \")}] (長さ: ${oldLength})`);\n    console.log(`変更後: [${currentArray.join(\", \")}] (長さ: ${newLength})`);\n});\n\n// 配列切り替え機能（隠し機能：コンソールから使用可能）\nfunction switchArray(arrayName) {\n    switch(arrayName.toLowerCase()) {\n        case \"fruit\":\n        case \"fruits\":\n        case \"果物\":\n            currentArray = [...fruits];\n            currentArrayName = \"果物\";\n            break;\n        case \"color\":\n        case \"colors\":\n        case \"色\":\n            currentArray = [...colors];\n            currentArrayName = \"色\";\n            break;\n        case \"number\":\n        case \"numbers\":\n        case \"数字\":\n            currentArray = [...numbers];\n            currentArrayName = \"数字\";\n            break;\n        default:\n            console.log(\"❌ 無効な配列名です。使用可能: 'fruits', 'colors', 'numbers'\");\n            return;\n    }\n    \n    updateArrayDisplays();\n    console.log(`✅ 配列を${currentArrayName}配列に切り替えました`);\n    console.log(`現在の配列: [${currentArray.join(\", \")}]`);\n}\n\n// 初期化処理\nupdateArrayDisplays();\n\n// ヘルプ情報をコンソールに出力\nconsole.log(\"✅ 配列基礎システムが初期化されました！\");\nconsole.log(\"📊 使用可能な配列:\", { fruits, colors, numbers });\nconsole.log(\"🔧 配列操作メソッド:\", [\"push()\", \"pop()\", \"length\", \"インデックスアクセス[i]\"]);\nconsole.log(\"💡 隠し機能: switchArray('fruits')で配列切り替え可能\");\nconsole.log(\"🎯 各ボタンをクリックして、配列の基本操作を学習してください！\");"
    }
  },
  "expectedResult": {
    "arrayCreation": "配列が正しく作成される",
    "indexAccess": "インデックスでの要素アクセスが動作する",
    "pushPop": "push()とpop()での要素追加・削除が動作する",
    "behavior": "果物・色・数字の3つの配列で操作デモが動作する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}