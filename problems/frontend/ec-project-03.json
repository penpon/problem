{
  "id": "ec-project-03",
  "title": "58: 高度なフィルタリングシステム",
  "description": "ECプロジェクトの高度な機能実装 - プロフェッショナルレベルのWebアプリケーション開発",
  "category": "ec-project",
  "difficulty": 5,
  "instructions": [
    "高度なJavaScript機能を実装してください",
    "データベース連携を模擬してください", 
    "ユーザビリティを最優先に設計してください",
    "セキュリティ対策を考慮してください"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>高度なフィルタリングシステム</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container-fluid\">\n        <nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n            <div class=\"container\">\n                <a class=\"navbar-brand\" href=\"#\">Advanced Filter System</a>\n            </div>\n        </nav>\n        <main class=\"py-4\">\n            <div class=\"container\">\n                <h1 class=\"display-4\">高度なフィルタリングシステム</h1>\n                <div id=\"filterContainer\">\n                    <!-- JavaScript で動的に生成されるフィルター機能 -->\n                </div>\n                <div id=\"productResults\">\n                    <!-- フィルタリング結果表示エリア -->\n                </div>\n            </div>\n        </main>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "/* 高度なフィルタリングシステム CSS */\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n}\n\n.navbar {\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n.filter-panel {\n    background: white;\n    border-radius: 15px;\n    padding: 20px;\n    box-shadow: 0 5px 15px rgba(0,0,0,0.1);\n    margin-bottom: 20px;\n}\n\n.filter-group {\n    margin-bottom: 15px;\n}\n\n.filter-checkbox {\n    margin-right: 15px;\n}\n\n.product-card {\n    border: none;\n    border-radius: 15px;\n    box-shadow: 0 5px 15px rgba(0,0,0,0.1);\n    transition: all 0.3s ease;\n    height: 100%;\n}\n\n.product-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 15px 30px rgba(0,0,0,0.15);\n}\n\n.price-range-slider {\n    width: 100%;\n    margin: 10px 0;\n}\n\n.btn {\n    border-radius: 25px;\n    font-weight: 600;\n    transition: all 0.3s ease;\n}\n\n.btn:hover {\n    transform: translateY(-2px);\n}\n\n@media (max-width: 768px) {\n    .container {\n        padding: 15px;\n    }\n    .filter-panel {\n        padding: 15px;\n    }\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "// 高度なフィルタリングシステム JavaScript\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('高度なフィルタリングシステム開始');\n    \n    initializeFilteringSystem();\n    \n    console.log('フィルタリングシステム初期化完了');\n});\n\n// 商品データベース（実際のシステムではAPIから取得）\nconst productDatabase = [\n    {\n        id: 1,\n        name: 'プレミアムスマートフォン',\n        category: 'electronics',\n        brand: 'TechCorp',\n        price: 89800,\n        rating: 4.8,\n        image: 'https://via.placeholder.com/300x200/007bff/ffffff?text=Smartphone',\n        tags: ['新製品', '人気', '高性能']\n    },\n    {\n        id: 2,\n        name: 'ワイヤレスイヤホン',\n        category: 'electronics',\n        brand: 'AudioMax',\n        price: 15800,\n        rating: 4.5,\n        image: 'https://via.placeholder.com/300x200/28a745/ffffff?text=Earbuds',\n        tags: ['音響', 'ワイヤレス']\n    },\n    {\n        id: 3,\n        name: 'オーガニックコーヒー',\n        category: 'food',\n        brand: 'CoffeeVille',\n        price: 2980,\n        rating: 4.2,\n        image: 'https://via.placeholder.com/300x200/ffc107/000000?text=Coffee',\n        tags: ['オーガニック', '厳選豆']\n    },\n    {\n        id: 4,\n        name: 'デザイナーズチェア',\n        category: 'furniture',\n        brand: 'ModernHome',\n        price: 45000,\n        rating: 4.7,\n        image: 'https://via.placeholder.com/300x200/dc3545/ffffff?text=Chair',\n        tags: ['デザイナーズ', 'モダン']\n    }\n];\n\nlet currentFilters = {\n    category: 'all',\n    brand: 'all',\n    priceRange: [0, 100000],\n    rating: 0,\n    tags: []\n};\n\nfunction initializeFilteringSystem() {\n    const filterContainer = document.getElementById('filterContainer');\n    const resultsContainer = document.getElementById('productResults');\n    \n    if (!filterContainer || !resultsContainer) {\n        console.error('必要な要素が見つかりません');\n        return;\n    }\n    \n    // フィルターUIの構築\n    buildFilterInterface(filterContainer);\n    \n    // 初期商品表示\n    displayFilteredProducts(productDatabase, resultsContainer);\n    \n    // フィルターイベントの設定\n    setupFilterEvents();\n}\n\nfunction buildFilterInterface(container) {\n    const categories = [...new Set(productDatabase.map(p => p.category))];\n    const brands = [...new Set(productDatabase.map(p => p.brand))];\n    const allTags = [...new Set(productDatabase.flatMap(p => p.tags))];\n    \n    container.innerHTML = `\n        <div class=\"filter-panel\">\n            <h3>フィルター設定</h3>\n            <div class=\"row\">\n                <!-- カテゴリフィルター -->\n                <div class=\"col-md-3\">\n                    <div class=\"filter-group\">\n                        <label class=\"form-label\">カテゴリ</label>\n                        <select class=\"form-select\" id=\"categoryFilter\">\n                            <option value=\"all\">すべて</option>\n                            ${categories.map(cat => `<option value=\"${cat}\">${cat}</option>`).join('')}\n                        </select>\n                    </div>\n                </div>\n                \n                <!-- ブランドフィルター -->\n                <div class=\"col-md-3\">\n                    <div class=\"filter-group\">\n                        <label class=\"form-label\">ブランド</label>\n                        <select class=\"form-select\" id=\"brandFilter\">\n                            <option value=\"all\">すべて</option>\n                            ${brands.map(brand => `<option value=\"${brand}\">${brand}</option>`).join('')}\n                        </select>\n                    </div>\n                </div>\n                \n                <!-- 価格範囲フィルター -->\n                <div class=\"col-md-3\">\n                    <div class=\"filter-group\">\n                        <label class=\"form-label\">価格範囲</label>\n                        <input type=\"range\" class=\"form-range price-range-slider\" \n                               id=\"priceRange\" min=\"0\" max=\"100000\" step=\"1000\" value=\"100000\">\n                        <div class=\"d-flex justify-content-between\">\n                            <small>¥0</small>\n                            <small id=\"priceValue\">¥100,000</small>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- 評価フィルター -->\n                <div class=\"col-md-3\">\n                    <div class=\"filter-group\">\n                        <label class=\"form-label\">最低評価</label>\n                        <select class=\"form-select\" id=\"ratingFilter\">\n                            <option value=\"0\">すべて</option>\n                            <option value=\"4\">4つ星以上</option>\n                            <option value=\"4.5\">4.5つ星以上</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- タグフィルター -->\n            <div class=\"filter-group\">\n                <label class=\"form-label\">タグ</label>\n                <div>\n                    ${allTags.map(tag => `\n                        <div class=\"form-check form-check-inline\">\n                            <input class=\"form-check-input tag-filter\" type=\"checkbox\" \n                                   id=\"tag-${tag}\" value=\"${tag}\">\n                            <label class=\"form-check-label\" for=\"tag-${tag}\">${tag}</label>\n                        </div>\n                    `).join('')}\n                </div>\n            </div>\n            \n            <div class=\"mt-3\">\n                <button class=\"btn btn-secondary me-2\" onclick=\"clearAllFilters()\">\n                    フィルタークリア\n                </button>\n                <button class=\"btn btn-primary\" onclick=\"applyFilters()\">\n                    フィルター適用\n                </button>\n            </div>\n        </div>\n    `;\n}\n\nfunction setupFilterEvents() {\n    // リアルタイムフィルタリング\n    document.getElementById('categoryFilter').addEventListener('change', applyFilters);\n    document.getElementById('brandFilter').addEventListener('change', applyFilters);\n    document.getElementById('ratingFilter').addEventListener('change', applyFilters);\n    \n    // 価格スライダー\n    const priceRange = document.getElementById('priceRange');\n    const priceValue = document.getElementById('priceValue');\n    \n    priceRange.addEventListener('input', function() {\n        priceValue.textContent = `¥${parseInt(this.value).toLocaleString()}`;\n        applyFilters();\n    });\n    \n    // タグチェックボックス\n    document.querySelectorAll('.tag-filter').forEach(checkbox => {\n        checkbox.addEventListener('change', applyFilters);\n    });\n}\n\nfunction applyFilters() {\n    // 現在のフィルター値を取得\n    currentFilters.category = document.getElementById('categoryFilter').value;\n    currentFilters.brand = document.getElementById('brandFilter').value;\n    currentFilters.priceRange[1] = parseInt(document.getElementById('priceRange').value);\n    currentFilters.rating = parseFloat(document.getElementById('ratingFilter').value);\n    \n    // 選択されたタグを取得\n    currentFilters.tags = Array.from(document.querySelectorAll('.tag-filter:checked'))\n                                .map(checkbox => checkbox.value);\n    \n    // フィルタリング実行\n    const filteredProducts = filterProducts(productDatabase, currentFilters);\n    \n    // 結果表示\n    const resultsContainer = document.getElementById('productResults');\n    displayFilteredProducts(filteredProducts, resultsContainer);\n    \n    // 統計情報更新\n    updateFilterStats(filteredProducts.length, productDatabase.length);\n}\n\nfunction filterProducts(products, filters) {\n    return products.filter(product => {\n        // カテゴリフィルター\n        if (filters.category !== 'all' && product.category !== filters.category) {\n            return false;\n        }\n        \n        // ブランドフィルター\n        if (filters.brand !== 'all' && product.brand !== filters.brand) {\n            return false;\n        }\n        \n        // 価格範囲フィルター\n        if (product.price < filters.priceRange[0] || product.price > filters.priceRange[1]) {\n            return false;\n        }\n        \n        // 評価フィルター\n        if (product.rating < filters.rating) {\n            return false;\n        }\n        \n        // タグフィルター\n        if (filters.tags.length > 0) {\n            const hasMatchingTag = filters.tags.some(tag => product.tags.includes(tag));\n            if (!hasMatchingTag) {\n                return false;\n            }\n        }\n        \n        return true;\n    });\n}\n\nfunction displayFilteredProducts(products, container) {\n    if (products.length === 0) {\n        container.innerHTML = `\n            <div class=\"alert alert-info\">\n                <h4>検索結果が見つかりません</h4>\n                <p>フィルター条件を変更して再度お試しください。</p>\n            </div>\n        `;\n        return;\n    }\n    \n    const productsHtml = products.map(product => `\n        <div class=\"col-lg-3 col-md-4 col-sm-6 mb-4\">\n            <div class=\"card product-card\">\n                <img src=\"${product.image}\" class=\"card-img-top\" alt=\"${product.name}\" style=\"height: 200px; object-fit: cover;\">\n                <div class=\"card-body\">\n                    <h6 class=\"card-title\">${product.name}</h6>\n                    <p class=\"text-muted small\">${product.brand}</p>\n                    <p class=\"card-text\">\n                        <strong>¥${product.price.toLocaleString()}</strong>\n                    </p>\n                    <div class=\"mb-2\">\n                        <small class=\"text-warning\">★${product.rating}</small>\n                    </div>\n                    <div class=\"mb-2\">\n                        ${product.tags.map(tag => `<span class=\"badge bg-secondary me-1\">${tag}</span>`).join('')}\n                    </div>\n                    <button class=\"btn btn-primary btn-sm w-100\" onclick=\"addToCart(${product.id})\">\n                        カートに追加\n                    </button>\n                </div>\n            </div>\n        </div>\n    `).join('');\n    \n    container.innerHTML = `\n        <div class=\"row\">\n            ${productsHtml}\n        </div>\n    `;\n    \n    // アニメーション効果\n    animateResults();\n}\n\nfunction clearAllFilters() {\n    document.getElementById('categoryFilter').value = 'all';\n    document.getElementById('brandFilter').value = 'all';\n    document.getElementById('priceRange').value = 100000;\n    document.getElementById('priceValue').textContent = '¥100,000';\n    document.getElementById('ratingFilter').value = '0';\n    \n    document.querySelectorAll('.tag-filter').forEach(checkbox => {\n        checkbox.checked = false;\n    });\n    \n    // フィルターリセット\n    currentFilters = {\n        category: 'all',\n        brand: 'all',\n        priceRange: [0, 100000],\n        rating: 0,\n        tags: []\n    };\n    \n    // 全商品表示\n    const resultsContainer = document.getElementById('productResults');\n    displayFilteredProducts(productDatabase, resultsContainer);\n    \n    updateFilterStats(productDatabase.length, productDatabase.length);\n}\n\nfunction addToCart(productId) {\n    const product = productDatabase.find(p => p.id === productId);\n    if (product) {\n        console.log('カートに追加:', product.name);\n        showNotification(`${product.name} をカートに追加しました！`);\n    }\n}\n\nfunction showNotification(message) {\n    const notification = document.createElement('div');\n    notification.className = 'alert alert-success position-fixed';\n    notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';\n    notification.textContent = message;\n    \n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n        if (notification.parentNode) {\n            notification.parentNode.removeChild(notification);\n        }\n    }, 3000);\n}\n\nfunction updateFilterStats(filtered, total) {\n    console.log(`フィルター結果: ${filtered}/${total} 商品が表示中`);\n}\n\nfunction animateResults() {\n    const cards = document.querySelectorAll('.product-card');\n    cards.forEach((card, index) => {\n        card.style.opacity = '0';\n        card.style.transform = 'translateY(20px)';\n        \n        setTimeout(() => {\n            card.style.transition = 'all 0.5s ease';\n            card.style.opacity = '1';\n            card.style.transform = 'translateY(0)';\n        }, index * 50);\n    });\n}\n\n// エクスポート（モジュールシステム対応）\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { initializeFilteringSystem, applyFilters, clearAllFilters };\n}"
    }
  },
  "expectedResult": {
    "console": "フィルタリングシステム初期化完了",
    "behavior": "高度なフィルタリング機能により商品を多角的に絞り込みできるシステムが動作する"
  },
  "checks": [
    {
      "id": "multi-filter",
      "name": "複数フィルター",
      "type": "js",
      "message": "複数の条件を組み合わせたフィルタリングが実装されている必要があります"
    },
    {
      "id": "real-time-filter",
      "name": "リアルタイムフィルタリング",
      "type": "js",
      "message": "フィルター変更時にリアルタイムで結果が更新される必要があります"
    },
    {
      "id": "filter-ui",
      "name": "フィルターUI",
      "type": "structure",
      "message": "直感的で使いやすいフィルターUIが実装されている必要があります"
    },
    {
      "id": "filter-persistence",
      "name": "フィルター状態維持",
      "type": "js",
      "message": "フィルター状態が適切に管理されている必要があります"
    }
  ],
  "hints": [
    "配列のfilter()メソッドを使って効率的にフィルタリング処理を実装しましょう",
    "複数の条件を組み合わせるロジックを正しく実装しましょう",
    "ユーザーが直感的に操作できるUIコンポーネントを選択しましょう",
    "パフォーマンスを考慮してフィルタリング処理を最適化しましょう"
  ]
}
