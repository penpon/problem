{
  "id": "js-advanced-18",
  "title": "データ管理強化 - localStorage による永続化入門",
  "description": "オブジェクト管理とDOM操作の技術を基盤として、localStorage によるデータ永続化技術を習得します",
  "category": "javascript-advanced",
  "difficulty": 4,
  "instructions": [
    "localStorageによるデータ永続化の仕組みを理解する",
    "ブラウザ閉鎖後もデータを保持する機能を実装する",
    "ページ再読み込み時にデータを復元する自動読み込み機能を構築する",
    "操作記録をタイムスタンプ付きで保存する履歴機能を実装する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>19.3 データ管理強化 - localStorage学習</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <!-- 商品カード -->\n        <div class=\"product-card\">\n            <div class=\"product-image\">👕</div>\n            \n            <div class=\"product-info\">\n                <h2 id=\"productName\">プレミアム Tシャツ</h2>\n                <div class=\"product-price\">¥<span id=\"productPrice\">2,980</span></div>\n            </div>\n            \n            <div class=\"action-buttons\">\n                <button class=\"btn btn-like\" id=\"likeBtn\">\n                    ❤️ <span id=\"likeCount\">0</span>\n                </button>\n                <button class=\"btn btn-details\" id=\"detailsBtn\">\n                    📝 詳細\n                </button>\n                <button class=\"btn btn-cart\" id=\"cartBtn\">\n                    🛒 カート\n                </button>\n            </div>\n            \n            <div class=\"product-details\" id=\"productDetails\">\n                <h3>商品詳細情報</h3>\n                <p><strong>素材:</strong> オーガニックコットン100%</p>\n                <p><strong>サイズ:</strong> S/M/L/XL展開</p>\n                <p><strong>カラー:</strong> 4色バリエーション</p>\n                <p><strong>特徴:</strong> 肌触り抜群の高品質素材</p>\n            </div>\n        </div>\n        \n        <!-- 学習パネル -->\n        <div class=\"learning-panel\">\n            <h2 class=\"panel-title\">📚 localStorage学習モード</h2>\n            \n            <!-- localStorage状態表示 -->\n            <div class=\"storage-status\" id=\"storageStatus\">\n                localStorage: 初期化中...\n            </div>\n            \n            <!-- 統計表示 -->\n            <div class=\"stats-grid\">\n                <div class=\"stat-item\">\n                    <div class=\"stat-number\" id=\"totalLikes\">0</div>\n                    <div class=\"stat-label\">いいね</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div class=\"stat-number\" id=\"totalViews\">0</div>\n                    <div class=\"stat-label\">詳細表示</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div class=\"stat-number\" id=\"totalCart\">0</div>\n                    <div class=\"stat-label\">カート操作</div>\n                </div>\n            </div>\n            \n            <!-- 履歴セクション -->\n            <div class=\"history-section\">\n                <div class=\"history-title\">\n                    📜 操作履歴\n                    <button class=\"btn-clear-history\" id=\"clearHistoryBtn\">履歴クリア</button>\n                </div>\n                <div class=\"history-list\" id=\"historyList\">\n                    初期化完了\n                </div>\n            </div>\n            \n            <!-- オブジェクト表示 -->\n            <div class=\"object-display\">\n                <div class=\"object-title\">💾 保存されたデータ</div>\n                <div id=\"objectDisplay\">読み込み中...</div>\n            </div>\n            \n            <!-- コントロールボタン -->\n            <div class=\"control-buttons\">\n                <button class=\"btn-control btn-reset\" id=\"resetBtn\">🔄 リセット</button>\n                <button class=\"btn-control btn-export\" id=\"exportBtn\">💾 データ表示</button>\n            </div>\n        </div>\n    </div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Hiragino Sans', 'Yu Gothic UI', sans-serif;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 20px;\n}\n\n.container {\n    max-width: 1100px;\n    width: 100%;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 25px;\n}\n\n/* 商品カード */\n.product-card {\n    background: white;\n    border-radius: 20px;\n    padding: 25px;\n    text-align: center;\n    box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n}\n\n.product-image {\n    width: 100px;\n    height: 100px;\n    background: linear-gradient(45deg, #ff6b6b, #4ecdc4);\n    border-radius: 15px;\n    margin: 0 auto 15px auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 35px;\n    color: white;\n}\n\n.product-info h2 {\n    color: #333;\n    font-size: 18px;\n    margin-bottom: 5px;\n}\n\n.product-price {\n    font-size: 20px;\n    color: #e74c3c;\n    font-weight: bold;\n    margin-bottom: 15px;\n}\n\n/* アクションボタン */\n.action-buttons {\n    display: flex;\n    gap: 8px;\n    margin-bottom: 15px;\n    justify-content: center;\n}\n\n.btn {\n    padding: 8px 15px;\n    border: none;\n    border-radius: 18px;\n    cursor: pointer;\n    font-size: 12px;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    flex: 1;\n    max-width: 90px;\n}\n\n.btn-like {\n    background: #f8f9fa;\n    color: #666;\n    border: 2px solid #ddd;\n}\n\n.btn-like.liked {\n    background: #e74c3c;\n    color: white;\n    border-color: #e74c3c;\n}\n\n.btn-details {\n    background: #3498db;\n    color: white;\n}\n\n.btn-cart {\n    background: #27ae60;\n    color: white;\n}\n\n.btn-cart.in-cart {\n    background: #f39c12;\n}\n\n.btn:hover {\n    transform: scale(1.05);\n}\n\n/* 商品詳細 */\n.product-details {\n    background: #f8f9fa;\n    border-radius: 10px;\n    padding: 12px;\n    margin-top: 10px;\n    display: none;\n    text-align: left;\n    font-size: 12px;\n}\n\n.product-details.show {\n    display: block;\n    animation: fadeIn 0.3s ease;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\n\n.product-details h3 {\n    color: #333;\n    margin-bottom: 8px;\n    font-size: 14px;\n}\n\n.product-details p {\n    color: #666;\n    line-height: 1.4;\n    margin-bottom: 3px;\n}\n\n/* 学習パネル */\n.learning-panel {\n    background: white;\n    border-radius: 20px;\n    padding: 20px;\n    box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n}\n\n.panel-title {\n    text-align: center;\n    font-size: 16px;\n    font-weight: 600;\n    color: #333;\n    margin-bottom: 15px;\n}\n\n/* 統計表示（コンパクト版） */\n.stats-grid {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    gap: 8px;\n    margin-bottom: 15px;\n}\n\n.stat-item {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    padding: 10px;\n    border-radius: 10px;\n    text-align: center;\n}\n\n.stat-number {\n    font-size: 16px;\n    font-weight: bold;\n    margin-bottom: 2px;\n}\n\n.stat-label {\n    font-size: 9px;\n    opacity: 0.9;\n}\n\n/* localStorage状態表示 */\n.storage-status {\n    background: #2ecc71;\n    color: white;\n    border-radius: 8px;\n    padding: 8px;\n    margin-bottom: 12px;\n    text-align: center;\n    font-size: 11px;\n    font-weight: 600;\n}\n\n.storage-status.error {\n    background: #e74c3c;\n}\n\n/* 履歴表示エリア */\n.history-section {\n    margin-bottom: 12px;\n}\n\n.history-title {\n    font-size: 12px;\n    color: #666;\n    margin-bottom: 8px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.btn-clear-history {\n    background: #95a5a6;\n    color: white;\n    border: none;\n    padding: 3px 8px;\n    border-radius: 8px;\n    font-size: 9px;\n    cursor: pointer;\n}\n\n.history-list {\n    background: #f8f9fa;\n    border-radius: 8px;\n    padding: 8px;\n    max-height: 120px;\n    overflow-y: auto;\n    font-size: 10px;\n}\n\n.history-item {\n    color: #666;\n    margin-bottom: 3px;\n    padding: 2px;\n    border-left: 2px solid #3498db;\n    padding-left: 6px;\n}\n\n/* オブジェクト表示（コンパクト版） */\n.object-display {\n    background: #34495e;\n    color: #ecf0f1;\n    border-radius: 8px;\n    padding: 10px;\n    margin-bottom: 12px;\n    font-family: 'Courier New', monospace;\n    font-size: 10px;\n}\n\n.object-title {\n    color: #e74c3c;\n    font-weight: bold;\n    margin-bottom: 6px;\n}\n\n/* コントロールボタン */\n.control-buttons {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 8px;\n}\n\n.btn-control {\n    padding: 8px;\n    border: none;\n    border-radius: 8px;\n    font-size: 11px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: background 0.3s ease;\n}\n\n.btn-reset {\n    background: #e74c3c;\n    color: white;\n}\n\n.btn-export {\n    background: #27ae60;\n    color: white;\n}\n\n.btn-control:hover {\n    opacity: 0.8;\n}\n\n/* レスポンシブ */\n@media (max-width: 768px) {\n    .container {\n        grid-template-columns: 1fr;\n        gap: 15px;\n    }\n    \n    .stats-grid {\n        grid-template-columns: 1fr 1fr;\n    }\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "// === 19.3 メイン学習テーマ: localStorage による永続化 ===\n\n// 1. 商品データオブジェクト（19.2から拡張）\nlet productData = {\n    name: \"プレミアム Tシャツ\",\n    price: 2980,\n    likes: 0,\n    isLiked: false,\n    showDetails: false,\n    inCart: false,\n    detailViews: 0,\n    cartActions: 0,\n    lastUpdated: new Date().toISOString() // 最終更新日時を追加\n};\n\n// 操作履歴を保存する配列\nlet actionHistory = [];\n\n// 2. DOM要素の取得\nconst likeBtn = document.getElementById('likeBtn');\nconst detailsBtn = document.getElementById('detailsBtn');\nconst cartBtn = document.getElementById('cartBtn');\nconst productDetails = document.getElementById('productDetails');\nconst likeCount = document.getElementById('likeCount');\nconst totalLikes = document.getElementById('totalLikes');\nconst totalViews = document.getElementById('totalViews');\nconst totalCart = document.getElementById('totalCart');\nconst storageStatus = document.getElementById('storageStatus');\nconst historyList = document.getElementById('historyList');\nconst objectDisplay = document.getElementById('objectDisplay');\nconst resetBtn = document.getElementById('resetBtn');\nconst exportBtn = document.getElementById('exportBtn');\nconst clearHistoryBtn = document.getElementById('clearHistoryBtn');\n\n// 3. localStorage からデータを読み込む機能（新機能）\nfunction loadData() {\n    try {\n        // productData の読み込み\n        const savedData = localStorage.getItem('productCardData');\n        if (savedData) {\n            productData = JSON.parse(savedData);\n            updateStorageStatus('✅ データを復元しました', false);\n        } else {\n            updateStorageStatus('🆕 新規データで開始', false);\n        }\n\n        // 履歴データの読み込み\n        const savedHistory = localStorage.getItem('productCardHistory');\n        if (savedHistory) {\n            actionHistory = JSON.parse(savedHistory);\n        }\n\n    } catch (error) {\n        console.error('データ読み込みエラー:', error);\n        updateStorageStatus('⚠️ データエラー - 初期化しました', true);\n        resetToDefaults();\n    }\n}\n\n// 4. localStorage にデータを保存する機能（新機能）\nfunction saveData() {\n    try {\n        productData.lastUpdated = new Date().toISOString();\n        localStorage.setItem('productCardData', JSON.stringify(productData));\n        localStorage.setItem('productCardHistory', JSON.stringify(actionHistory));\n        updateStorageStatus('💾 データを保存しました', false);\n    } catch (error) {\n        console.error('データ保存エラー:', error);\n        updateStorageStatus('❌ 保存に失敗しました', true);\n    }\n}\n\n// 5. 履歴に操作を記録する機能（新機能）\nfunction addToHistory(action) {\n    const timestamp = new Date().toLocaleTimeString();\n    actionHistory.unshift(`${timestamp}: ${action}`); // 新しい記録を先頭に追加\n    \n    // 履歴は最大10件まで保持\n    if (actionHistory.length > 10) {\n        actionHistory = actionHistory.slice(0, 10);\n    }\n    \n    updateHistoryDisplay();\n}\n\n// 6. localStorage状態表示の更新\nfunction updateStorageStatus(message, isError) {\n    storageStatus.textContent = message;\n    storageStatus.className = isError ? 'storage-status error' : 'storage-status';\n}\n\n// 7. 履歴表示の更新\nfunction updateHistoryDisplay() {\n    if (actionHistory.length === 0) {\n        historyList.innerHTML = '<div class=\"history-item\">履歴がありません</div>';\n    } else {\n        historyList.innerHTML = actionHistory\n            .map(item => `<div class=\"history-item\">${item}</div>`)\n            .join('');\n    }\n}\n\n// 8. オブジェクト表示の更新\nfunction displayObjectData() {\n    objectDisplay.innerHTML = `\n        likes: ${productData.likes}<br>\n        isLiked: ${productData.isLiked}<br>\n        showDetails: ${productData.showDetails}<br>\n        inCart: ${productData.inCart}<br>\n        <small>保存: ${new Date(productData.lastUpdated).toLocaleTimeString()}</small>\n    `;\n}\n\n// 9. 統計表示の更新\nfunction updateStats() {\n    totalLikes.textContent = productData.likes;\n    totalViews.textContent = productData.detailViews;\n    totalCart.textContent = productData.cartActions;\n}\n\n// 10. 画面全体の更新\nfunction updateDisplay() {\n    // ボタン状態の更新\n    likeCount.textContent = productData.likes;\n    \n    if (productData.isLiked) {\n        likeBtn.classList.add('liked');\n    } else {\n        likeBtn.classList.remove('liked');\n    }\n    \n    if (productData.showDetails) {\n        productDetails.classList.add('show');\n        detailsBtn.textContent = '📝 閉じる';\n    } else {\n        productDetails.classList.remove('show');\n        detailsBtn.textContent = '📝 詳細';\n    }\n    \n    if (productData.inCart) {\n        cartBtn.classList.add('in-cart');\n        cartBtn.textContent = '🛒 削除';\n    } else {\n        cartBtn.classList.remove('in-cart');\n        cartBtn.textContent = '🛒 カート';\n    }\n    \n    updateStats();\n    displayObjectData();\n}\n\n// 11. いいね機能（自動保存付き）\nfunction handleLike() {\n    productData.isLiked = !productData.isLiked;\n    productData.likes += productData.isLiked ? 1 : -1;\n    \n    addToHistory(productData.isLiked ? 'いいねしました' : 'いいねを取り消しました');\n    updateDisplay();\n    saveData(); // 自動保存\n}\n\n// 12. 詳細表示機能（自動保存付き）\nfunction handleDetailsToggle() {\n    productData.showDetails = !productData.showDetails;\n    if (productData.showDetails) {\n        productData.detailViews += 1;\n        addToHistory('詳細情報を表示しました');\n    } else {\n        addToHistory('詳細情報を閉じました');\n    }\n    \n    updateDisplay();\n    saveData(); // 自動保存\n}\n\n// 13. カート機能（自動保存付き）\nfunction handleCart() {\n    productData.inCart = !productData.inCart;\n    productData.cartActions += 1;\n    \n    addToHistory(productData.inCart ? 'カートに追加しました' : 'カートから削除しました');\n    updateDisplay();\n    saveData(); // 自動保存\n}\n\n// 14. データのリセット\nfunction handleReset() {\n    if (confirm('全ての保存データを削除してリセットしますか？')) {\n        localStorage.removeItem('productCardData');\n        localStorage.removeItem('productCardHistory');\n        resetToDefaults();\n        addToHistory('データをリセットしました');\n        updateDisplay();\n        updateStorageStatus('🔄 データをリセットしました', false);\n    }\n}\n\n// 15. デフォルト値への復元\nfunction resetToDefaults() {\n    productData = {\n        name: \"プレミアム Tシャツ\",\n        price: 2980,\n        likes: 0,\n        isLiked: false,\n        showDetails: false,\n        inCart: false,\n        detailViews: 0,\n        cartActions: 0,\n        lastUpdated: new Date().toISOString()\n    };\n    actionHistory = [];\n}\n\n// 16. データのエクスポート（学習用）\nfunction handleExport() {\n    const exportData = {\n        productData: productData,\n        history: actionHistory,\n        timestamp: new Date().toISOString()\n    };\n    console.log('=== 保存されたデータの詳細 ===');\n    console.log(JSON.stringify(exportData, null, 2));\n    alert('コンソール（F12）にデータの詳細を出力しました！');\n}\n\n// 17. 履歴のクリア\nfunction handleClearHistory() {\n    if (confirm('操作履歴をクリアしますか？')) {\n        actionHistory = [];\n        localStorage.setItem('productCardHistory', JSON.stringify(actionHistory));\n        updateHistoryDisplay();\n        addToHistory('履歴をクリアしました');\n    }\n}\n\n// 18. イベントリスナーの設定\nlikeBtn.addEventListener('click', handleLike);\ndetailsBtn.addEventListener('click', handleDetailsToggle);\ncartBtn.addEventListener('click', handleCart);\nresetBtn.addEventListener('click', handleReset);\nexportBtn.addEventListener('click', handleExport);\nclearHistoryBtn.addEventListener('click', handleClearHistory);\n\n// 19. 初期化処理\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('=== 19.3 localStorage学習モード開始 ===');\n    console.log('新しい学習テーマ: データの永続化');\n    console.log('重要ポイント: ブラウザを閉じても状態を保持');\n    \n    loadData(); // 保存されたデータを読み込み\n    updateDisplay(); // 画面を更新\n    updateHistoryDisplay(); // 履歴を表示\n    \n    addToHistory('システムを開始しました');\n    \n    console.log('💡 ブラウザを閉じて再度開いても、状態が保持されることを確認してみましょう！');\n});"
    }
  },
  "expectedResult": {
    "dataPersistence": "ブラウザ閉鎖後もデータが保持される",
    "autoRestore": "ページ再読み込み時にデータが自動復元される",
    "historyTracking": "操作履歴がタイムスタンプ付きで記録される",
    "dataValidation": "破損したデータの検出と修復が動作する",
    "continuousExperience": "継続的なユーザー体験が提供される",
    "behavior": "永続化により本格的なWebアプリケーションレベルの機能が完成する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}