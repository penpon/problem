{
  "id": "js-advanced-04",
  "title": "配列とランダムの組み合わせ応用",
  "description": "複数の配列を管理し、統計機能付きのランダム選択システムを構築して実用的なデータ管理技術を習得します",
  "category": "javascript-dom",
  "difficulty": 3,
  "instructions": [
    "複数の配列を同時に管理する方法を学ぶ",
    "ランダム選択機能と統計機能の連携を実装する",
    "選択回数のカウントと表示システムを構築する",
    "オブジェクト配列を操作して複雑なデータ構造を扱う"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ステップ17.3-3 - 配列とランダムの応用</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🎯 配列とランダムの応用</h1>\n        <div class=\"step-info\">\n            <strong>ステップ17.3-3 - 複数配列からのランダム選択と基本統計</strong>\n        </div>\n        \n        <div class=\"celebration\">🎯 📊 ⚡</div>\n        \n        <div class=\"info-box\">\n            <h3>🎯 このステップで学ぶこと</h3>\n            <ul>\n                <li><strong>複数の配列</strong>を管理する方法</li>\n                <li>異なる配列から<strong>ランダム選択</strong>を行う</li>\n                <li>選択回数の<strong>基本的な統計</strong>を取る</li>\n                <li>配列とランダム機能の<strong>実用的な組み合わせ</strong></li>\n            </ul>\n        </div>\n        \n        <div class=\"demo-section\">\n            <h3>🎪 多彩なランダム選択</h3>\n            <p>3種類の配列からランダムに要素を選択してみましょう！</p>\n            \n            <div class=\"content-display\" id=\"content-display\">\n                <h3 style=\"color: #3498db; margin-top: 0;\">🎯 選択結果表示エリア</h3>\n                <p>下のボタンをクリックして、様々な配列からのランダム選択を体験してください。</p>\n            </div>\n            \n            <div class=\"button-grid\">\n                <button class=\"select-btn btn-quote\" id=\"quote-btn\">\n                    💬 名言を選ぶ\n                </button>\n                <button class=\"select-btn btn-color\" id=\"color-btn\">\n                    🎨 色を選ぶ\n                </button>\n                <button class=\"select-btn btn-food\" id=\"food-btn\">\n                    🍕 食べ物を選ぶ\n                </button>\n            </div>\n        </div>\n        \n        <div class=\"stats-section\">\n            <h4>📊 選択回数の統計</h4>\n            <div class=\"stats-grid\">\n                <div class=\"stat-card\">\n                    <div class=\"stat-label\">名言選択</div>\n                    <div class=\"stat-number\" id=\"quote-count\">0</div>\n                </div>\n                <div class=\"stat-card\">\n                    <div class=\"stat-label\">色選択</div>\n                    <div class=\"stat-number\" id=\"color-count\">0</div>\n                </div>\n                <div class=\"stat-card\">\n                    <div class=\"stat-label\">食べ物選択</div>\n                    <div class=\"stat-number\" id=\"food-count\">0</div>\n                </div>\n                <div class=\"stat-card\">\n                    <div class=\"stat-label\">総選択回数</div>\n                    <div class=\"stat-number\" id=\"total-count\">0</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"arrays-display\">\n            <h4>📋 使用している配列データ</h4>\n            <div class=\"array-list\">\n                <div class=\"array-info\">\n                    <h4>💬 名言配列</h4>\n                    <div id=\"quotes-info\">読み込み中...</div>\n                </div>\n                <div class=\"array-info\">\n                    <h4>🎨 色配列</h4>\n                    <div id=\"colors-info\">読み込み中...</div>\n                </div>\n                <div class=\"array-info\">\n                    <h4>🍕 食べ物配列</h4>\n                    <div id=\"foods-info\">読み込み中...</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>💡 複数配列管理の基本</h3>\n            <p>複数の配列を効率的に管理する方法：</p>\n            \n            <div class=\"code-example\">\n// 1. 複数の配列を定義\nlet quotes = [\"努力は必ず報われる\", \"継続は力なり\"];\nlet colors = [\"赤\", \"青\", \"緑\"];\nlet foods = [\"ピザ\", \"ハンバーガー\", \"寿司\"];\n\n// 2. ランダム選択関数を作成\nfunction randomSelect(array) {\n    let index = Math.floor(Math.random() * array.length);\n    return array[index];\n}\n\n// 3. 各配列から選択\nlet randomQuote = randomSelect(quotes);\nlet randomColor = randomSelect(colors);\nlet randomFood = randomSelect(foods);\n            </div>\n        </div>\n        \n        <div class=\"instruction\">\n            <h3>🚀 配列とランダムの応用を体験しよう！</h3>\n            <p>3つのボタンを色々な組み合わせでクリックして、統計がどう変化するか確認してください。</p>\n            <p>複数の配列を使った実用的なランダム選択システムの動作を学びましょう！</p>\n        </div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "/* 基本スタイル */\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    margin: 0;\n    padding: 20px;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    color: #333;\n}\n\n.container {\n    max-width: 1000px;\n    margin: 0 auto;\n    background: white;\n    padding: 30px;\n    border-radius: 15px;\n    box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n}\n\nh1 {\n    text-align: center;\n    color: #2c3e50;\n    margin-bottom: 10px;\n    font-size: 2.5rem;\n}\n\n.step-info {\n    text-align: center;\n    background: #f8f9fa;\n    padding: 15px;\n    border-radius: 10px;\n    margin-bottom: 20px;\n    color: #495057;\n}\n\n.celebration {\n    text-align: center;\n    font-size: 3rem;\n    margin: 20px 0;\n}\n\n.info-box {\n    background: #e3f2fd;\n    padding: 20px;\n    border-radius: 10px;\n    margin-bottom: 25px;\n    border-left: 4px solid #2196f3;\n}\n\n.info-box h3 {\n    margin-top: 0;\n    color: #1976d2;\n}\n\n.info-box ul {\n    margin: 15px 0;\n    padding-left: 20px;\n}\n\n.info-box li {\n    margin-bottom: 8px;\n}\n\n.demo-section {\n    background: #fff;\n    padding: 25px;\n    border-radius: 10px;\n    margin-bottom: 25px;\n    border: 1px solid #e0e0e0;\n}\n\n.content-display {\n    background: #f8f9fa;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 20px 0;\n    border: 2px dashed #dee2e6;\n    min-height: 140px;\n}\n\n.button-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 20px;\n    margin: 20px 0;\n}\n\n.select-btn {\n    padding: 18px 25px;\n    font-size: 1.1rem;\n    border: none;\n    border-radius: 12px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n.btn-quote {\n    background: linear-gradient(135deg, #27ae60, #2ecc71);\n    color: white;\n}\n\n.btn-color {\n    background: linear-gradient(135deg, #8e44ad, #9b59b6);\n    color: white;\n}\n\n.btn-food {\n    background: linear-gradient(135deg, #e67e22, #f39c12);\n    color: white;\n}\n\n.select-btn:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 8px 25px rgba(0,0,0,0.25);\n}\n\n.select-btn:active {\n    transform: translateY(-1px);\n}\n\n.stats-section {\n    background: #f1f8e9;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 25px 0;\n    border: 1px solid #c8e6c9;\n}\n\n.stats-section h4 {\n    margin-top: 0;\n    color: #2e7d32;\n    text-align: center;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    gap: 15px;\n    margin-top: 15px;\n}\n\n.stat-card {\n    background: white;\n    padding: 15px;\n    border-radius: 8px;\n    text-align: center;\n    border: 1px solid #a5d6a7;\n}\n\n.stat-label {\n    font-size: 0.9rem;\n    color: #4a90e2;\n    margin-bottom: 5px;\n}\n\n.stat-number {\n    font-size: 2rem;\n    font-weight: bold;\n    color: #2e7d32;\n}\n\n.arrays-display {\n    background: #fce4ec;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 25px 0;\n}\n\n.arrays-display h4 {\n    margin-top: 0;\n    color: #ad1457;\n    text-align: center;\n}\n\n.array-list {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 15px;\n}\n\n.array-info {\n    background: white;\n    padding: 15px;\n    border-radius: 8px;\n    border: 1px solid #f8bbd9;\n}\n\n.array-info h4 {\n    margin: 0 0 10px 0;\n    color: #c2185b;\n    font-size: 1rem;\n}\n\n.array-info div {\n    font-size: 0.95rem;\n    color: #666;\n}\n\n.code-example {\n    background: #263238;\n    color: #e0f2f1;\n    padding: 20px;\n    border-radius: 8px;\n    font-family: 'Courier New', monospace;\n    white-space: pre-wrap;\n    overflow-x: auto;\n    margin: 15px 0;\n    line-height: 1.5;\n}\n\n.instruction {\n    background: #e8f5e9;\n    padding: 20px;\n    border-radius: 10px;\n    border-left: 4px solid #4caf50;\n}\n\n.instruction h3 {\n    margin-top: 0;\n    color: #2e7d32;\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "console.log(\"🎯 ステップ17.3-3: 配列とランダムの応用を開始します！\");\n\n// 複数の配列を定義\nlet quotes = [\n    \"成功は努力の結果です\",\n    \"継続は力なり\",\n    \"今日の努力が明日の成果に\",\n    \"学び続けることが成長の秘訣\",\n    \"小さな一歩が大きな変化を生む\"\n];\n\nlet colors = [\n    { name: \"夕焼けオレンジ\", code: \"#ff6b6b\" },\n    { name: \"海の青\", code: \"#4ecdc4\" },\n    { name: \"森の緑\", code: \"#56ab2f\" },\n    { name: \"ラベンダー\", code: \"#667eea\" }\n];\n\nlet foods = [\n    \"🍕 ピザ\",\n    \"🍔 ハンバーガー\", \n    \"🍜 ラーメン\",\n    \"🍣 寿司\",\n    \"🍰 ケーキ\",\n    \"🍦 アイスクリーム\"\n];\n\n// 統計用の変数\nlet stats = {\n    quote: 0,\n    color: 0,\n    food: 0,\n    total: 0\n};\n\n// DOM要素を取得\nlet contentDisplay = document.getElementById(\"content-display\");\n\n// 配列情報を表示する関数\nfunction displayArrayInfo() {\n    document.getElementById(\"quotes-info\").textContent = `${quotes.length}個の名言`;\n    document.getElementById(\"colors-info\").textContent = `${colors.length}個の色`;\n    document.getElementById(\"foods-info\").textContent = `${foods.length}個の食べ物`;\n}\n\n// 統計を更新する関数\nfunction updateStats() {\n    document.getElementById(\"quote-count\").textContent = stats.quote;\n    document.getElementById(\"color-count\").textContent = stats.color;\n    document.getElementById(\"food-count\").textContent = stats.food;\n    document.getElementById(\"total-count\").textContent = stats.total;\n}\n\n// ランダム選択を行う共通関数\nfunction performRandomSelect(array, type, displayName) {\n    let randomIndex = Math.floor(Math.random() * array.length);\n    let selectedItem = array[randomIndex];\n    \n    // 統計を更新\n    stats[type]++;\n    stats.total++;\n    updateStats();\n    \n    console.log(`${displayName}からランダム選択:`);\n    console.log(`インデックス: ${randomIndex}, 選択: ${selectedItem}`);\n    \n    return { selectedItem, randomIndex };\n}\n\n// 名言選択ボタン\ndocument.getElementById(\"quote-btn\").addEventListener(\"click\", function() {\n    console.log(\"💬 名言選択ボタンが押されました\");\n    \n    let result = performRandomSelect(quotes, \"quote\", \"名言配列\");\n    \n    contentDisplay.innerHTML = `\n        <h3 style=\"color: #27ae60; margin-top: 0;\">💬 今日の名言</h3>\n        <div style=\"background: linear-gradient(135deg, #27ae60, #2ecc71); color: white; padding: 25px; border-radius: 15px; text-align: center;\">\n            <h2 style=\"margin: 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\">\n                \"${result.selectedItem}\"\n            </h2>\n        </div>\n        <p style=\"color: #7f8c8d; margin-top: 15px;\">\n            📍 ${quotes.length}個の名言の中から ${result.randomIndex + 1} 番目が選ばれました\n        </p>\n    `;\n});\n\n// 色選択ボタン\ndocument.getElementById(\"color-btn\").addEventListener(\"click\", function() {\n    console.log(\"🎨 色選択ボタンが押されました\");\n    \n    let result = performRandomSelect(colors, \"color\", \"色配列\");\n    let colorObj = result.selectedItem;\n    \n    contentDisplay.innerHTML = `\n        <h3 style=\"color: #8e44ad; margin-top: 0;\">🎨 今日の色</h3>\n        <div style=\"background: ${colorObj.code}; color: white; padding: 25px; border-radius: 15px; text-align: center;\">\n            <h2 style=\"margin: 10px 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.5);\">\n                ${colorObj.name}\n            </h2>\n            <p style=\"font-family: monospace; font-size: 1.2rem; margin: 0;\">\n                ${colorObj.code}\n            </p>\n        </div>\n        <p style=\"color: #7f8c8d; margin-top: 15px;\">\n            📍 ${colors.length}個の色の中から ${result.randomIndex + 1} 番目が選ばれました\n        </p>\n    `;\n});\n\n// 食べ物選択ボタン\ndocument.getElementById(\"food-btn\").addEventListener(\"click\", function() {\n    console.log(\"🍕 食べ物選択ボタンが押されました\");\n    \n    let result = performRandomSelect(foods, \"food\", \"食べ物配列\");\n    \n    contentDisplay.innerHTML = `\n        <h3 style=\"color: #e67e22; margin-top: 0;\">🍕 今日のおすすめ</h3>\n        <div style=\"background: linear-gradient(135deg, #e67e22, #f39c12); color: white; padding: 25px; border-radius: 15px; text-align: center;\">\n            <div style=\"font-size: 4rem; margin: 10px 0;\">\n                ${result.selectedItem.charAt(0)}\n            </div>\n            <h2 style=\"margin: 10px 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\">\n                ${result.selectedItem.substring(2)}\n            </h2>\n        </div>\n        <p style=\"color: #7f8c8d; margin-top: 15px;\">\n            📍 ${foods.length}個の食べ物の中から ${result.randomIndex + 1} 番目が選ばれました\n        </p>\n    `;\n});\n\n// 初期化処理\ndisplayArrayInfo();\nupdateStats();\n\nconsole.log(\"✅ 配列とランダムの応用システムが初期化されました！\");\nconsole.log(\"📊 使用可能な配列: quotes, colors, foods\");\nconsole.log(\"💡 各ボタンをクリックして、統計機能付きのランダム選択を体験してください！\");"
    }
  },
  "expectedResult": {
    "multiArrays": "名言、色、食べ物の3つの配列が管理される",
    "statistics": "カテゴリ別と全体の選択回数が統計される",
    "objectHandling": "色オブジェクト（名前と色コード）が正しく処理される",
    "behavior": "3つのカテゴリでランダム選択と統計が動作する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}