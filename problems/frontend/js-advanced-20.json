{
  "id": "js-advanced-20",
  "title": "シンプル統合システム",
  "description": "これまで学んだ基本機能を組み合わせて、シンプルで使いやすい統合システムを作成します",
  "category": "javascript-advanced",
  "difficulty": 3,
  "instructions": [
    "カウンター機能でボタンを押すと数字が増える仕組みを実装する",
    "データ保存機能でリロードしても数字が残る仕組みを構築する",
    "リセット機能で数字を0に戻す機能を実装する",
    "3つの機能を組み合わせて便利なアプリを完成させる"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n    <title>19.5 UI/UX完成 - レスポンシブ＆アクセシビリティ</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <!-- アクセシビリティ: スクリーンリーダー用ライブリージョン -->\n    <div id=\"liveRegion\" aria-live=\"polite\" aria-atomic=\"true\" class=\"sr-only\"></div>\n\n    <!-- 通知システム -->\n    <div class=\"notification\" id=\"notification\" role=\"alert\" aria-live=\"assertive\"></div>\n\n    <main class=\"container\" role=\"main\">\n        <!-- 商品カード -->\n        <section class=\"product-card\" role=\"region\" aria-labelledby=\"product-title\">\n            <!-- 画像システム -->\n            <div class=\"image-container\">\n                <button class=\"product-image image-1\" id=\"productImage\" \n                        aria-label=\"商品画像をクリックして次の画像に切り替え\"\n                        role=\"button\"\n                        tabindex=\"0\">👕</button>\n            </div>\n            \n            <!-- 画像切替コントロール -->\n            <div class=\"image-controls\" role=\"group\" aria-label=\"商品画像選択\">\n                <button class=\"image-btn active\" \n                        data-image=\"1\"\n                        aria-label=\"商品画像1を表示\"\n                        aria-pressed=\"true\"></button>\n                <button class=\"image-btn\" \n                        data-image=\"2\"\n                        aria-label=\"商品画像2を表示\"\n                        aria-pressed=\"false\"></button>\n                <button class=\"image-btn\" \n                        data-image=\"3\"\n                        aria-label=\"商品画像3を表示\"\n                        aria-pressed=\"false\"></button>\n            </div>\n            \n            <header class=\"product-info\">\n                <h2 id=\"product-title\">プレミアム Tシャツ</h2>\n                <div class=\"product-price\" aria-label=\"価格\">¥<span id=\"productPrice\">2,980</span></div>\n            </header>\n            \n            <div class=\"action-buttons\" role=\"group\" aria-label=\"商品操作\">\n                <button class=\"btn btn-like\" id=\"likeBtn\"\n                        aria-label=\"この商品にいいねする\"\n                        aria-pressed=\"false\">\n                    <span>❤️ <span id=\"likeCount\">0</span></span>\n                </button>\n                <button class=\"btn btn-details\" id=\"detailsBtn\"\n                        aria-label=\"商品詳細情報を表示\"\n                        aria-expanded=\"false\"\n                        aria-controls=\"productDetails\">\n                    <span>📝 詳細</span>\n                </button>\n                <button class=\"btn btn-cart\" id=\"cartBtn\"\n                        aria-label=\"商品をカートに追加\"\n                        aria-pressed=\"false\">\n                    <span>🛒 カート</span>\n                </button>\n            </div>\n            \n            <div class=\"product-details\" id=\"productDetails\" \n                 role=\"region\" \n                 aria-labelledby=\"details-title\"\n                 aria-hidden=\"true\">\n                <h3 id=\"details-title\">商品詳細情報</h3>\n                <p><strong>素材:</strong> オーガニックコットン100%使用</p>\n                <p><strong>サイズ:</strong> S/M/L/XL の豊富なサイズ展開</p>\n                <p><strong>カラー:</strong> 4色のバリエーション</p>\n                <p><strong>特徴:</strong> 肌触り抜群で長持ちする高品質素材</p>\n                <p><strong>お手入れ:</strong> 洗濯機使用可、型崩れしにくい設計</p>\n            </div>\n        </section>\n        \n        <!-- 学習パネル -->\n        <aside class=\"learning-panel\" role=\"complementary\" aria-labelledby=\"learning-title\">\n            <h2 id=\"learning-title\" class=\"panel-title\">🎨 UI/UX完成モード</h2>\n            \n            <!-- 統計表示 -->\n            <section class=\"stats-grid\" role=\"group\" aria-labelledby=\"stats-title\">\n                <h3 id=\"stats-title\" class=\"sr-only\">使用統計</h3>\n                <div class=\"stat-item\" tabindex=\"0\" \n                     role=\"button\" \n                     aria-label=\"いいね数\">\n                    <div class=\"stat-number\" id=\"totalLikes\">0</div>\n                    <div class=\"stat-label\">いいね数</div>\n                </div>\n                <div class=\"stat-item\" tabindex=\"0\" \n                     role=\"button\" \n                     aria-label=\"詳細表示回数\">\n                    <div class=\"stat-number\" id=\"totalViews\">0</div>\n                    <div class=\"stat-label\">詳細表示</div>\n                </div>\n                <div class=\"stat-item\" tabindex=\"0\" \n                     role=\"button\" \n                     aria-label=\"カート操作回数\">\n                    <div class=\"stat-number\" id=\"totalCart\">0</div>\n                    <div class=\"stat-label\">カート操作</div>\n                </div>\n                <div class=\"stat-item\" tabindex=\"0\" \n                     role=\"button\" \n                     aria-label=\"画像切替回数\">\n                    <div class=\"stat-number\" id=\"totalImageChanges\">0</div>\n                    <div class=\"stat-label\">画像切替</div>\n                </div>\n            </section>\n            \n            <!-- レスポンシブ状態表示 -->\n            <div class=\"display-section\">\n                <div class=\"section-title\">📱 レスポンシブ状態</div>\n                <div class=\"content-area\" id=\"responsiveDisplay\">\n                    初期化中...\n                </div>\n            </div>\n            \n            <!-- オブジェクト表示 -->\n            <div class=\"display-section\">\n                <div class=\"section-title\">💾 保存データ</div>\n                <div class=\"content-area\" id=\"objectDisplay\">\n                    読み込み中...\n                </div>\n            </div>\n            \n            <!-- コントロールボタン -->\n            <div class=\"control-buttons\">\n                <button class=\"btn-control btn-reset\" id=\"resetBtn\"\n                        aria-label=\"全てのデータをリセット\">🔄 リセット</button>\n                <button class=\"btn-control btn-accessibility\" id=\"accessibilityBtn\"\n                        aria-label=\"アクセシビリティテスト実行\">♿ A11yテスト</button>\n            </div>\n        </aside>\n    </main>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        /* アクセシビリティ: 基本設定 */\n        :focus {\n            outline: 3px solid #3498db;\n            outline-offset: 2px;\n        }\n\n        /* ハイコントラストモード対応 */\n        @media (prefers-contrast: high) {\n            * {\n                border-color: #000 !important;\n            }\n        }\n\n        /* アニメーション無効化対応 */\n        @media (prefers-reduced-motion: reduce) {\n            *, *::before, *::after {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n        }\n\n        body {\n            font-family: 'Hiragino Sans', 'Yu Gothic UI', Arial, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 15px;\n            font-size: 16px; /* アクセシビリティ: 読みやすいフォントサイズ */\n            line-height: 1.5; /* アクセシビリティ: 読みやすい行間 */\n        }\n\n        .container {\n            max-width: 1200px;\n            width: 100%;\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 25px;\n            animation: fadeInUp 0.8s ease;\n        }\n\n        @keyframes fadeInUp {\n            from {\n                opacity: 0;\n                transform: translateY(30px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n\n        /* 商品カード（レスポンシブ対応強化） */\n        .product-card {\n            background: white;\n            border-radius: 20px;\n            padding: 25px;\n            text-align: center;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n            position: relative;\n        }\n\n        .product-card:hover,\n        .product-card:focus-within {\n            transform: translateY(-5px);\n            box-shadow: 0 25px 50px rgba(0,0,0,0.15);\n        }\n\n        /* 画像システム（タッチ対応強化） */\n        .image-container {\n            position: relative;\n            width: 120px;\n            height: 120px;\n            margin: 0 auto 20px auto;\n            border-radius: 15px;\n            overflow: hidden;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n        }\n\n        .product-image {\n            width: 100%;\n            height: 100%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 40px;\n            color: white;\n            transition: all 0.5s ease;\n            cursor: pointer;\n            border: none;\n            background: none;\n        }\n\n        .product-image:hover,\n        .product-image:focus {\n            transform: scale(1.1);\n        }\n\n        .image-1 { background: linear-gradient(45deg, #ff6b6b, #4ecdc4); }\n        .image-2 { background: linear-gradient(45deg, #a8e6cf, #ffd3a5); }\n        .image-3 { background: linear-gradient(45deg, #84fab0, #8fd3f4); }\n\n        /* 画像切替ボタン（タッチサイズ対応） */\n        .image-controls {\n            display: flex;\n            justify-content: center;\n            gap: 12px;\n            margin-bottom: 15px;\n        }\n\n        .image-btn {\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            background: #ddd;\n            border: none;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            min-width: 44px; /* タッチ操作最小サイズ */\n            min-height: 44px;\n            position: relative;\n        }\n\n        .image-btn::before {\n            content: '';\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            background: inherit;\n            transform: translate(-50%, -50%);\n        }\n\n        .image-btn.active::before {\n            background: #3498db;\n            transform: translate(-50%, -50%) scale(1.5);\n        }\n\n        .image-btn:hover::before,\n        .image-btn:focus::before {\n            background: #3498db;\n            opacity: 0.7;\n        }\n\n        /* 商品情報 */\n        .product-info h2 {\n            color: #333;\n            font-size: 18px;\n            margin-bottom: 8px;\n            transition: color 0.3s ease;\n        }\n\n        .product-price {\n            font-size: 20px;\n            color: #e74c3c;\n            font-weight: bold;\n            margin-bottom: 20px;\n            transition: transform 0.3s ease;\n        }\n\n        .product-price:hover {\n            transform: scale(1.05);\n        }\n\n        /* アクションボタン（アクセシビリティ強化） */\n        .action-buttons {\n            display: flex;\n            gap: 10px;\n            margin-bottom: 20px;\n            justify-content: center;\n            flex-wrap: wrap;\n        }\n\n        .btn {\n            padding: 12px 20px;\n            border: none;\n            border-radius: 25px;\n            cursor: pointer;\n            font-size: 14px;\n            font-weight: 600;\n            transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n            flex: 1;\n            max-width: 120px;\n            min-width: 44px; /* タッチ操作最小サイズ */\n            min-height: 44px;\n            position: relative;\n            overflow: hidden;\n        }\n\n        .btn::before {\n            content: '';\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 0;\n            height: 0;\n            background: rgba(255,255,255,0.3);\n            border-radius: 50%;\n            transition: width 0.6s, height 0.6s;\n            transform: translate(-50%, -50%);\n            z-index: 0;\n        }\n\n        .btn:active::before {\n            width: 300px;\n            height: 300px;\n        }\n\n        .btn > span {\n            position: relative;\n            z-index: 1;\n        }\n\n        .btn-like {\n            background: #f8f9fa;\n            color: #666;\n            border: 2px solid #ddd;\n        }\n\n        .btn-like.liked {\n            background: #e74c3c;\n            color: white;\n            border-color: #e74c3c;\n            animation: pulse 0.6s ease;\n        }\n\n        @keyframes pulse {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.15); }\n            100% { transform: scale(1); }\n        }\n\n        .btn-details {\n            background: #3498db;\n            color: white;\n        }\n\n        .btn-cart {\n            background: #27ae60;\n            color: white;\n        }\n\n        .btn-cart.in-cart {\n            background: #f39c12;\n            animation: bounce 0.5s ease;\n        }\n\n        @keyframes bounce {\n            0%, 100% { transform: scale(1); }\n            50% { transform: scale(1.2); }\n        }\n\n        .btn:hover,\n        .btn:focus {\n            transform: translateY(-3px) scale(1.05);\n            box-shadow: 0 10px 25px rgba(0,0,0,0.2);\n        }\n\n        /* 商品詳細 */\n        .product-details {\n            background: #f8f9fa;\n            border-radius: 15px;\n            padding: 15px;\n            margin-top: 15px;\n            opacity: 0;\n            max-height: 0;\n            overflow: hidden;\n            transition: all 0.5s ease;\n            text-align: left;\n        }\n\n        .product-details.show {\n            opacity: 1;\n            max-height: 250px;\n            animation: slideDown 0.5s ease;\n        }\n\n        @keyframes slideDown {\n            from {\n                opacity: 0;\n                transform: translateY(-20px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n\n        .product-details h3 {\n            color: #333;\n            margin-bottom: 10px;\n            font-size: 16px;\n        }\n\n        .product-details p {\n            color: #666;\n            font-size: 13px;\n            line-height: 1.6;\n            margin-bottom: 8px;\n        }\n\n        /* 通知システム（レスポンシブ対応） */\n        .notification {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: #2ecc71;\n            color: white;\n            padding: 15px 20px;\n            border-radius: 10px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n            opacity: 0;\n            transform: translateX(100%);\n            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n            font-size: 14px;\n            font-weight: 600;\n            z-index: 1000;\n            max-width: 300px;\n        }\n\n        .notification.show {\n            opacity: 1;\n            transform: translateX(0);\n        }\n\n        .notification.error {\n            background: #e74c3c;\n        }\n\n        .notification.info {\n            background: #3498db;\n        }\n\n        /* アクセシビリティ: スクリーンリーダー用の非表示テキスト */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0, 0, 0, 0);\n            white-space: nowrap;\n            border: 0;\n        }\n\n        /* 学習パネル */\n        .learning-panel {\n            background: white;\n            border-radius: 20px;\n            padding: 20px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            animation: fadeInUp 0.8s ease 0.2s both;\n        }\n\n        .panel-title {\n            text-align: center;\n            font-size: 16px;\n            font-weight: 600;\n            color: #333;\n            margin-bottom: 15px;\n        }\n\n        /* 統計表示 */\n        .stats-grid {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 10px;\n            margin-bottom: 15px;\n        }\n\n        .stat-item {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 12px;\n            border-radius: 12px;\n            text-align: center;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            min-height: 44px; /* タッチ操作対応 */\n        }\n\n        .stat-item:hover,\n        .stat-item:focus {\n            transform: translateY(-3px);\n            box-shadow: 0 10px 25px rgba(0,0,0,0.2);\n        }\n\n        .stat-number {\n            font-size: 16px;\n            font-weight: bold;\n            margin-bottom: 3px;\n            transition: transform 0.3s ease;\n        }\n\n        .stat-item:hover .stat-number {\n            transform: scale(1.2);\n        }\n\n        .stat-label {\n            font-size: 10px;\n            opacity: 0.9;\n        }\n\n        /* 各種表示エリア */\n        .display-section {\n            background: #f8f9fa;\n            border-radius: 10px;\n            padding: 12px;\n            margin-bottom: 12px;\n            transition: all 0.3s ease;\n        }\n\n        .display-section:hover {\n            background: #e9ecef;\n        }\n\n        .section-title {\n            font-size: 12px;\n            color: #666;\n            margin-bottom: 8px;\n            font-weight: 600;\n        }\n\n        .content-area {\n            font-size: 11px;\n            line-height: 1.4;\n            max-height: 100px;\n            overflow-y: auto;\n        }\n\n        /* コントロールボタン */\n        .control-buttons {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 10px;\n        }\n\n        .btn-control {\n            padding: 12px;\n            border: none;\n            border-radius: 10px;\n            font-size: 12px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n            position: relative;\n            overflow: hidden;\n            min-height: 44px; /* タッチ操作対応 */\n        }\n\n        .btn-control:hover,\n        .btn-control:focus {\n            transform: translateY(-2px);\n            box-shadow: 0 8px 20px rgba(0,0,0,0.2);\n        }\n\n        .btn-control:active {\n            transform: scale(0.95);\n        }\n\n        .btn-reset {\n            background: #e74c3c;\n            color: white;\n        }\n\n        .btn-accessibility {\n            background: #9b59b6;\n            color: white;\n        }\n\n        /* レスポンシブデザイン: タブレット */\n        @media (max-width: 1024px) {\n            .container {\n                gap: 20px;\n                padding: 0 10px;\n            }\n            \n            .product-card,\n            .learning-panel {\n                padding: 20px;\n            }\n            \n            .stats-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 8px;\n            }\n        }\n\n        /* レスポンシブデザイン: スマートフォン */\n        @media (max-width: 768px) {\n            body {\n                padding: 10px;\n            }\n            \n            .container {\n                grid-template-columns: 1fr;\n                gap: 15px;\n                max-width: 100%;\n            }\n            \n            .product-card,\n            .learning-panel {\n                padding: 15px;\n            }\n            \n            .image-container {\n                width: 100px;\n                height: 100px;\n            }\n            \n            .product-image {\n                font-size: 35px;\n            }\n            \n            .action-buttons {\n                flex-direction: column;\n                align-items: center;\n                gap: 8px;\n            }\n            \n            .btn {\n                max-width: 200px;\n                width: 100%;\n            }\n            \n            .stats-grid {\n                grid-template-columns: 1fr;\n                gap: 8px;\n            }\n            \n            .notification {\n                top: 10px;\n                right: 10px;\n                left: 10px;\n                transform: translateY(-100%);\n                max-width: none;\n            }\n            \n            .notification.show {\n                transform: translateY(0);\n            }\n            \n            .control-buttons {\n                grid-template-columns: 1fr;\n                gap: 8px;\n            }\n            \n            .panel-title {\n                font-size: 14px;\n            }\n            \n            .section-title {\n                font-size: 11px;\n            }\n            \n            .content-area {\n                font-size: 10px;\n                max-height: 80px;\n            }\n        }\n\n        /* レスポンシブデザイン: 小型スマートフォン */\n        @media (max-width: 480px) {\n            .image-container {\n                width: 80px;\n                height: 80px;\n            }\n            \n            .product-image {\n                font-size: 30px;\n            }\n            \n            .product-info h2 {\n                font-size: 16px;\n            }\n            \n            .product-price {\n                font-size: 18px;\n            }\n            \n            .btn {\n                font-size: 12px;\n                padding: 10px 15px;\n            }\n            \n            .stat-number {\n                font-size: 14px;\n            }\n            \n            .stat-label {\n                font-size: 9px;\n            }\n        }\n\n        /* ダークモード対応 */\n        @media (prefers-color-scheme: dark) {\n            body {\n                background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\n            }\n            \n            .product-card,\n            .learning-panel {\n                background: #34495e;\n                color: #ecf0f1;\n            }\n            \n            .product-info h2 {\n                color: #ecf0f1;\n            }\n            \n            .product-details {\n                background: #2c3e50;\n            }\n            \n            .product-details h3,\n            .section-title {\n                color: #ecf0f1;\n            }\n            \n            .product-details p,\n            .content-area {\n                color: #bdc3c7;\n            }\n            \n            .display-section {\n                background: #2c3e50;\n            }\n            \n            .display-section:hover {\n                background: #34495e;\n            }\n        }"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "        // === 19.5 メイン学習テーマ: レスポンシブデザインとアクセシビリティ ===\n\n        // 1. 商品データオブジェクト（19.4から拡張）\n        let productData = {\n            name: \"プレミアム Tシャツ\",\n            price: 2980,\n            likes: 0,\n            isLiked: false,\n            showDetails: false,\n            inCart: false,\n            detailViews: 0,\n            cartActions: 0,\n            imageChanges: 0,\n            currentImage: 1,\n            deviceType: 'desktop',      // レスポンシブ状態（新規追加）\n            accessibilityMode: false,   // アクセシビリティモード（新規追加）\n            lastUpdated: new Date().toISOString()\n        };\n\n        let actionHistory = [];\n\n        // 2. DOM要素の取得\n        const productImage = document.getElementById('productImage');\n        const imageButtons = document.querySelectorAll('.image-btn');\n        const likeBtn = document.getElementById('likeBtn');\n        const detailsBtn = document.getElementById('detailsBtn');\n        const cartBtn = document.getElementById('cartBtn');\n        const productDetails = document.getElementById('productDetails');\n        const notification = document.getElementById('notification');\n        const liveRegion = document.getElementById('liveRegion');\n        const likeCount = document.getElementById('likeCount');\n        const totalLikes = document.getElementById('totalLikes');\n        const totalViews = document.getElementById('totalViews');\n        const totalCart = document.getElementById('totalCart');\n        const totalImageChanges = document.getElementById('totalImageChanges');\n        const responsiveDisplay = document.getElementById('responsiveDisplay');\n        const objectDisplay = document.getElementById('objectDisplay');\n        const resetBtn = document.getElementById('resetBtn');\n        const accessibilityBtn = document.getElementById('accessibilityBtn');\n\n        // 3. アクセシビリティ: スクリーンリーダー通知（新機能）\n        function announceToScreenReader(message) {\n            liveRegion.textContent = message;\n            setTimeout(() => {\n                liveRegion.textContent = '';\n            }, 1000);\n        }\n\n        // 4. 通知システム（アクセシビリティ強化）\n        function showNotification(message, type = 'success') {\n            notification.textContent = message;\n            notification.className = `notification ${type} show`;\n            notification.setAttribute('aria-label', message);\n            \n            // スクリーンリーダーにも通知\n            announceToScreenReader(message);\n            \n            setTimeout(() => {\n                notification.classList.remove('show');\n            }, 3000);\n        }\n\n        // 5. レスポンシブ状態検出（新機能 - メイン学習ポイント）\n        function detectDeviceType() {\n            const width = window.innerWidth;\n            let deviceType = 'desktop';\n            \n            if (width <= 480) {\n                deviceType = 'mobile-small';\n            } else if (width <= 768) {\n                deviceType = 'mobile';\n            } else if (width <= 1024) {\n                deviceType = 'tablet';\n            }\n            \n            productData.deviceType = deviceType;\n            updateResponsiveDisplay();\n            \n            console.log(`レスポンシブ: ${deviceType} (${width}px)`);\n        }\n\n        // 6. レスポンシブ表示の更新\n        function updateResponsiveDisplay() {\n            const width = window.innerWidth;\n            const height = window.innerHeight;\n            responsiveDisplay.innerHTML = `\n                デバイス: ${productData.deviceType}<br>\n                画面: ${width} × ${height}px<br>\n                向き: ${width > height ? '横' : '縦'}<br>\n                更新: ${new Date().toLocaleTimeString()}\n            `;\n        }\n\n        // 7. キーボード操作サポート（新機能）\n        function handleKeyboardNavigation(event) {\n            const key = event.key;\n            const element = event.target;\n            \n            // Enterキーまたはスペースキーでボタン操作\n            if (key === 'Enter' || key === ' ') {\n                event.preventDefault();\n                \n                if (element.classList.contains('image-btn')) {\n                    const imageNum = element.getAttribute('data-image');\n                    changeImage(parseInt(imageNum));\n                } else if (element.id === 'productImage') {\n                    const nextImage = (productData.currentImage % 3) + 1;\n                    changeImage(nextImage);\n                }\n            }\n            \n            // 矢印キーで画像切替\n            if (element.id === 'productImage') {\n                if (key === 'ArrowRight') {\n                    event.preventDefault();\n                    const nextImage = (productData.currentImage % 3) + 1;\n                    changeImage(nextImage);\n                } else if (key === 'ArrowLeft') {\n                    event.preventDefault();\n                    const prevImage = productData.currentImage === 1 ? 3 : productData.currentImage - 1;\n                    changeImage(prevImage);\n                }\n            }\n        }\n\n        // 8. 画像切替システム（アクセシビリティ強化）\n        function changeImage(imageNumber) {\n            const images = ['👕', '👔', '🧥'];\n            const imageClasses = ['image-1', 'image-2', 'image-3'];\n            const imageNames = ['Tシャツ', 'ワイシャツ', 'ジャケット'];\n            \n            productImage.className = 'product-image';\n            \n            setTimeout(() => {\n                productImage.className = `product-image ${imageClasses[imageNumber - 1]}`;\n                productImage.textContent = images[imageNumber - 1];\n                productImage.setAttribute('aria-label', `商品画像: ${imageNames[imageNumber - 1]}`);\n                \n                productData.currentImage = imageNumber;\n                productData.imageChanges += 1;\n                \n                // ボタンのaria-pressed状態を更新\n                imageButtons.forEach((btn, index) => {\n                    const isActive = index + 1 === imageNumber;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-pressed', isActive.toString());\n                });\n                \n                showNotification(`商品画像を${imageNames[imageNumber - 1]}に変更`, 'info');\n                updateDisplay();\n                saveData();\n            }, 100);\n        }\n\n        // 9. データ保存・読み込み\n        function saveData() {\n            try {\n                productData.lastUpdated = new Date().toISOString();\n                localStorage.setItem('productCardData_v5', JSON.stringify(productData));\n                localStorage.setItem('productCardHistory_v5', JSON.stringify(actionHistory));\n            } catch (error) {\n                showNotification('データ保存に失敗', 'error');\n            }\n        }\n\n        function loadData() {\n            try {\n                const savedData = localStorage.getItem('productCardData_v5');\n                if (savedData) {\n                    const parsed = JSON.parse(savedData);\n                    // 新しいプロパティのデフォルト値を設定\n                    productData = Object.assign({\n                        deviceType: 'desktop',\n                        accessibilityMode: false\n                    }, parsed);\n                    showNotification('保存データを復元しました', 'success');\n                }\n\n                const savedHistory = localStorage.getItem('productCardHistory_v5');\n                if (savedHistory) {\n                    actionHistory = JSON.parse(savedHistory);\n                }\n            } catch (error) {\n                showNotification('データ読み込みエラー', 'error');\n                resetToDefaults();\n            }\n        }\n\n        // 10. 表示更新（ARIA属性対応強化）\n        function updateDisplay() {\n            likeCount.textContent = productData.likes;\n            \n            // いいねボタンのARIA状態更新\n            if (productData.isLiked) {\n                likeBtn.classList.add('liked');\n                likeBtn.setAttribute('aria-pressed', 'true');\n                likeBtn.setAttribute('aria-label', 'いいねを取り消す');\n            } else {\n                likeBtn.classList.remove('liked');\n                likeBtn.setAttribute('aria-pressed', 'false');\n                likeBtn.setAttribute('aria-label', 'この商品にいいねする');\n            }\n            \n            // 詳細表示のARIA状態更新\n            if (productData.showDetails) {\n                productDetails.classList.add('show');\n                productDetails.setAttribute('aria-hidden', 'false');\n                detailsBtn.innerHTML = '<span>📝 閉じる</span>';\n                detailsBtn.setAttribute('aria-expanded', 'true');\n                detailsBtn.setAttribute('aria-label', '商品詳細情報を閉じる');\n            } else {\n                productDetails.classList.remove('show');\n                productDetails.setAttribute('aria-hidden', 'true');\n                detailsBtn.innerHTML = '<span>📝 詳細</span>';\n                detailsBtn.setAttribute('aria-expanded', 'false');\n                detailsBtn.setAttribute('aria-label', '商品詳細情報を表示');\n            }\n            \n            // カートボタンのARIA状態更新\n            if (productData.inCart) {\n                cartBtn.classList.add('in-cart');\n                cartBtn.setAttribute('aria-pressed', 'true');\n                cartBtn.setAttribute('aria-label', '商品をカートから削除');\n                cartBtn.innerHTML = '<span>🛒 削除</span>';\n            } else {\n                cartBtn.classList.remove('in-cart');\n                cartBtn.setAttribute('aria-pressed', 'false');\n                cartBtn.setAttribute('aria-label', '商品をカートに追加');\n                cartBtn.innerHTML = '<span>🛒 カート</span>';\n            }\n\n            // 統計更新\n            totalLikes.textContent = productData.likes;\n            totalViews.textContent = productData.detailViews;\n            totalCart.textContent = productData.cartActions;\n            totalImageChanges.textContent = productData.imageChanges;\n\n            // オブジェクト表示更新\n            objectDisplay.innerHTML = `\n                likes: ${productData.likes}<br>\n                currentImage: ${productData.currentImage}<br>\n                deviceType: ${productData.deviceType}<br>\n                inCart: ${productData.inCart}\n            `;\n\n            // 画像状態の復元\n            if (productData.currentImage !== 1) {\n                changeImage(productData.currentImage);\n            }\n        }\n\n        // 11. いいね機能（アクセシビリティ強化）\n        function handleLike() {\n            productData.isLiked = !productData.isLiked;\n            productData.likes += productData.isLiked ? 1 : -1;\n            \n            const message = productData.isLiked ? '❤️ いいねしました！' : '💔 いいねを取り消しました';\n            addToHistory(productData.isLiked ? 'いいねしました' : 'いいねを取り消し');\n            showNotification(message);\n            \n            updateDisplay();\n            saveData();\n        }\n\n        // 12. 詳細表示機能（アクセシビリティ強化）\n        function handleDetailsToggle() {\n            productData.showDetails = !productData.showDetails;\n            \n            if (productData.showDetails) {\n                productData.detailViews += 1;\n                addToHistory('詳細情報を表示');\n                showNotification('📝 詳細情報を表示しました');\n                \n                // フォーカスを詳細エリアに移動（アクセシビリティ）\n                setTimeout(() => {\n                    productDetails.focus();\n                }, 100);\n            } else {\n                addToHistory('詳細情報を閉じる');\n                showNotification('📝 詳細情報を閉じました');\n            }\n            \n            updateDisplay();\n            saveData();\n        }\n\n        // 13. カート機能（アクセシビリティ強化）\n        function handleCart() {\n            productData.inCart = !productData.inCart;\n            productData.cartActions += 1;\n            \n            const message = productData.inCart ? '🛒 カートに追加しました！' : '🗑️ カートから削除しました';\n            addToHistory(productData.inCart ? 'カートに追加' : 'カートから削除');\n            showNotification(message);\n            \n            updateDisplay();\n            saveData();\n        }\n\n        // 14. アクセシビリティテスト機能（新機能）\n        function runAccessibilityTest() {\n            productData.accessibilityMode = !productData.accessibilityMode;\n            \n            if (productData.accessibilityMode) {\n                // アクセシビリティ強化モード\n                document.body.style.fontSize = '18px';\n                document.body.style.lineHeight = '1.6';\n                showNotification('♿ アクセシビリティ強化モードON', 'info');\n                announceToScreenReader('アクセシビリティ強化モードを有効にしました');\n            } else {\n                // 通常モード\n                document.body.style.fontSize = '16px';\n                document.body.style.lineHeight = '1.5';\n                showNotification('♿ 通常モードに戻しました', 'info');\n                announceToScreenReader('通常モードに戻しました');\n            }\n            \n            saveData();\n        }\n\n        // 15. 履歴記録\n        function addToHistory(action) {\n            const timestamp = new Date().toLocaleTimeString();\n            actionHistory.unshift(`${timestamp}: ${action}`);\n            if (actionHistory.length > 5) {\n                actionHistory = actionHistory.slice(0, 5);\n            }\n        }\n\n        // 16. リセット機能\n        function handleReset() {\n            if (confirm('全てのデータをリセットしますか？')) {\n                localStorage.removeItem('productCardData_v5');\n                localStorage.removeItem('productCardHistory_v5');\n                resetToDefaults();\n                updateDisplay();\n                showNotification('🔄 データをリセットしました', 'info');\n                announceToScreenReader('データをリセットしました');\n            }\n        }\n\n        function resetToDefaults() {\n            productData = {\n                name: \"プレミアム Tシャツ\",\n                price: 2980,\n                likes: 0,\n                isLiked: false,\n                showDetails: false,\n                inCart: false,\n                detailViews: 0,\n                cartActions: 0,\n                imageChanges: 0,\n                currentImage: 1,\n                deviceType: 'desktop',\n                accessibilityMode: false,\n                lastUpdated: new Date().toISOString()\n            };\n            actionHistory = [];\n        }\n\n        // 17. イベントリスナーの設定\n        likeBtn.addEventListener('click', handleLike);\n        detailsBtn.addEventListener('click', handleDetailsToggle);\n        cartBtn.addEventListener('click', handleCart);\n        resetBtn.addEventListener('click', handleReset);\n        accessibilityBtn.addEventListener('click', runAccessibilityTest);\n\n        // 画像切替ボタンのイベント設定\n        imageButtons.forEach((btn, index) => {\n            btn.addEventListener('click', () => changeImage(index + 1));\n            btn.addEventListener('keydown', handleKeyboardNavigation);\n        });\n\n        // 商品画像のキーボード操作\n        productImage.addEventListener('keydown', handleKeyboardNavigation);\n        productImage.addEventListener('click', () => {\n            const nextImage = (productData.currentImage % 3) + 1;\n            changeImage(nextImage);\n        });\n\n        // レスポンシブ対応: リサイズ検知\n        window.addEventListener('resize', detectDeviceType);\n        window.addEventListener('orientationchange', () => {\n            setTimeout(detectDeviceType, 100);\n        });\n\n        // 18. 初期化処理\n        document.addEventListener('DOMContentLoaded', function() {\n            console.log('=== 19.5 UI/UX完成モード開始 ===');\n            console.log('新しい学習テーマ: レスポンシブデザイン & アクセシビリティ');\n            console.log('重要ポイント: 全デバイス・全ユーザー対応');\n            \n            loadData();\n            detectDeviceType();\n            updateDisplay();\n            \n            addToHistory('システム開始');\n            showNotification('🎨 UI/UX完成モードへようこそ！', 'success');\n            \n            console.log('📱 画面サイズを変更してレスポンシブ動作を確認してください');\n            console.log('⌨️ キーボードでの操作も可能です（Tab, Enter, Space, 矢印キー）');\n        });"
    }
  },
  "expectedResult": {
    "counterFunction": "カウンター機能が正しく動作する",
    "dataStorage": "localStorageでデータが永続化される",
    "resetFunction": "リセット機能で初期状態に戻る",
    "integration": "3つの機能がうまく組み合わさって動作する",
    "simplicity": "シンプルで使いやすいシステムが完成する",
    "behavior": "基本機能の組み合わせによる便利なアプリが完成する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}