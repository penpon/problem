{
  "id": "practice41",
  "title": "カード機能拡張 - DOM操作とイベント処理入門",
  "description": "オブジェクト管理を基礎として、DOM操作とイベント処理を習得し、よりインタラクティブな商品カードを実装します",
  "category": "practical-projects",
  "difficulty": 3,
  "instructions": [
    "DOM操作とイベント処理の基本概念を理解する",
    "ボタンクリックで画面要素の表示・非表示を制御する",
    "基本カート機能で商品追加・削除操作を実装する",
    "複数の機能を連携させる技術を習得する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>19.2 カード機能拡張 - DOM操作学習</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <!-- 商品カード -->\n        <div class=\"product-card\">\n            <div class=\"product-image\">👕</div>\n            \n            <div class=\"product-info\">\n                <h2 id=\"productName\">プレミアム Tシャツ</h2>\n                <div class=\"product-price\">¥<span id=\"productPrice\">2,980</span></div>\n            </div>\n            \n            <!-- アクションボタン（拡張版） -->\n            <div class=\"action-buttons\">\n                <button class=\"btn btn-like\" id=\"likeBtn\">\n                    ❤️ <span id=\"likeCount\">0</span>\n                </button>\n                <button class=\"btn btn-details\" id=\"detailsBtn\">\n                    📝 詳細\n                </button>\n                <button class=\"btn btn-cart\" id=\"cartBtn\">\n                    🛒 カート\n                </button>\n            </div>\n            \n            <!-- 商品詳細（DOM操作の主な対象） -->\n            <div class=\"product-details\" id=\"productDetails\">\n                <h3>商品詳細</h3>\n                <p><strong>素材:</strong> 100%綿（オーガニック）</p>\n                <p><strong>サイズ:</strong> S, M, L, XL</p>\n                <p><strong>カラー:</strong> 4色展開</p>\n                <p><strong>特徴:</strong> 肌触りの良い上質素材</p>\n            </div>\n        </div>\n        \n        <!-- 学習パネル（拡張版） -->\n        <div class=\"learning-panel\">\n            <h2 class=\"panel-title\">📚 DOM操作学習モード</h2>\n            \n            <!-- 拡張統計表示 -->\n            <div class=\"stats-grid\">\n                <div class=\"stat-item\">\n                    <div class=\"stat-number\" id=\"totalLikes\">0</div>\n                    <div class=\"stat-label\">いいね数</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div class=\"stat-number\" id=\"totalDetailViews\">0</div>\n                    <div class=\"stat-label\">詳細表示回数</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div class=\"stat-number\" id=\"totalCartActions\">0</div>\n                    <div class=\"stat-label\">カート操作回数</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div class=\"stat-number\" id=\"totalDomChanges\">0</div>\n                    <div class=\"stat-label\">DOM変更回数</div>\n                </div>\n            </div>\n            \n            <!-- DOM変化表示 -->\n            <div class=\"dom-display\">\n                <div class=\"dom-title\">🔍 最新のDOM操作</div>\n                <div class=\"dom-content\" id=\"domDisplay\">\n                    初期化完了\n                </div>\n            </div>\n            \n            <!-- オブジェクト表示 -->\n            <div class=\"object-display\">\n                <div class=\"object-title\">📊 productData オブジェクト</div>\n                <div class=\"object-content\" id=\"objectDisplay\">\n                    読み込み中...\n                </div>\n            </div>\n            \n            <!-- リセットボタン -->\n            <button class=\"btn-reset\" id=\"resetBtn\">🔄 全リセット</button>\n        </div>\n    </div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Hiragino Sans', 'Yu Gothic UI', sans-serif;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 20px;\n}\n\n.container {\n    max-width: 1000px;\n    width: 100%;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 30px;\n}\n\n/* 商品カード */\n.product-card {\n    background: white;\n    border-radius: 20px;\n    padding: 30px;\n    text-align: center;\n    box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n}\n\n.product-image {\n    width: 120px;\n    height: 120px;\n    background: linear-gradient(45deg, #ff6b6b, #4ecdc4);\n    border-radius: 15px;\n    margin: 0 auto 20px auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 40px;\n    color: white;\n}\n\n.product-info h2 {\n    color: #333;\n    font-size: 20px;\n    margin-bottom: 8px;\n}\n\n.product-price {\n    font-size: 22px;\n    color: #e74c3c;\n    font-weight: bold;\n    margin-bottom: 20px;\n}\n\n/* アクションボタンエリア */\n.action-buttons {\n    display: flex;\n    gap: 10px;\n    margin-bottom: 20px;\n    justify-content: center;\n}\n\n.btn {\n    padding: 10px 20px;\n    border: none;\n    border-radius: 20px;\n    cursor: pointer;\n    font-size: 14px;\n    font-weight: 600;\n    transition: all 0.3s ease;\n    flex: 1;\n    max-width: 120px;\n}\n\n.btn-like {\n    background: #f8f9fa;\n    color: #666;\n    border: 2px solid #ddd;\n}\n\n.btn-like.liked {\n    background: #e74c3c;\n    color: white;\n    border-color: #e74c3c;\n}\n\n.btn-details {\n    background: #3498db;\n    color: white;\n    border: 2px solid #3498db;\n}\n\n.btn-cart {\n    background: #27ae60;\n    color: white;\n    border: 2px solid #27ae60;\n}\n\n.btn-cart.in-cart {\n    background: #f39c12;\n    border-color: #f39c12;\n}\n\n.btn:hover {\n    transform: scale(1.05);\n}\n\n/* 商品詳細エリア（DOM操作のメイン対象） */\n.product-details {\n    background: #f8f9fa;\n    border-radius: 15px;\n    padding: 15px;\n    margin-top: 15px;\n    display: none;\n    opacity: 0;\n    transition: all 0.3s ease;\n    text-align: left;\n}\n\n.product-details.show {\n    display: block;\n    opacity: 1;\n    animation: slideIn 0.3s ease;\n}\n\n@keyframes slideIn {\n    from { transform: translateY(-10px); opacity: 0; }\n    to { transform: translateY(0); opacity: 1; }\n}\n\n.product-details h3 {\n    color: #333;\n    margin-bottom: 10px;\n    font-size: 16px;\n}\n\n.product-details p {\n    color: #666;\n    font-size: 13px;\n    line-height: 1.5;\n    margin-bottom: 5px;\n}\n\n/* 学習パネル */\n.learning-panel {\n    background: white;\n    border-radius: 20px;\n    padding: 25px;\n    box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n}\n\n.panel-title {\n    text-align: center;\n    font-size: 18px;\n    font-weight: 600;\n    color: #333;\n    margin-bottom: 20px;\n}\n\n/* 統計表示（拡張版） */\n.stats-grid {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 15px;\n    margin-bottom: 20px;\n}\n\n.stat-item {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    padding: 15px;\n    border-radius: 12px;\n    text-align: center;\n}\n\n.stat-number {\n    font-size: 22px;\n    font-weight: bold;\n    margin-bottom: 3px;\n}\n\n.stat-label {\n    font-size: 11px;\n    opacity: 0.9;\n}\n\n/* DOM変化表示エリア */\n.dom-display {\n    background: #2c3e50;\n    color: #ecf0f1;\n    border-radius: 10px;\n    padding: 12px;\n    margin-bottom: 15px;\n    font-family: 'Courier New', monospace;\n    font-size: 11px;\n}\n\n.dom-title {\n    color: #3498db;\n    font-weight: bold;\n    margin-bottom: 8px;\n}\n\n.dom-content {\n    line-height: 1.3;\n}\n\n/* オブジェクト表示エリア */\n.object-display {\n    background: #34495e;\n    color: #ecf0f1;\n    border-radius: 10px;\n    padding: 12px;\n    margin-bottom: 15px;\n    font-family: 'Courier New', monospace;\n    font-size: 11px;\n}\n\n.object-title {\n    color: #e74c3c;\n    font-weight: bold;\n    margin-bottom: 8px;\n}\n\n/* リセットボタン */\n.btn-reset {\n    width: 100%;\n    background: #e74c3c;\n    color: white;\n    padding: 10px;\n    border: none;\n    border-radius: 10px;\n    font-size: 13px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: background 0.3s ease;\n}\n\n.btn-reset:hover {\n    background: #c0392b;\n}\n\n/* レスポンシブ */\n@media (max-width: 768px) {\n    .container {\n        grid-template-columns: 1fr;\n        gap: 20px;\n    }\n    \n    .action-buttons {\n        flex-direction: column;\n    }\n    \n    .stats-grid {\n        grid-template-columns: 1fr;\n    }\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "// === 19.2 メイン学習テーマ: DOM操作とイベント処理 ===\n\n// 1. 商品データオブジェクト（19.1から拡張）\nlet productData = {\n    name: \"プレミアム Tシャツ\",\n    price: 2980,\n    likes: 0,\n    isLiked: false,\n    showDetails: false,     // 詳細表示状態（新規追加）\n    inCart: false,          // カート追加状態（新規追加）\n    detailViews: 0,         // 詳細表示回数（新規追加）\n    cartActions: 0,         // カート操作回数（新規追加）\n    domChanges: 0           // DOM変更回数（学習用）\n};\n\n// 2. DOM要素の取得\nconst likeBtn = document.getElementById('likeBtn');\nconst detailsBtn = document.getElementById('detailsBtn');\nconst cartBtn = document.getElementById('cartBtn');\nconst productDetails = document.getElementById('productDetails');\nconst likeCount = document.getElementById('likeCount');\nconst totalLikes = document.getElementById('totalLikes');\nconst totalDetailViews = document.getElementById('totalDetailViews');\nconst totalCartActions = document.getElementById('totalCartActions');\nconst totalDomChanges = document.getElementById('totalDomChanges');\nconst domDisplay = document.getElementById('domDisplay');\nconst objectDisplay = document.getElementById('objectDisplay');\nconst resetBtn = document.getElementById('resetBtn');\n\n// 3. DOM変化ログ記録機能（学習支援）\nfunction logDomChange(action) {\n    productData.domChanges += 1;\n    domDisplay.textContent = `${new Date().toLocaleTimeString()}: ${action}`;\n    console.log(`DOM操作: ${action}`);\n}\n\n// 4. オブジェクト表示更新機能\nfunction displayObjectData() {\n    objectDisplay.innerHTML = `\n        {<br>\n        &nbsp;&nbsp;likes: <span style=\"color: #e74c3c;\">${productData.likes}</span>,<br>\n        &nbsp;&nbsp;isLiked: <span style=\"color: #3498db;\">${productData.isLiked}</span>,<br>\n        &nbsp;&nbsp;showDetails: <span style=\"color: #27ae60;\">${productData.showDetails}</span>,<br>\n        &nbsp;&nbsp;inCart: <span style=\"color: #f39c12;\">${productData.inCart}</span><br>\n        }\n    `;\n}\n\n// 5. 統計表示更新機能\nfunction updateStats() {\n    totalLikes.textContent = productData.likes;\n    totalDetailViews.textContent = productData.detailViews;\n    totalCartActions.textContent = productData.cartActions;\n    totalDomChanges.textContent = productData.domChanges;\n}\n\n// 6. いいね機能（19.1から継続）\nfunction handleLike() {\n    productData.isLiked = !productData.isLiked;\n    productData.likes += productData.isLiked ? 1 : -1;\n    \n    // DOM操作：ボタンの見た目を更新\n    if (productData.isLiked) {\n        likeBtn.classList.add('liked');\n        logDomChange('いいねボタン → 赤色に変更');\n    } else {\n        likeBtn.classList.remove('liked');\n        logDomChange('いいねボタン → グレーに変更');\n    }\n    \n    likeCount.textContent = productData.likes;\n    updateStats();\n    displayObjectData();\n}\n\n// 7. 詳細表示切替機能（新機能 - DOM操作のメイン学習）\nfunction handleDetailsToggle() {\n    productData.showDetails = !productData.showDetails;\n    productData.detailViews += productData.showDetails ? 1 : 0;\n    \n    // DOM操作：要素の表示・非表示切替\n    if (productData.showDetails) {\n        productDetails.classList.add('show');\n        detailsBtn.textContent = '📝 閉じる';\n        logDomChange('詳細エリア → 表示（addClass）');\n    } else {\n        productDetails.classList.remove('show');\n        detailsBtn.textContent = '📝 詳細';\n        logDomChange('詳細エリア → 非表示（removeClass）');\n    }\n    \n    updateStats();\n    displayObjectData();\n}\n\n// 8. カート機能（新機能）\nfunction handleCart() {\n    productData.inCart = !productData.inCart;\n    productData.cartActions += 1;\n    \n    // DOM操作：ボタンの状態変更\n    if (productData.inCart) {\n        cartBtn.classList.add('in-cart');\n        cartBtn.textContent = '🛒 削除';\n        logDomChange('カートボタン → オレンジ色（追加状態）');\n    } else {\n        cartBtn.classList.remove('in-cart');\n        cartBtn.textContent = '🛒 カート';\n        logDomChange('カートボタン → 緑色（通常状態）');\n    }\n    \n    updateStats();\n    displayObjectData();\n}\n\n// 9. リセット機能\nfunction handleReset() {\n    if (confirm('全ての状態をリセットしますか？')) {\n        // オブジェクトのリセット\n        productData.likes = 0;\n        productData.isLiked = false;\n        productData.showDetails = false;\n        productData.inCart = false;\n        productData.detailViews = 0;\n        productData.cartActions = 0;\n        productData.domChanges = 0;\n        \n        // DOM要素のリセット\n        likeBtn.classList.remove('liked');\n        productDetails.classList.remove('show');\n        cartBtn.classList.remove('in-cart');\n        \n        likeCount.textContent = '0';\n        detailsBtn.textContent = '📝 詳細';\n        cartBtn.textContent = '🛒 カート';\n        \n        logDomChange('全要素をリセット');\n        updateStats();\n        displayObjectData();\n    }\n}\n\n// 10. イベントリスナーの設定\nlikeBtn.addEventListener('click', handleLike);\ndetailsBtn.addEventListener('click', handleDetailsToggle);\ncartBtn.addEventListener('click', handleCart);\nresetBtn.addEventListener('click', handleReset);\n\n// 11. 初期化\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('=== 19.2 DOM操作学習モード開始 ===');\n    console.log('新しい学習テーマ: DOM要素の動的操作');\n    console.log('重要ポイント: オブジェクトの変化 → DOM要素の更新');\n    \n    logDomChange('初期化完了');\n    updateStats();\n    displayObjectData();\n    \n    console.log('🎯 各ボタンを押してDOM要素の変化を観察してみましょう！');\n});"
    }
  },
  "expectedResult": {
    "domManipulation": "DOM要素の表示・非表示制御が動作する",
    "eventHandling": "複数ボタンのイベント処理が動作する",
    "detailsToggle": "詳細表示切替機能が動作する",
    "cartFunctionality": "基本カート機能が動作する",
    "multiFunction": "複数機能が連携して動作する",
    "behavior": "オブジェクト管理+DOM操作の統合システムが完成する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}