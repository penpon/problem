{
  "id": "practice31",
  "title": "ランダム選択システム",
  "description": "Math.randomとランダム選択の実装を学び、配列からのランダム要素選択と詳細な処理可視化システムを構築します",
  "category": "javascript-advanced",
  "difficulty": 3,
  "instructions": [
    "Math.random()の仕組みとランダムインデックス生成を理解する",
    "配列からのランダム選択アルゴリズムを実装する",
    "ランダム処理の内部計算過程を可視化する",
    "統計システムと組み合わせた実用的なランダム機能を構築する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ステップ17.3b - ランダム選択システム</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🎲 ランダム選択システム</h1>\n        <div class=\"step-info\">\n            <strong>ステップ17.3b - Math.randomとランダム選択の実装</strong>\n        </div>\n        \n        <div class=\"celebration\">🎲 🎯 ⚡</div>\n        \n        <div class=\"info-box\">\n            <h3>📚 このステップで学ぶこと</h3>\n            <ul>\n                <li><strong>Math.random()</strong>による乱数生成の仕組み</li>\n                <li><strong>ランダムインデックス</strong>の計算方法</li>\n                <li>配列からの<strong>ランダム選択</strong>システム</li>\n                <li>前ステップの<strong>配列知識の実践活用</strong></li>\n            </ul>\n        </div>\n        \n        <div class=\"demo-section\">\n            <h3>🎪 ランダム選択デモ</h3>\n            <p>ボタンをクリックして、配列からランダムに要素を選択してみましょう！</p>\n            \n            <div class=\"content-display\" id=\"content-display\">\n                <h3 style=\"color: #3498db; margin-top: 0;\">🎯 ランダム選択結果表示エリア</h3>\n                <p>下のボタンをクリックして、Math.random()がどのように動作するか確認してください。</p>\n                <div class=\"random-result\" id=\"random-result\" style=\"display: none;\">\n                    選択された要素がここに表示されます\n                </div>\n            </div>\n            \n            <div class=\"button-grid\">\n                <button class=\"random-btn btn-fruit\" id=\"fruit-btn\">\n                    🍎 果物ランダム\n                </button>\n                \n                <button class=\"random-btn btn-color\" id=\"color-btn\">\n                    🎨 色ランダム\n                </button>\n                \n                <button class=\"random-btn btn-music\" id=\"music-btn\">\n                    🎵 音楽ランダム\n                </button>\n                \n                <button class=\"random-btn btn-mixed\" id=\"mixed-btn\">\n                    🎯 全混合ランダム\n                </button>\n            </div>\n            \n            <div class=\"process-details\" id=\"process-details\">\n                ランダム処理の詳細がここに表示されます...\n            </div>\n        </div>\n        \n        <div class=\"data-section\">\n            <h4>📊 使用中のデータ配列</h4>\n            <div class=\"data-grid\">\n                <div class=\"data-card\">\n                    <h4>🍎 果物配列</h4>\n                    <div class=\"data-content\" id=\"fruits-data\">読み込み中...</div>\n                    <div class=\"data-stats\">要素数: <span id=\"fruits-count\">5</span>個</div>\n                </div>\n                <div class=\"data-card\">\n                    <h4>🎨 色配列</h4>\n                    <div class=\"data-content\" id=\"colors-data\">読み込み中...</div>\n                    <div class=\"data-stats\">要素数: <span id=\"colors-count\">6</span>個</div>\n                </div>\n                <div class=\"data-card\">\n                    <h4>🎵 音楽配列</h4>\n                    <div class=\"data-content\" id=\"music-data\">読み込み中...</div>\n                    <div class=\"data-stats\">要素数: <span id=\"music-count\">5</span>個</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"stats-section\">\n            <h4>📈 ランダム選択統計</h4>\n            <div class=\"stats-grid\">\n                <div class=\"stat-card\">\n                    <div class=\"stat-number\" id=\"total-selections\">0</div>\n                    <div class=\"stat-label\">総選択回数</div>\n                </div>\n                <div class=\"stat-card\">\n                    <div class=\"stat-number\" id=\"fruit-count\">0</div>\n                    <div class=\"stat-label\">果物選択</div>\n                </div>\n                <div class=\"stat-card\">\n                    <div class=\"stat-number\" id=\"color-count\">0</div>\n                    <div class=\"stat-label\">色選択</div>\n                </div>\n                <div class=\"stat-card\">\n                    <div class=\"stat-number\" id=\"music-count\">0</div>\n                    <div class=\"stat-label\">音楽選択</div>\n                </div>\n                <div class=\"stat-card\">\n                    <div class=\"stat-number\" id=\"mixed-count\">0</div>\n                    <div class=\"stat-label\">混合選択</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🎯 ランダム選択の仕組み</h3>\n            <p>配列からランダムに要素を選択する基本的なプロセス：</p>\n            \n            <div class=\"code-example\">\n// ステップ1: 配列を準備\nlet fruits = [\"りんご\", \"バナナ\", \"オレンジ\", \"ぶどう\"];\n\n// ステップ2: 0以上1未満のランダムな小数を生成\nlet randomFloat = Math.random(); // 例: 0.6789\n\n// ステップ3: 配列の長さと掛け算\nlet scaled = randomFloat * fruits.length; // 例: 0.6789 × 4 = 2.7156\n\n// ステップ4: 整数のインデックスを取得\nlet randomIndex = Math.floor(scaled); // 例: Math.floor(2.7156) = 2\n\n// ステップ5: ランダムな要素を取得\nlet randomFruit = fruits[randomIndex]; // 例: fruits[2] = \"オレンジ\"\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🔧 実装されている機能</h3>\n            <ul>\n                <li><strong>🍎 果物ランダム</strong>: 5種類の果物からランダム選択</li>\n                <li><strong>🎨 色ランダム</strong>: 6色からランダム選択（背景色も変更）</li>\n                <li><strong>🎵 音楽ランダム</strong>: 5つの音楽ジャンルからランダム選択</li>\n                <li><strong>🎯 全混合ランダム</strong>: 全配列（16要素）から1つをランダム選択</li>\n            </ul>\n        </div>\n        \n        <div class=\"instruction\">\n            <h3>🚀 すべてのランダム機能を試してみよう！</h3>\n            <p>4つのボタンをすべてクリックして、ランダム選択がどのように動作するか確認してください。特に「ランダム処理の詳細」で内部計算を理解しましょう。</p>\n            <p><strong>同じボタンを何度もクリック</strong>して、毎回異なる結果が出ることも確認してください。</p>\n            <p><strong>F12</strong>（MacはCmd+Option+I）で開発者ツールを開き、<strong>Console</strong>タブでランダム処理のログも確認できます！</p>\n        </div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "/* ベーススタイル */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    line-height: 1.6;\n    color: #333;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    padding: 20px;\n}\n\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    background: white;\n    border-radius: 20px;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    padding: 40px;\n    animation: slideIn 0.8s ease-out;\n}\n\n@keyframes slideIn {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* ヘッダー部分 */\nh1 {\n    color: #2c3e50;\n    text-align: center;\n    margin-bottom: 10px;\n    font-size: 2.5rem;\n    font-weight: 700;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.step-info {\n    background: linear-gradient(135deg, #ff6b6b, #ffa726);\n    color: white;\n    padding: 15px;\n    border-radius: 15px;\n    text-align: center;\n    margin-bottom: 30px;\n    font-weight: 600;\n    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);\n}\n\n.celebration {\n    text-align: center;\n    font-size: 3rem;\n    margin: 20px 0;\n    animation: bounce 2s infinite;\n}\n\n@keyframes bounce {\n    0%, 20%, 50%, 80%, 100% {\n        transform: translateY(0);\n    }\n    40% {\n        transform: translateY(-10px);\n    }\n    60% {\n        transform: translateY(-5px);\n    }\n}\n\n/* 情報ボックス */\n.info-box {\n    background: #f8f9fa;\n    border: 2px solid #e9ecef;\n    border-radius: 15px;\n    padding: 25px;\n    margin: 25px 0;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);\n}\n\n.info-box h3 {\n    color: #495057;\n    margin-bottom: 15px;\n    font-size: 1.3rem;\n    border-bottom: 2px solid #dee2e6;\n    padding-bottom: 8px;\n}\n\n.info-box ul {\n    list-style: none;\n    padding-left: 0;\n}\n\n.info-box li {\n    background: white;\n    margin: 10px 0;\n    padding: 12px 15px;\n    border-radius: 8px;\n    border-left: 4px solid #007bff;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\n    transition: transform 0.2s ease;\n}\n\n.info-box li:hover {\n    transform: translateX(5px);\n}\n\n/* デモセクション */\n.demo-section {\n    background: #f8f9fa;\n    border-radius: 20px;\n    padding: 30px;\n    margin: 30px 0;\n    border: 3px solid #e9ecef;\n    position: relative;\n    overflow: hidden;\n}\n\n.demo-section::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: linear-gradient(90deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4, #feca57);\n}\n\n.demo-section h3 {\n    color: #2c3e50;\n    margin-bottom: 15px;\n    font-size: 1.5rem;\n}\n\n.demo-section p {\n    color: #6c757d;\n    margin-bottom: 20px;\n    font-size: 1.1rem;\n}\n\n/* コンテンツ表示エリア */\n.content-display {\n    background: white;\n    border: 2px solid #dee2e6;\n    border-radius: 15px;\n    padding: 25px;\n    margin: 25px 0;\n    min-height: 250px;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.08);\n    position: relative;\n    overflow: hidden;\n    transition: background 0.5s ease;\n}\n\n.content-display::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: linear-gradient(90deg, #667eea, #764ba2);\n}\n\n.random-result {\n    background: #e3f2fd;\n    border: 2px solid #2196f3;\n    border-radius: 10px;\n    padding: 15px;\n    margin-top: 15px;\n    font-family: 'Courier New', monospace;\n    font-size: 1.1rem;\n    color: #1976d2;\n    transition: all 0.3s ease;\n}\n\n/* ボタングリッド */\n.button-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 15px;\n    margin: 25px 0;\n}\n\n.random-btn {\n    background: linear-gradient(135deg, #667eea, #764ba2);\n    color: white;\n    border: none;\n    padding: 20px 25px;\n    border-radius: 12px;\n    font-size: 1.1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n    position: relative;\n    overflow: hidden;\n}\n\n.random-btn::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    transition: left 0.5s;\n}\n\n.random-btn:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n}\n\n.random-btn:hover::before {\n    left: 100%;\n}\n\n.random-btn:active {\n    transform: translateY(0);\n}\n\n/* 個別ボタンスタイル */\n.btn-fruit {\n    background: linear-gradient(135deg, #ff6b6b, #ffa726);\n    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);\n}\n\n.btn-fruit:hover {\n    box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);\n}\n\n.btn-color {\n    background: linear-gradient(135deg, #4ecdc4, #44a08d);\n    box-shadow: 0 4px 15px rgba(78, 205, 196, 0.3);\n}\n\n.btn-color:hover {\n    box-shadow: 0 6px 20px rgba(78, 205, 196, 0.4);\n}\n\n.btn-music {\n    background: linear-gradient(135deg, #9b59b6, #8e44ad);\n    box-shadow: 0 4px 15px rgba(155, 89, 182, 0.3);\n}\n\n.btn-music:hover {\n    box-shadow: 0 6px 20px rgba(155, 89, 182, 0.4);\n}\n\n.btn-mixed {\n    background: linear-gradient(135deg, #e67e22, #f39c12);\n    box-shadow: 0 4px 15px rgba(230, 126, 34, 0.3);\n}\n\n.btn-mixed:hover {\n    box-shadow: 0 6px 20px rgba(230, 126, 34, 0.4);\n}\n\n/* 処理詳細 */\n.process-details {\n    background: #fff3e0;\n    border: 2px solid #ffb74d;\n    border-radius: 15px;\n    padding: 20px;\n    margin-top: 20px;\n    font-family: 'Courier New', monospace;\n    font-size: 0.95rem;\n    color: #e65100;\n    line-height: 1.8;\n    box-shadow: 0 4px 10px rgba(255, 183, 77, 0.2);\n}\n\n/* データセクション */\n.data-section {\n    background: #f5f5f5;\n    border-radius: 15px;\n    padding: 25px;\n    margin: 25px 0;\n}\n\n.data-section h4 {\n    color: #2c3e50;\n    margin-bottom: 20px;\n    font-size: 1.3rem;\n    text-align: center;\n}\n\n.data-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 20px;\n}\n\n.data-card {\n    background: white;\n    border: 2px solid #e9ecef;\n    border-radius: 12px;\n    padding: 20px;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.data-card:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);\n}\n\n.data-card h4 {\n    color: #495057;\n    margin-bottom: 15px;\n    font-size: 1.1rem;\n    border-bottom: 2px solid #e9ecef;\n    padding-bottom: 8px;\n}\n\n.data-content {\n    background: #f8f9fa;\n    border: 1px solid #dee2e6;\n    border-radius: 8px;\n    padding: 15px;\n    font-family: 'Courier New', monospace;\n    font-size: 0.9rem;\n    color: #495057;\n    word-break: break-all;\n    margin-bottom: 10px;\n    min-height: 80px;\n}\n\n.data-stats {\n    color: #6c757d;\n    font-size: 0.9rem;\n    text-align: right;\n    font-weight: 500;\n}\n\n/* 統計セクション */\n.stats-section {\n    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n    color: white;\n    border-radius: 20px;\n    padding: 30px;\n    margin: 30px 0;\n    box-shadow: 0 10px 30px rgba(240, 147, 251, 0.3);\n}\n\n.stats-section h4 {\n    text-align: center;\n    margin-bottom: 25px;\n    font-size: 1.4rem;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n    gap: 15px;\n}\n\n.stat-card {\n    background: rgba(255, 255, 255, 0.2);\n    border-radius: 15px;\n    padding: 20px;\n    text-align: center;\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.3);\n    transition: transform 0.3s ease;\n}\n\n.stat-card:hover {\n    transform: scale(1.05);\n}\n\n.stat-number {\n    font-size: 2.5rem;\n    font-weight: bold;\n    margin-bottom: 8px;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n.stat-label {\n    font-size: 0.9rem;\n    opacity: 0.9;\n    font-weight: 500;\n}\n\n/* コード例 */\n.code-example {\n    background: #282c34;\n    color: #abb2bf;\n    padding: 20px;\n    border-radius: 10px;\n    font-family: 'Courier New', monospace;\n    font-size: 0.9rem;\n    line-height: 1.6;\n    overflow-x: auto;\n    margin: 15px 0;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n}\n\n/* 指示セクション */\n.instruction {\n    background: linear-gradient(135deg, #56ccf2, #2f80ed);\n    color: white;\n    padding: 25px;\n    border-radius: 15px;\n    margin: 30px 0;\n    text-align: center;\n    box-shadow: 0 6px 20px rgba(86, 204, 242, 0.3);\n}\n\n.instruction h3 {\n    margin-bottom: 15px;\n    font-size: 1.4rem;\n}\n\n.instruction p {\n    margin-bottom: 10px;\n    font-size: 1.05rem;\n    line-height: 1.6;\n}\n\n/* アニメーション効果 */\n.pulse {\n    animation: pulse 1.5s infinite;\n}\n\n@keyframes pulse {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.05); }\n    100% { transform: scale(1); }\n}\n\n.slide-in {\n    animation: slideInLeft 0.5s ease-out;\n}\n\n@keyframes slideInLeft {\n    from {\n        opacity: 0;\n        transform: translateX(-30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateX(0);\n    }\n}\n\n/* レスポンシブデザイン */\n@media (max-width: 768px) {\n    .container {\n        padding: 20px;\n        margin: 10px;\n    }\n\n    h1 {\n        font-size: 2rem;\n    }\n\n    .celebration {\n        font-size: 2rem;\n    }\n\n    .button-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .data-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .stats-grid {\n        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n    }\n\n    .code-example {\n        font-size: 0.8rem;\n        padding: 15px;\n    }\n\n    .stat-number {\n        font-size: 2rem;\n    }\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "console.log(\"🎲 ステップ17.3b: ランダム選択システムを開始します！\");\nconsole.log(\"====================================================\");\n\n// 学習用データ配列\nconst gameData = {\n    fruits: [\"りんご\", \"バナナ\", \"オレンジ\", \"ぶどう\", \"いちご\"],\n    colors: [\n        { name: \"夕焼けオレンジ\", code: \"#ff6b6b\", bg: \"linear-gradient(135deg, #ff6b6b, #ffa726)\" },\n        { name: \"海の青\", code: \"#4ecdc4\", bg: \"linear-gradient(135deg, #4ecdc4, #44a08d)\" },\n        { name: \"森の緑\", code: \"#56ab2f\", bg: \"linear-gradient(135deg, #56ab2f, #a8e6cf)\" },\n        { name: \"ラベンダー紫\", code: \"#667eea\", bg: \"linear-gradient(135deg, #667eea, #764ba2)\" },\n        { name: \"ピンクローズ\", code: \"#fa709a\", bg: \"linear-gradient(135deg, #fa709a, #fee140)\" },\n        { name: \"ゴールド\", code: \"#f7b801\", bg: \"linear-gradient(135deg, #f7b801, #f18701)\" }\n    ],\n    music: [\"ポップス\", \"ジャズ\", \"クラシック\", \"ロック\", \"エレクトロニカ\"]\n};\n\n// 統計データ\nlet selectionStats = {\n    fruits: 0,\n    colors: 0,\n    music: 0,\n    mixed: 0,\n    total: 0\n};\n\n// DOM要素の取得\nlet contentDisplay = document.getElementById(\"content-display\");\nlet randomResult = document.getElementById(\"random-result\");\nlet processDetails = document.getElementById(\"process-details\");\n\n// ランダム選択の共通処理関数\nfunction performRandomSelection(array, categoryName, displayType) {\n    // ステップ1: 0以上1未満のランダムな小数生成\n    let randomFloat = Math.random();\n    \n    // ステップ2: 配列の長さと掛け算\n    let scaledValue = randomFloat * array.length;\n    \n    // ステップ3: 整数インデックスに変換\n    let randomIndex = Math.floor(scaledValue);\n    \n    // ステップ4: ランダムな要素を取得\n    let selectedItem = array[randomIndex];\n    \n    // 統計更新\n    selectionStats[displayType]++;\n    selectionStats.total++;\n    \n    // 処理詳細の表示\n    showProcessDetails(categoryName, randomFloat, scaledValue, randomIndex, selectedItem, array.length);\n    \n    // 統計表示の更新\n    updateStatsDisplay();\n    \n    // コンソールログ\n    console.log(`🎯 ${categoryName}選択実行:`);\n    console.log(`  生成された乱数: ${randomFloat.toFixed(6)}`);\n    console.log(`  スケール後の値: ${scaledValue.toFixed(6)}`);\n    console.log(`  選択インデックス: ${randomIndex}`);\n    console.log(`  選択された要素: ${JSON.stringify(selectedItem)}`);\n    console.log(`  配列長: ${array.length}`);\n    \n    return { selectedItem, randomIndex, randomFloat, scaledValue, arrayLength: array.length };\n}\n\n// 処理詳細を表示する関数\nfunction showProcessDetails(categoryName, randomFloat, scaledValue, randomIndex, selectedItem, arrayLength) {\n    processDetails.innerHTML = `\n        <strong>🔍 ${categoryName}ランダム処理の詳細:</strong><br><br>\n        <strong>ステップ1:</strong> Math.random() = ${randomFloat.toFixed(6)} (0以上1未満の小数)<br>\n        <strong>ステップ2:</strong> ${randomFloat.toFixed(6)} × ${arrayLength} = ${scaledValue.toFixed(6)} (配列長との掛け算)<br>\n        <strong>ステップ3:</strong> Math.floor(${scaledValue.toFixed(6)}) = ${randomIndex} (整数インデックス)<br>\n        <strong>ステップ4:</strong> 配列[${randomIndex}] = \"${typeof selectedItem === 'object' ? selectedItem.name : selectedItem}\" (要素取得)<br><br>\n        <strong>結果:</strong> ${arrayLength}個の要素から ${randomIndex + 1}番目が選択されました\n    `;\n    \n    // アニメーション効果\n    processDetails.classList.add('slide-in');\n    setTimeout(() => {\n        processDetails.classList.remove('slide-in');\n    }, 500);\n}\n\n// 統計表示を更新する関数\nfunction updateStatsDisplay() {\n    document.getElementById(\"total-selections\").textContent = selectionStats.total;\n    document.getElementById(\"fruit-count\").textContent = selectionStats.fruits;\n    document.getElementById(\"color-count\").textContent = selectionStats.colors;\n    document.getElementById(\"music-count\").textContent = selectionStats.music;\n    document.getElementById(\"mixed-count\").textContent = selectionStats.mixed;\n}\n\n// データ配列表示を更新する関数\nfunction displayDataArrays() {\n    // 果物配列表示\n    document.getElementById(\"fruits-data\").textContent = `[${gameData.fruits.map(item => `\"${item}\"`).join(\", \")}]`;\n    document.getElementById(\"fruits-count\").textContent = gameData.fruits.length;\n    \n    // 色配列表示（名前のみ）\n    document.getElementById(\"colors-data\").textContent = `[${gameData.colors.map(item => `\"${item.name}\"`).join(\", \")}]`;\n    document.getElementById(\"colors-count\").textContent = gameData.colors.length;\n    \n    // 音楽配列表示\n    document.getElementById(\"music-data\").textContent = `[${gameData.music.map(item => `\"${item}\"`).join(\", \")}]`;\n    document.getElementById(\"music-count\").textContent = gameData.music.length;\n}\n\n// 1. 果物ランダムボタン\ndocument.getElementById(\"fruit-btn\").addEventListener(\"click\", function() {\n    let result = performRandomSelection(gameData.fruits, \"果物\", \"fruits\");\n    \n    contentDisplay.innerHTML = `\n        <h3 style=\"color: #ff6b6b; margin-top: 0;\">🍎 果物ランダム選択</h3>\n        <div style=\"background: #fff5f5; padding: 25px; border-radius: 15px; border-left: 4px solid #ff6b6b;\">\n            <div style=\"background: white; padding: 20px; border-radius: 10px; text-align: center; margin-bottom: 15px;\">\n                <div style=\"font-size: 4rem; margin: 15px 0;\">🍎</div>\n                <h2 style=\"color: #e53e3e; margin: 15px 0; font-size: 1.8rem;\">\n                    ${result.selectedItem}\n                </h2>\n                <p style=\"color: #c53030; margin: 0; font-size: 1.1rem;\">\n                    今日のおすすめフルーツです！\n                </p>\n            </div>\n            <div style=\"background: #fed7d7; padding: 15px; border-radius: 8px; text-align: center;\">\n                <strong>選択過程: Math.random()=${result.randomFloat.toFixed(4)} → インデックス=${result.randomIndex} → \"${result.selectedItem}\"</strong>\n            </div>\n        </div>\n        <p style=\"color: #7f8c8d; font-size: 0.9rem; margin-top: 15px;\">\n            🎯 ${result.arrayLength}種類の果物から ${result.randomIndex + 1} 番目が選択されました\n        </p>\n    `;\n    \n    randomResult.style.display = \"block\";\n    randomResult.textContent = `選択結果: ${result.selectedItem}`;\n    randomResult.classList.add('pulse');\n    setTimeout(() => randomResult.classList.remove('pulse'), 1500);\n});\n\n// 2. 色ランダムボタン\ndocument.getElementById(\"color-btn\").addEventListener(\"click\", function() {\n    let result = performRandomSelection(gameData.colors, \"色\", \"colors\");\n    let colorObj = result.selectedItem;\n    \n    contentDisplay.style.background = colorObj.bg;\n    contentDisplay.innerHTML = `\n        <h3 style=\"color: white; margin-top: 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.5);\">🎨 色ランダム選択</h3>\n        <div style=\"background: rgba(255,255,255,0.15); backdrop-filter: blur(10px); padding: 25px; border-radius: 15px; border: 2px solid rgba(255,255,255,0.3);\">\n            <div style=\"background: rgba(255,255,255,0.2); padding: 20px; border-radius: 10px; text-align: center; margin-bottom: 15px;\">\n                <div style=\"font-size: 4rem; margin: 15px 0;\">🎨</div>\n                <h2 style=\"color: white; margin: 15px 0; font-size: 1.8rem; text-shadow: 2px 2px 4px rgba(0,0,0,0.5);\">\n                    ${colorObj.name}\n                </h2>\n                <p style=\"color: rgba(255,255,255,0.9); margin: 5px 0; font-family: monospace; font-size: 1.1rem;\">\n                    カラーコード: ${colorObj.code}\n                </p>\n                <p style=\"color: rgba(255,255,255,0.8); margin: 0; font-style: italic;\">\n                    美しい色彩があなたを包みます\n                </p>\n            </div>\n            <div style=\"background: rgba(0,0,0,0.2); padding: 15px; border-radius: 8px; text-align: center;\">\n                <strong style=\"color: white;\">選択過程: Math.random()=${result.randomFloat.toFixed(4)} → インデックス=${result.randomIndex} → \"${colorObj.name}\"</strong>\n            </div>\n        </div>\n        <p style=\"color: rgba(255,255,255,0.9); font-size: 0.9rem; margin-top: 15px; text-shadow: 1px 1px 2px rgba(0,0,0,0.5);\">\n            🌈 ${result.arrayLength}色から ${result.randomIndex + 1} 番目の色が選択され、背景も変化しました\n        </p>\n    `;\n    \n    randomResult.style.display = \"block\";\n    randomResult.textContent = `選択結果: ${colorObj.name} (${colorObj.code})`;\n    randomResult.style.background = colorObj.bg;\n    randomResult.style.color = \"white\";\n    randomResult.classList.add('pulse');\n    setTimeout(() => randomResult.classList.remove('pulse'), 1500);\n});\n\n// 3. 音楽ランダムボタン\ndocument.getElementById(\"music-btn\").addEventListener(\"click\", function() {\n    let result = performRandomSelection(gameData.music, \"音楽\", \"music\");\n    \n    // 背景色をデフォルトに戻す\n    contentDisplay.style.background = \"white\";\n    \n    contentDisplay.innerHTML = `\n        <h3 style=\"color: #9b59b6; margin-top: 0;\">🎵 音楽ランダム選択</h3>\n        <div style=\"background: #f4ecf7; padding: 25px; border-radius: 15px; border-left: 4px solid #9b59b6;\">\n            <div style=\"background: white; padding: 20px; border-radius: 10px; text-align: center; margin-bottom: 15px;\">\n                <div style=\"font-size: 4rem; margin: 15px 0;\">🎵</div>\n                <h2 style=\"color: #7b1fa2; margin: 15px 0; font-size: 1.8rem;\">\n                    ${result.selectedItem}\n                </h2>\n                <p style=\"color: #8e24aa; margin: 0; font-size: 1.1rem;\">\n                    今日はこのジャンルを聴いてみませんか？\n                </p>\n            </div>\n            <div style=\"background: #e1bee7; padding: 15px; border-radius: 8px; text-align: center;\">\n                <strong>選択過程: Math.random()=${result.randomFloat.toFixed(4)} → インデックス=${result.randomIndex} → \"${result.selectedItem}\"</strong>\n            </div>\n        </div>\n        <p style=\"color: #7f8c8d; font-size: 0.9rem; margin-top: 15px;\">\n            🎶 ${result.arrayLength}つの音楽ジャンルから ${result.randomIndex + 1} 番目が選択されました\n        </p>\n    `;\n    \n    randomResult.style.display = \"block\";\n    randomResult.textContent = `選択結果: ${result.selectedItem}`;\n    randomResult.style.background = \"#e3f2fd\";\n    randomResult.style.color = \"#1976d2\";\n    randomResult.classList.add('pulse');\n    setTimeout(() => randomResult.classList.remove('pulse'), 1500);\n});\n\n// 4. 全混合ランダムボタン\ndocument.getElementById(\"mixed-btn\").addEventListener(\"click\", function() {\n    // 全配列を統合\n    let mixedArray = [\n        ...gameData.fruits.map(item => ({ category: \"果物\", value: item, icon: \"🍎\" })),\n        ...gameData.colors.map(item => ({ category: \"色\", value: item.name, icon: \"🎨\", colorData: item })),\n        ...gameData.music.map(item => ({ category: \"音楽\", value: item, icon: \"🎵\" }))\n    ];\n    \n    let result = performRandomSelection(mixedArray, \"全混合\", \"mixed\");\n    let selectedObj = result.selectedItem;\n    \n    // 色が選ばれた場合は背景を変更、それ以外はデフォルト\n    if (selectedObj.category === \"色\" && selectedObj.colorData) {\n        contentDisplay.style.background = selectedObj.colorData.bg;\n    } else {\n        contentDisplay.style.background = \"white\";\n    }\n    \n    let textColor = selectedObj.category === \"色\" ? \"white\" : \"#e67e22\";\n    let bgColor = selectedObj.category === \"色\" ? \"rgba(255,255,255,0.15)\" : \"#fef5e7\";\n    let borderColor = selectedObj.category === \"色\" ? \"rgba(255,255,255,0.3)\" : \"#e67e22\";\n    \n    contentDisplay.innerHTML = `\n        <h3 style=\"color: ${textColor}; margin-top: 0; ${selectedObj.category === \"色\" ? \"text-shadow: 2px 2px 4px rgba(0,0,0,0.5);\" : \"\"}\">🎯 全混合ランダム選択</h3>\n        <div style=\"background: ${bgColor}; ${selectedObj.category === \"色\" ? \"backdrop-filter: blur(10px);\" : \"\"} padding: 25px; border-radius: 15px; border: 2px solid ${borderColor};\">\n            <div style=\"background: ${selectedObj.category === \"色\" ? \"rgba(255,255,255,0.2)\" : \"white\"}; padding: 20px; border-radius: 10px; text-align: center; margin-bottom: 15px;\">\n                <div style=\"background: ${selectedObj.category === \"色\" ? \"rgba(255,255,255,0.2)\" : \"#f8f9fa\"}; padding: 10px; border-radius: 8px; margin-bottom: 15px;\">\n                    <strong style=\"color: ${textColor};\">カテゴリ: ${selectedObj.category}</strong>\n                </div>\n                <div style=\"font-size: 4rem; margin: 15px 0;\">${selectedObj.icon}</div>\n                <h2 style=\"color: ${textColor}; margin: 15px 0; font-size: 1.8rem; ${selectedObj.category === \"色\" ? \"text-shadow: 2px 2px 4px rgba(0,0,0,0.5);\" : \"\"}\">\n                    ${selectedObj.value}\n                </h2>\n                <p style=\"color: ${selectedObj.category === \"色\" ? \"rgba(255,255,255,0.8)\" : \"#bf6900\"}; margin: 0; font-size: 1.1rem; ${selectedObj.category === \"色\" ? \"font-style: italic;\" : \"\"}\">\n                    全${result.arrayLength}個のアイテムから選択！\n                </p>\n            </div>\n            <div style=\"background: ${selectedObj.category === \"色\" ? \"rgba(0,0,0,0.2)\" : \"#fed7aa\"}; padding: 15px; border-radius: 8px; text-align: center;\">\n                <strong style=\"color: ${textColor};\">選択過程: Math.random()=${result.randomFloat.toFixed(4)} → インデックス=${result.randomIndex} → [${selectedObj.category}] \"${selectedObj.value}\"</strong>\n            </div>\n        </div>\n        <p style=\"color: ${selectedObj.category === \"色\" ? \"rgba(255,255,255,0.9)\" : \"#7f8c8d\"}; font-size: 0.9rem; margin-top: 15px; ${selectedObj.category === \"色\" ? \"text-shadow: 1px 1px 2px rgba(0,0,0,0.5);\" : \"\"}\">\n            🌟 全${result.arrayLength}個のアイテム（果物${gameData.fruits.length}個 + 色${gameData.colors.length}個 + 音楽${gameData.music.length}個）から ${result.randomIndex + 1} 番目が選択されました\n        </p>\n    `;\n    \n    randomResult.style.display = \"block\";\n    randomResult.textContent = `選択結果: [${selectedObj.category}] ${selectedObj.value}`;\n    if (selectedObj.category === \"色\" && selectedObj.colorData) {\n        randomResult.style.background = selectedObj.colorData.bg;\n        randomResult.style.color = \"white\";\n    } else {\n        randomResult.style.background = \"#e3f2fd\";\n        randomResult.style.color = \"#1976d2\";\n    }\n    randomResult.classList.add('pulse');\n    setTimeout(() => randomResult.classList.remove('pulse'), 1500);\n});\n\n// ランダムテスト機能（隠し機能：コンソールから使用可能）\nfunction randomTest(category, times = 10) {\n    console.log(`🧪 ${category}のランダムテストを${times}回実行:`);\n    let results = {};\n    let targetArray;\n    \n    switch(category.toLowerCase()) {\n        case \"fruits\":\n        case \"fruit\":\n        case \"果物\":\n            targetArray = gameData.fruits;\n            break;\n        case \"colors\":\n        case \"color\":\n        case \"色\":\n            targetArray = gameData.colors.map(c => c.name);\n            break;\n        case \"music\":\n        case \"音楽\":\n            targetArray = gameData.music;\n            break;\n        default:\n            console.log(\"❌ 無効なカテゴリです。使用可能: 'fruits', 'colors', 'music'\");\n            return;\n    }\n    \n    // テスト実行\n    for (let i = 0; i < times; i++) {\n        let randomIndex = Math.floor(Math.random() * targetArray.length);\n        let selectedItem = targetArray[randomIndex];\n        results[selectedItem] = (results[selectedItem] || 0) + 1;\n    }\n    \n    console.table(results);\n    console.log(`📊 各要素の選択回数を確認できます`);\n}\n\n// Math.randomの詳細分析機能（隠し機能：コンソールから使用可能）\nfunction analyzeRandom(samples = 1000) {\n    console.log(`🔍 Math.random()の分析（サンプル数: ${samples}）:`);\n    let values = [];\n    let distribution = { \"0-0.2\": 0, \"0.2-0.4\": 0, \"0.4-0.6\": 0, \"0.6-0.8\": 0, \"0.8-1.0\": 0 };\n    \n    for (let i = 0; i < samples; i++) {\n        let rand = Math.random();\n        values.push(rand);\n        \n        if (rand < 0.2) distribution[\"0-0.2\"]++;\n        else if (rand < 0.4) distribution[\"0.2-0.4\"]++;\n        else if (rand < 0.6) distribution[\"0.4-0.6\"]++;\n        else if (rand < 0.8) distribution[\"0.6-0.8\"]++;\n        else distribution[\"0.8-1.0\"]++;\n    }\n    \n    let min = Math.min(...values);\n    let max = Math.max(...values);\n    let avg = values.reduce((a, b) => a + b) / values.length;\n    \n    console.log(`最小値: ${min.toFixed(6)}`);\n    console.log(`最大値: ${max.toFixed(6)}`);\n    console.log(`平均値: ${avg.toFixed(6)}`);\n    console.log(`分布:`, distribution);\n    console.log(`📈 理想的には各区間が約${samples/5}回ずつになるはずです`);\n}\n\n// 初期化処理\ndisplayDataArrays();\nupdateStatsDisplay();\n\n// ヘルプ情報をコンソールに出力\nconsole.log(\"✅ ランダム選択システムが初期化されました！\");\nconsole.log(\"📊 使用可能なデータ:\");\nconsole.log(`  果物: [${gameData.fruits.join(\", \")}] (${gameData.fruits.length}個)`);\nconsole.log(`  色: [${gameData.colors.map(c => c.name).join(\", \")}] (${gameData.colors.length}個)`);\nconsole.log(`  音楽: [${gameData.music.join(\", \")}] (${gameData.music.length}個)`);\nconsole.log(`  全混合: ${gameData.fruits.length + gameData.colors.length + gameData.music.length}個`);\nconsole.log(\"🔧 Math.randomの範囲: 0 ≤ Math.random() < 1\");\nconsole.log(\"💡 隠し機能:\");\nconsole.log(\"  randomTest('fruits', 20) - 指定回数のランダムテスト\");\nconsole.log(\"  analyzeRandom(1000) - Math.random()の分析\");\nconsole.log(\"🎯 各ボタンをクリックして、ランダム選択システムを体験してください！\");"
    }
  },
  "expectedResult": {
    "randomSelection": "果物・色・音楽から要素がランダム選択される",
    "processVisualization": "ランダム数値・計算過程・選択統計が表示される",
    "mixedArray": "全配列統合での複合ランダム選択が動作する",
    "behavior": "4つのランダム選択システムが統計と共に動作する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}