{
  "id": "practice33",
  "title": "タイマーアニメーション",
  "description": "タイマーとCSSアニメーションを組み合わせて、視覚的なアニメーション効果を実現する動的システムを構築します",
  "category": "javascript-advanced",
  "difficulty": 4,
  "instructions": [
    "CSS transitionとJavaScriptを連携させる",
    "動的スタイル変更（色・位置・形状）を実装する",
    "複数要素の同期アニメーションを制御する",
    "バウンス・移動・色変化・統合アニメーションを構築する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ステップ17.4b - タイマーアニメーション</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🎬 タイマーアニメーション</h1>\n        <div class=\"step-info\">\n            <strong>ステップ17.4b - タイマーとCSSアニメーションの組み合わせ</strong>\n        </div>\n        \n        <div class=\"celebration\">🎬 ✨ 🎯</div>\n        \n        <div class=\"info-box\">\n            <h3>📚 このステップで学ぶこと</h3>\n            <ul>\n                <li><strong>タイマー連動アニメーション</strong> - 時間と視覚効果の連携</li>\n                <li><strong>CSS transition</strong>とJavaScriptの組み合わせ</li>\n                <li><strong>動的なスタイル変更</strong> - 色・位置・形状の制御</li>\n                <li><strong>複数要素の同期</strong> - 複数のアニメーションを同時管理</li>\n            </ul>\n        </div>\n        \n        <div class=\"demo-section\">\n            <h3>🎬 アニメーションタイマーシステム</h3>\n            \n            <div class=\"control-panel\">\n                <button class=\"anim-btn btn-bounce\" id=\"bounce-btn\">\n                    🏀 バウンスアニメーション\n                </button>\n                \n                <button class=\"anim-btn btn-move\" id=\"move-btn\">\n                    🚀 移動アニメーション\n                </button>\n                \n                <button class=\"anim-btn btn-color\" id=\"color-btn\">\n                    🌈 色変化アニメーション\n                </button>\n                \n                <button class=\"anim-btn btn-combo\" id=\"combo-btn\">\n                    ✨ 組み合わせアニメーション\n                </button>\n            </div>\n        </div>\n        \n        <div class=\"animation-area\" id=\"animation-area\">\n            <h4 style=\"margin-top: 0; color: #2c3e50;\">🎯 アニメーション表示エリア</h4>\n            \n            <div class=\"animated-element\" id=\"bouncing-ball\">🏀</div>\n            <div class=\"animated-element\" id=\"moving-rocket\">🚀</div>\n            <div class=\"color-box\" id=\"color-box\">色変化BOX</div>\n            \n            <div class=\"text-display\" id=\"text-display\">\n                ここにアニメーション情報が表示されます\n            </div>\n        </div>\n        \n        <div class=\"stats-area\">\n            <h4>📊 アニメーション統計</h4>\n            <div class=\"stats-grid\">\n                <div class=\"stat-item\">\n                    <div>バウンス実行</div>\n                    <div class=\"stat-number\" id=\"bounce-count\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>移動実行</div>\n                    <div class=\"stat-number\" id=\"move-count\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>色変化実行</div>\n                    <div class=\"stat-number\" id=\"color-count\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>組み合わせ実行</div>\n                    <div class=\"stat-number\" id=\"combo-count\">0</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🎨 実装されているアニメーション</h3>\n            <ul>\n                <li><strong>🏀 バウンス</strong>: 3秒間、0.5秒ごとにバウンス効果</li>\n                <li><strong>🚀 移動</strong>: 4秒間、1秒ごとにランダム位置へ移動</li>\n                <li><strong>🌈 色変化</strong>: 5秒間、0.8秒ごとに背景色グラデーション変更</li>\n                <li><strong>✨ 組み合わせ</strong>: 6秒間、複数アニメーションを同時実行</li>\n            </ul>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>💡 CSS + JavaScript アニメーション</h3>\n            <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 15px 0;\">\n                <div style=\"background: #e8f5e8; padding: 15px; border-radius: 10px;\">\n                    <h4 style=\"margin-top: 0; color: #27ae60;\">CSS Transition</h4>\n                    <div class=\"code-example\">\n.element {\n    transition: all 0.5s ease;\n}\n\n.element.active {\n    transform: translateY(-20px);\n    background: #ff6b6b;\n}\n                    </div>\n                </div>\n                <div style=\"background: #e3f2fd; padding: 15px; border-radius: 10px;\">\n                    <h4 style=\"margin-top: 0; color: #2196f3;\">JavaScript制御</h4>\n                    <div class=\"code-example\">\nsetInterval(() => {\n    element.classList.toggle('active');\n}, 500);\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"instruction\">\n            <h3>🚀 全てのアニメーションを試してみよう！</h3>\n            <p>4つのアニメーションボタンをすべて試して、タイマーとCSSアニメーションの連携を体験してください。同時に複数のアニメーションを実行することも可能です。</p>\n            <p><strong>F12</strong>（MacはCmd+Option+I）で開発者ツールを開き、<strong>Console</strong>タブでアニメーション処理のログも確認しましょう！</p>\n        </div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "body {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n    max-width: 1200px;\n    margin: 40px auto;\n    padding: 20px;\n    line-height: 1.6;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: #2c3e50;\n    min-height: 100vh;\n}\n\n.container {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 40px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    color: #8e44ad;\n    text-align: center;\n    font-size: 2.5rem;\n    margin-bottom: 10px;\n}\n\n.step-info {\n    text-align: center;\n    margin-bottom: 30px;\n    opacity: 0.8;\n    color: #7f8c8d;\n}\n\n.demo-section {\n    background: linear-gradient(135deg, #8e44ad 0%, #3498db 100%);\n    color: white;\n    padding: 30px;\n    border-radius: 20px;\n    margin: 25px 0;\n}\n\n.control-panel {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));\n    gap: 15px;\n    margin: 20px 0;\n}\n\n.anim-btn {\n    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);\n    color: white;\n    border: none;\n    padding: 15px 20px;\n    font-size: 1rem;\n    border-radius: 12px;\n    cursor: pointer;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n    transition: all 0.3s ease;\n    font-weight: bold;\n}\n\n.anim-btn:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);\n}\n\n.anim-btn:active {\n    transform: translateY(0);\n}\n\n.btn-bounce { background: linear-gradient(135deg, #f39c12, #e67e22); }\n.btn-move { background: linear-gradient(135deg, #2ecc71, #27ae60); }\n.btn-color { background: linear-gradient(135deg, #9b59b6, #8e44ad); }\n.btn-combo { background: linear-gradient(135deg, #e74c3c, #c0392b); }\n\n.animation-area {\n    background: rgba(255, 255, 255, 0.95);\n    padding: 30px;\n    border-radius: 15px;\n    margin: 20px 0;\n    min-height: 250px;\n    position: relative;\n    overflow: hidden;\n    border: 3px solid #8e44ad;\n}\n\n.animated-element {\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 2rem;\n    border-radius: 50%;\n    transition: all 0.5s ease;\n    background: rgba(142, 68, 173, 0.1);\n    user-select: none;\n}\n\n#bouncing-ball {\n    left: 20px;\n    top: 50px;\n}\n\n#moving-rocket {\n    left: 100px;\n    top: 80px;\n}\n\n.bounce-animation {\n    animation: bounce 0.5s ease;\n}\n\n@keyframes bounce {\n    0%, 20%, 50%, 80%, 100% { \n        transform: translateY(0); \n    }\n    40% { \n        transform: translateY(-30px); \n        background: rgba(231, 76, 60, 0.3);\n    }\n    60% { \n        transform: translateY(-15px); \n        background: rgba(52, 152, 219, 0.3);\n    }\n}\n\n.color-box {\n    background: #f8f9fa;\n    padding: 20px;\n    border-radius: 15px;\n    margin: 20px 0;\n    text-align: center;\n    font-weight: bold;\n    color: #2c3e50;\n    font-size: 1.2rem;\n    transition: all 0.8s ease;\n    border: 2px solid #3498db;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.text-display {\n    background: rgba(52, 152, 219, 0.1);\n    padding: 20px;\n    border-radius: 10px;\n    margin: 20px 0;\n    text-align: center;\n    font-weight: bold;\n    color: #2c3e50;\n    border-left: 4px solid #3498db;\n    min-height: 24px;\n}\n\n.stats-area {\n    background: rgba(142, 68, 173, 0.1);\n    padding: 25px;\n    border-radius: 15px;\n    margin: 20px 0;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    gap: 15px;\n    margin: 15px 0;\n}\n\n.stat-item {\n    background: white;\n    padding: 15px;\n    border-radius: 10px;\n    text-align: center;\n    border: 2px solid #8e44ad;\n    transition: all 0.3s ease;\n}\n\n.stat-item:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 15px rgba(142, 68, 173, 0.2);\n}\n\n.stat-number {\n    font-size: 1.8rem;\n    font-weight: bold;\n    color: #8e44ad;\n}\n\n.info-box {\n    background: #f8f9fa;\n    padding: 25px;\n    border-radius: 15px;\n    margin: 20px 0;\n    border-left: 5px solid #8e44ad;\n}\n\n.highlight {\n    color: #e74c3c;\n    font-weight: bold;\n}\n\n.code-example {\n    background: #2c3e50;\n    color: #ecf0f1;\n    padding: 15px;\n    border-radius: 8px;\n    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n    margin: 15px 0;\n    border: 1px solid #34495e;\n    font-size: 0.9rem;\n}\n\n.instruction {\n    background: linear-gradient(135deg, #e74c3c 0%, #f39c12 100%);\n    color: white;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 20px 0;\n}\n\n.celebration {\n    font-size: 2.5rem;\n    text-align: center;\n    margin: 20px 0;\n}\n\n/* 動的に追加されるアニメーション */\n.pulse-animation {\n    animation: pulse 1s infinite;\n}\n\n@keyframes pulse {\n    0% { \n        transform: scale(1);\n        opacity: 1;\n    }\n    50% { \n        transform: scale(1.1);\n        opacity: 0.8;\n    }\n    100% { \n        transform: scale(1);\n        opacity: 1;\n    }\n}\n\n.rotate-animation {\n    animation: rotate 2s linear infinite;\n}\n\n@keyframes rotate {\n    from { \n        transform: rotate(0deg);\n    }\n    to { \n        transform: rotate(360deg);\n    }\n}\n\n/* レスポンシブ対応 */\n@media (max-width: 768px) {\n    .control-panel {\n        grid-template-columns: 1fr;\n    }\n    \n    .stats-grid {\n        grid-template-columns: repeat(2, 1fr);\n    }\n    \n    .animated-element {\n        width: 40px;\n        height: 40px;\n        font-size: 1.5rem;\n    }\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "console.log(\"🎬 ステップ17.4b: タイマーアニメーションを開始します！\");\nconsole.log(\"===============================================\");\n\n// 統計用変数\nlet bounceCount = 0;\nlet moveCount = 0;  \nlet colorCount = 0;\nlet comboCount = 0;\n\n// アニメーション制御用変数\nlet bounceInterval = null;\nlet moveInterval = null;\nlet colorInterval = null;\nlet comboInterval = null;\n\n// DOM要素の取得\nconst bouncingBall = document.getElementById(\"bouncing-ball\");\nconst movingRocket = document.getElementById(\"moving-rocket\");\nconst colorBox = document.getElementById(\"color-box\");\nconst textDisplay = document.getElementById(\"text-display\");\nconst animationArea = document.getElementById(\"animation-area\");\n\nconst bounceBtn = document.getElementById(\"bounce-btn\");\nconst moveBtn = document.getElementById(\"move-btn\");\nconst colorBtn = document.getElementById(\"color-btn\");\nconst comboBtn = document.getElementById(\"combo-btn\");\n\n// 統計更新関数\nfunction updateStats() {\n    document.getElementById(\"bounce-count\").textContent = bounceCount;\n    document.getElementById(\"move-count\").textContent = moveCount;\n    document.getElementById(\"color-count\").textContent = colorCount;\n    document.getElementById(\"combo-count\").textContent = comboCount;\n}\n\n// バウンスアニメーション\nbounceBtn.addEventListener(\"click\", function() {\n    console.log(\"🏀 バウンスアニメーション開始\");\n    \n    // 既存のアニメーションがあれば停止\n    if (bounceInterval) {\n        clearInterval(bounceInterval);\n    }\n    \n    bounceCount++;\n    textDisplay.textContent = \"🏀 バウンスアニメーション実行中... (3秒間)\";\n    \n    let bounceStep = 0;\n    const maxSteps = 6; // 3秒間 = 0.5秒 × 6回\n    \n    bouncingBall.classList.remove(\"bounce-animation\");\n    \n    bounceInterval = setInterval(() => {\n        bounceStep++;\n        \n        // バウンスクラスを交互にオン/オフ\n        bouncingBall.classList.toggle(\"bounce-animation\");\n        \n        console.log(`バウンス ${bounceStep}回目 (${bounceStep * 0.5}秒経過)`);\n        \n        if (bounceStep >= maxSteps) {\n            clearInterval(bounceInterval);\n            bounceInterval = null;\n            bouncingBall.classList.remove(\"bounce-animation\");\n            \n            textDisplay.textContent = \"🏀 バウンスアニメーション完了！\";\n            console.log(\"✅ バウンスアニメーション完了\");\n            \n            // 2秒後にメッセージをクリア\n            setTimeout(() => {\n                textDisplay.textContent = \"ここにアニメーション情報が表示されます\";\n            }, 2000);\n        }\n    }, 500); // 0.5秒ごと\n    \n    updateStats();\n});\n\n// 移動アニメーション  \nmoveBtn.addEventListener(\"click\", function() {\n    console.log(\"🚀 移動アニメーション開始\");\n    \n    // 既存のアニメーションがあれば停止\n    if (moveInterval) {\n        clearInterval(moveInterval);\n    }\n    \n    moveCount++;\n    textDisplay.textContent = \"🚀 移動アニメーション実行中... (4秒間)\";\n    \n    let moveStep = 0;\n    const maxMoves = 4; // 4秒間 = 1秒 × 4回\n    \n    // 初期位置に戻す\n    movingRocket.style.left = \"20px\";\n    movingRocket.style.top = \"80px\";\n    \n    moveInterval = setInterval(() => {\n        moveStep++;\n        \n        // ランダムな位置を計算\n        const areaWidth = animationArea.offsetWidth - 80;  // パディングを考慮\n        const areaHeight = 150; // アニメーションエリアの高さを制限\n        \n        const randomX = Math.floor(Math.random() * areaWidth) + 20;\n        const randomY = Math.floor(Math.random() * areaHeight) + 80;\n        \n        // 移動アニメーション\n        movingRocket.style.left = randomX + \"px\";\n        movingRocket.style.top = randomY + \"px\";\n        \n        console.log(`移動 ${moveStep}回目: 位置(${randomX}, ${randomY})`);\n        \n        if (moveStep >= maxMoves) {\n            clearInterval(moveInterval);\n            moveInterval = null;\n            \n            textDisplay.textContent = \"🚀 移動アニメーション完了！\";\n            console.log(\"✅ 移動アニメーション完了\");\n            \n            // 2秒後にメッセージをクリア\n            setTimeout(() => {\n                textDisplay.textContent = \"ここにアニメーション情報が表示されます\";\n            }, 2000);\n        }\n    }, 1000); // 1秒ごと\n    \n    updateStats();\n});\n\n// 色変化アニメーション\ncolorBtn.addEventListener(\"click\", function() {\n    console.log(\"🌈 色変化アニメーション開始\");\n    \n    // 既存のアニメーションがあれば停止\n    if (colorInterval) {\n        clearInterval(colorInterval);\n    }\n    \n    colorCount++;\n    textDisplay.textContent = \"🌈 色変化アニメーション実行中... (5秒間)\";\n    \n    let colorStep = 0;\n    const maxColors = 6; // 5秒間 = 0.8秒 × 6回\n    \n    const colors = [\n        'linear-gradient(135deg, #ff6b6b, #4ecdc4)',\n        'linear-gradient(135deg, #667eea, #764ba2)',\n        'linear-gradient(135deg, #fa709a, #fee140)',\n        'linear-gradient(135deg, #a8edea, #fed6e3)',\n        'linear-gradient(135deg, #ff9a9e, #fecfef)',\n        'linear-gradient(135deg, #89f7fe, #66a6ff)'\n    ];\n    \n    colorInterval = setInterval(() => {\n        colorStep++;\n        \n        const currentColor = colors[colorStep % colors.length];\n        colorBox.style.background = currentColor;\n        \n        console.log(`色変化 ${colorStep}回目: ${currentColor.slice(0, 50)}...`);\n        \n        if (colorStep >= maxColors) {\n            clearInterval(colorInterval);\n            colorInterval = null;\n            \n            // 元の色に戻す\n            colorBox.style.background = '#f8f9fa';\n            \n            textDisplay.textContent = \"🌈 色変化アニメーション完了！\";\n            console.log(\"✅ 色変化アニメーション完了\");\n            \n            // 2秒後にメッセージをクリア\n            setTimeout(() => {\n                textDisplay.textContent = \"ここにアニメーション情報が表示されます\";\n            }, 2000);\n        }\n    }, 800); // 0.8秒ごと\n    \n    updateStats();\n});\n\n// 組み合わせアニメーション\ncomboBtn.addEventListener(\"click\", function() {\n    console.log(\"✨ 組み合わせアニメーション開始\");\n    \n    // 既存のアニメーションがあれば停止\n    if (comboInterval) {\n        clearInterval(comboInterval);\n    }\n    \n    comboCount++;\n    textDisplay.textContent = \"✨ 組み合わせアニメーション実行中... (6秒間)\";\n    \n    let comboStep = 0;\n    const maxComboSteps = 10; // 6秒間 = 0.6秒 × 10回\n    \n    const messages = [\n        \"✨ 魔法の効果が発動！\",\n        \"🌟 キラキラ効果中！\", \n        \"🎭 変身エフェクト！\",\n        \"🎪 サーカスショー開始！\",\n        \"🎨 アートが生まれる！\",\n        \"🎵 リズムに合わせて！\",\n        \"🌈 虹色の世界！\",\n        \"⭐ 星空のダンス！\",\n        \"🎯 完璧なハーモニー！\",\n        \"🎉 グランドフィナーレ！\"\n    ];\n    \n    const comboColors = [\n        'linear-gradient(135deg, #ff416c, #ff4b2b)',\n        'linear-gradient(135deg, #12c2e9, #c471ed, #f64f59)',\n        'linear-gradient(135deg, #f093fb, #f5576c)',\n        'linear-gradient(135deg, #4facfe, #00f2fe)',\n        'linear-gradient(135deg, #43e97b, #38f9d7)',\n        'linear-gradient(135deg, #fa709a, #fee140)'\n    ];\n    \n    // 初期位置設定\n    bouncingBall.classList.remove(\"bounce-animation\");\n    movingRocket.style.left = \"20px\";\n    movingRocket.style.top = \"80px\";\n    colorBox.style.background = '#f8f9fa';\n    \n    comboInterval = setInterval(() => {\n        comboStep++;\n        \n        // 複数のアニメーションを同時実行\n        \n        // 1. バウンス効果\n        bouncingBall.classList.toggle(\"bounce-animation\");\n        \n        // 2. 移動効果\n        const areaWidth = animationArea.offsetWidth - 80;\n        const areaHeight = 120;\n        const randomX = Math.floor(Math.random() * areaWidth) + 20;\n        const randomY = Math.floor(Math.random() * areaHeight) + 80;\n        movingRocket.style.left = randomX + \"px\";\n        movingRocket.style.top = randomY + \"px\";\n        \n        // 3. 色変化効果\n        const currentColor = comboColors[comboStep % comboColors.length];\n        colorBox.style.background = currentColor;\n        \n        // 4. メッセージ変化\n        textDisplay.textContent = messages[comboStep - 1] || \"✨ 組み合わせアニメーション実行中...\";\n        \n        console.log(`組み合わせ ${comboStep}回目: ${messages[comboStep - 1]} 位置(${randomX}, ${randomY})`);\n        \n        if (comboStep >= maxComboSteps) {\n            clearInterval(comboInterval);\n            comboInterval = null;\n            \n            // 全て初期状態に戻す\n            bouncingBall.classList.remove(\"bounce-animation\");\n            movingRocket.style.left = \"20px\";  \n            movingRocket.style.top = \"80px\";\n            colorBox.style.background = '#f8f9fa';\n            \n            textDisplay.textContent = \"🎉 組み合わせアニメーション完了！全ての効果が同時に実行されました\";\n            console.log(\"✅ 組み合わせアニメーション完了\");\n            \n            // 3秒後にメッセージをクリア\n            setTimeout(() => {\n                textDisplay.textContent = \"ここにアニメーション情報が表示されます\";\n            }, 3000);\n        }\n    }, 600); // 0.6秒ごと\n    \n    updateStats();\n});\n\n// 初期化処理\nconsole.log(\"✅ タイマーアニメーションシステムが初期化されました！\");\nconsole.log(\"🎬 アニメーション機能:\");\nconsole.log(\"  - バウンス: CSS transition + classList toggle\");\nconsole.log(\"  - 移動: スタイル直接変更 + transition効果\");\nconsole.log(\"  - 色変化: background変更 + グラデーション\");\nconsole.log(\"  - 組み合わせ: 複数アニメーションの同期実行\");\nconsole.log(\"💡 各ボタンをクリックして、タイマー連動アニメーションを体験してください！\");\n\n// 初期統計表示\nupdateStats();\n\n// ウェルカムアニメーション（3秒後）\nsetTimeout(() => {\n    console.log(\"🎉 ウェルカム！タイマーアニメーションの世界へようこそ\");\n    textDisplay.textContent = \"🎉 ウェルカム！各ボタンでアニメーションをお試しください\";\n    \n    setTimeout(() => {\n        textDisplay.textContent = \"ここにアニメーション情報が表示されます\";\n    }, 3000);\n}, 3000);"
    }
  },
  "expectedResult": {
    "bounceAnimation": "要素が上下にバウンスアニメーションする",
    "moveAnimation": "要素がランダムな位置に滑らかに移動する",
    "colorAnimation": "背景色がグラデーションで変化する",
    "comboAnimation": "複数のアニメーション効果が同時実行される",
    "behavior": "4つのアニメーションパターンが統計と共に動作する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}