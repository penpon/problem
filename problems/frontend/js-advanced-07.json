{
  "id": "js-advanced-07",
  "title": "タイマー基礎",
  "description": "setTimeout と setInterval の基本概念と操作を学習し、JavaScript の時間制御機能を習得します",
  "category": "javascript-advanced",
  "difficulty": 3,
  "instructions": [
    "setTimeout()で指定時間後の単発実行を実装する",
    "setInterval()で繰り返し実行を実装する",
    "clearTimeout()/clearInterval()でタイマーを停止する",
    "基本的なタイマー管理（開始・停止・リセット）を実装する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ステップ17.4a - タイマー基礎</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>⏰ タイマー基礎</h1>\n        <div class=\"step-info\">\n            <strong>ステップ17.4a - setTimeout と setInterval の基本操作</strong>\n        </div>\n        \n        <div class=\"celebration\">⏰ ⌛ 🕐</div>\n        \n        <div class=\"info-box\">\n            <h3>📚 このステップで学ぶこと</h3>\n            <ul>\n                <li><strong>setTimeout</strong> - 指定時間後に1回だけ実行</li>\n                <li><strong>setInterval</strong> - 指定間隔で繰り返し実行</li>\n                <li><strong>clearTimeout/clearInterval</strong> - タイマーの停止</li>\n                <li><strong>基本的なタイマー管理</strong> - 開始・停止の概念</li>\n            </ul>\n        </div>\n        \n        <div class=\"demo-section\">\n            <h3>⏰ 基本タイマー操作</h3>\n            \n            <div class=\"timer-display\">\n                <div class=\"timer-main\" id=\"timer-display\">00:00:00</div>\n                <div class=\"timer-status\" id=\"timer-status\">タイマー待機中</div>\n            </div>\n            \n            <div class=\"button-grid\">\n                <button class=\"timer-btn btn-start\" id=\"start-btn\">\n                    ▶️ タイマー開始\n                </button>\n                \n                <button class=\"timer-btn btn-stop\" id=\"stop-btn\" disabled>\n                    ⏸️ タイマー停止\n                </button>\n                \n                <button class=\"timer-btn btn-reset\" id=\"reset-btn\">\n                    🔄 リセット\n                </button>\n                \n                <button class=\"timer-btn btn-delay\" id=\"delay-btn\">\n                    ⏳ 3秒遅延実行\n                </button>\n            </div>\n        </div>\n        \n        <div class=\"demo-area\" id=\"demo-area\">\n            <h4 style=\"margin-top: 0; color: #3498db;\">🎯 動作確認エリア</h4>\n            <div class=\"message-display\" id=\"message-display\">\n                ここにタイマーの実行結果が表示されます\n            </div>\n            <div class=\"countdown-display\" id=\"countdown-display\">\n                カウントダウン: --\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>⏰ setTimeout と setInterval の違い</h3>\n            <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 15px 0;\">\n                <div style=\"background: #e8f5e8; padding: 15px; border-radius: 10px;\">\n                    <h4 style=\"margin-top: 0; color: #27ae60;\">setTimeout（単発実行）</h4>\n                    <div class=\"code-example\">\nsetTimeout(() => {\n    console.log(\"3秒後に実行\");\n}, 3000);\n                    </div>\n                    <p style=\"margin-bottom: 0;\">指定時間後に<strong>1回だけ</strong>実行</p>\n                </div>\n                <div style=\"background: #e3f2fd; padding: 15px; border-radius: 10px;\">\n                    <h4 style=\"margin-top: 0; color: #2196f3;\">setInterval（繰り返し実行）</h4>\n                    <div class=\"code-example\">\nsetInterval(() => {\n    console.log(\"1秒ごとに実行\");\n}, 1000);\n                    </div>\n                    <p style=\"margin-bottom: 0;\">指定間隔で<strong>繰り返し</strong>実行</p>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🛠️ 実装されている機能</h3>\n            <ul>\n                <li><strong>▶️ タイマー開始</strong>: setIntervalで1秒ごとに時間を更新</li>\n                <li><strong>⏸️ タイマー停止</strong>: clearIntervalでタイマーを停止</li>\n                <li><strong>🔄 リセット</strong>: タイマーを00:00:00に戻す</li>\n                <li><strong>⏳ 3秒遅延実行</strong>: setTimeoutで3秒後にメッセージ表示</li>\n            </ul>\n        </div>\n        \n        <div class=\"instruction\">\n            <h3>🚀 全ての機能を試してみよう！</h3>\n            <p>4つのボタンをすべて試して、setTimeoutとsetIntervalの違いを体験してください。特に「3秒遅延実行」ボタンは何回でも押すことができます。</p>\n            <p><strong>F12</strong>（MacはCmd+Option+I）で開発者ツールを開き、<strong>Console</strong>タブでタイマー処理のログも確認しましょう！</p>\n        </div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "body {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n    max-width: 1000px;\n    margin: 40px auto;\n    padding: 20px;\n    line-height: 1.6;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: #2c3e50;\n    min-height: 100vh;\n}\n\n.container {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 40px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    color: #3498db;\n    text-align: center;\n    font-size: 2.5rem;\n    margin-bottom: 10px;\n}\n\n.step-info {\n    text-align: center;\n    margin-bottom: 30px;\n    opacity: 0.8;\n    color: #7f8c8d;\n}\n\n.demo-section {\n    background: linear-gradient(135deg, #3498db 0%, #2c3e50 100%);\n    color: white;\n    padding: 30px;\n    border-radius: 20px;\n    margin: 25px 0;\n}\n\n.timer-display {\n    background: rgba(255, 255, 255, 0.15);\n    padding: 30px;\n    border-radius: 15px;\n    margin: 20px 0;\n    text-align: center;\n}\n\n.timer-main {\n    font-size: 3rem;\n    font-weight: bold;\n    color: #FFE135;\n    margin: 20px 0;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n}\n\n.timer-status {\n    font-size: 1.2rem;\n    margin: 15px 0;\n    padding: 10px;\n    background: rgba(255, 255, 255, 0.2);\n    border-radius: 10px;\n}\n\n.button-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 15px;\n    margin: 25px 0;\n}\n\n.timer-btn {\n    background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);\n    color: white;\n    border: none;\n    padding: 15px 20px;\n    font-size: 1rem;\n    border-radius: 12px;\n    cursor: pointer;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n    transition: all 0.3s ease;\n    font-weight: bold;\n}\n\n.timer-btn:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);\n}\n\n.timer-btn:active {\n    transform: translateY(0);\n}\n\n.timer-btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n}\n\n.btn-start { background: linear-gradient(135deg, #2ecc71, #27ae60); }\n.btn-stop { background: linear-gradient(135deg, #e74c3c, #c0392b); }\n.btn-reset { background: linear-gradient(135deg, #f39c12, #e67e22); }\n.btn-delay { background: linear-gradient(135deg, #9b59b6, #8e44ad); }\n\n.demo-area {\n    background: rgba(52, 152, 219, 0.1);\n    color: #2c3e50;\n    padding: 25px;\n    border-radius: 15px;\n    margin: 20px 0;\n    border: 2px solid #3498db;\n}\n\n.message-display {\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 15px 0;\n    border-left: 4px solid #3498db;\n    font-weight: bold;\n    min-height: 24px;\n}\n\n.countdown-display {\n    background: rgba(155, 89, 182, 0.1);\n    color: #8e44ad;\n    padding: 15px;\n    border-radius: 10px;\n    text-align: center;\n    font-size: 1.2rem;\n    font-weight: bold;\n    margin: 15px 0;\n    border: 2px solid #9b59b6;\n}\n\n.info-box {\n    background: #f8f9fa;\n    padding: 25px;\n    border-radius: 15px;\n    margin: 20px 0;\n    border-left: 5px solid #3498db;\n}\n\n.highlight {\n    color: #e74c3c;\n    font-weight: bold;\n}\n\n.code-example {\n    background: #2c3e50;\n    color: #ecf0f1;\n    padding: 15px;\n    border-radius: 8px;\n    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n    margin: 15px 0;\n    border: 1px solid #34495e;\n    font-size: 0.9rem;\n}\n\n.instruction {\n    background: linear-gradient(135deg, #16a085 0%, #f4d03f 100%);\n    color: white;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 20px 0;\n}\n\n.celebration {\n    font-size: 2.5rem;\n    text-align: center;\n    margin: 20px 0;\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "console.log(\"⏰ ステップ17.4a: タイマー基礎を開始します！\");\nconsole.log(\"==========================================\");\n\n// タイマー関連変数\nlet startTime = 0;\nlet elapsedTime = 0;\nlet timerInterval = null;\nlet isRunning = false;\n\n// DOM要素の取得\nconst timerDisplay = document.getElementById(\"timer-display\");\nconst timerStatus = document.getElementById(\"timer-status\");\nconst messageDisplay = document.getElementById(\"message-display\");\nconst countdownDisplay = document.getElementById(\"countdown-display\");\n\nconst startBtn = document.getElementById(\"start-btn\");\nconst stopBtn = document.getElementById(\"stop-btn\");\nconst resetBtn = document.getElementById(\"reset-btn\");\nconst delayBtn = document.getElementById(\"delay-btn\");\n\n// 時間フォーマット関数\nfunction formatTime(milliseconds) {\n    const totalSeconds = Math.floor(milliseconds / 1000);\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    const seconds = totalSeconds % 60;\n    \n    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n}\n\n// タイマー表示更新関数\nfunction updateTimerDisplay() {\n    if (isRunning) {\n        elapsedTime = Date.now() - startTime;\n    }\n    timerDisplay.textContent = formatTime(elapsedTime);\n}\n\n// タイマー開始ボタン\nstartBtn.addEventListener(\"click\", function() {\n    console.log(\"▶️ タイマー開始\");\n    \n    if (!isRunning) {\n        startTime = Date.now() - elapsedTime; // 停止からの再開に対応\n        isRunning = true;\n        \n        // setInterval で1秒ごとに更新\n        timerInterval = setInterval(updateTimerDisplay, 1000);\n        \n        timerStatus.textContent = \"⏰ タイマー実行中...\";\n        messageDisplay.textContent = \"setInterval が1秒ごとに実行されています\";\n        \n        startBtn.disabled = true;\n        stopBtn.disabled = false;\n        \n        console.log(\"✅ setInterval でタイマーを開始しました\");\n    }\n});\n\n// タイマー停止ボタン\nstopBtn.addEventListener(\"click\", function() {\n    console.log(\"⏸️ タイマー停止\");\n    \n    if (isRunning) {\n        isRunning = false;\n        \n        // clearInterval でタイマー停止\n        clearInterval(timerInterval);\n        timerInterval = null;\n        \n        timerStatus.textContent = \"⏸️ タイマー停止中\";\n        messageDisplay.textContent = \"clearInterval でタイマーを停止しました\";\n        \n        startBtn.disabled = false;\n        stopBtn.disabled = true;\n        \n        console.log(\"⏹️ clearInterval でタイマーを停止しました\");\n    }\n});\n\n// リセットボタン\nresetBtn.addEventListener(\"click\", function() {\n    console.log(\"🔄 タイマーリセット\");\n    \n    // タイマーが動いている場合は停止\n    if (timerInterval) {\n        clearInterval(timerInterval);\n        timerInterval = null;\n    }\n    \n    // 変数をリセット\n    startTime = 0;\n    elapsedTime = 0;\n    isRunning = false;\n    \n    // 表示をリセット\n    timerDisplay.textContent = \"00:00:00\";\n    timerStatus.textContent = \"🔄 タイマーをリセットしました\";\n    messageDisplay.textContent = \"タイマーが00:00:00にリセットされました\";\n    \n    startBtn.disabled = false;\n    stopBtn.disabled = true;\n    \n    console.log(\"🔄 タイマーをリセットしました\");\n});\n\n// 3秒遅延実行ボタン\ndelayBtn.addEventListener(\"click\", function() {\n    console.log(\"⏳ 3秒遅延実行を開始\");\n    \n    messageDisplay.textContent = \"3秒後にメッセージが表示されます...\";\n    \n    // カウントダウン表示\n    let countdown = 3;\n    countdownDisplay.textContent = `カウントダウン: ${countdown}秒`;\n    \n    const countdownInterval = setInterval(() => {\n        countdown--;\n        countdownDisplay.textContent = `カウントダウン: ${countdown}秒`;\n        \n        if (countdown <= 0) {\n            clearInterval(countdownInterval);\n            countdownDisplay.textContent = \"カウントダウン: 完了！\";\n        }\n    }, 1000);\n    \n    // setTimeout で3秒後に実行\n    setTimeout(() => {\n        messageDisplay.textContent = \"🎉 3秒経過しました！setTimeout で実行されました\";\n        countdownDisplay.textContent = \"カウントダウン: --\";\n        \n        console.log(\"🎉 setTimeout による3秒遅延実行が完了しました\");\n        \n        // 2秒後にメッセージをクリア\n        setTimeout(() => {\n            messageDisplay.textContent = \"ここにタイマーの実行結果が表示されます\";\n        }, 2000);\n    }, 3000);\n});\n\n// 初期化処理\nconsole.log(\"✅ タイマー基礎システムが初期化されました！\");\nconsole.log(\"📚 学習内容:\");\nconsole.log(\"  - setTimeout: 指定時間後に1回実行\");\nconsole.log(\"  - setInterval: 指定間隔で繰り返し実行\");\nconsole.log(\"  - clearTimeout: setTimeoutの停止\");\nconsole.log(\"  - clearInterval: setIntervalの停止\");\nconsole.log(\"💡 すべてのボタンを試して、違いを体験してください！\");\n\n// デモ用のsetTimeout（5秒後にコンソールメッセージ）\nsetTimeout(() => {\n    console.log(\"🎉 このメッセージは5秒後に表示されました（初期化時のsetTimeoutデモ）\");\n}, 5000);"
    }
  },
  "expectedResult": {
    "timerControl": "開始・停止・リセットボタンでタイマー制御ができる",
    "timeFormat": "時:分:秒の形式で時間が表示される",
    "delayedExecution": "3秒遅延実行でカウントダウンと完了メッセージが表示される",
    "behavior": "基本タイマー機能がすべて正しく動作する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}