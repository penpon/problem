{
  "id": "js-basic-06",
  "title": "ボタンクリック",
  "description": "ボタンのクリックイベントを処理し、JavaScriptでインタラクティブな動作を実装する方法を学習します",
  "category": "javascript-basics",
  "difficulty": 2,
  "instructions": [
    "ボタン要素にclickイベントリスナーを追加する",
    "onclick属性とaddEventListener()の使い方を理解する",
    "クリック時に特定の処理を実行する",
    "複数のボタンでそれぞれ異なる動作を実装する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ボタンクリックイベント</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>ボタンクリックイベントの実装</h1>\n        \n        <div class=\"demo-section\">\n            <div class=\"message-display\" id=\"message-display\">\n                ボタンをクリックしてください\n            </div>\n            \n            <button class=\"click-button\" id=\"hello-button\">\n                Hello ボタン\n            </button>\n            \n            <button class=\"click-button\" id=\"color-button\">\n                色変更ボタン\n            </button>\n            \n            <button class=\"click-button\" id=\"time-button\">\n                時間表示ボタン\n            </button>\n        </div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ステップ15.5 - 最初のクリック</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🖱️ 最初のクリック</h1>\n        <div class=\"step-info\">\n            <strong>ステップ15.5 - インタラクティブWebページの誕生</strong>\n        </div>\n        \n        <div class=\"celebration\">🎉 🖱️ ✨</div>\n        \n        <div class=\"info-box\">\n            <h3>📚 このステップで学ぶこと</h3>\n            <ul>\n                <li><strong>ボタンクリック</strong>でJavaScript関数を実行する</li>\n                <li><strong>addEventListener</strong>でイベントを設定する</li>\n                <li>ユーザーの操作に<strong>応答</strong>するWebページの作成</li>\n            </ul>\n        </div>\n        \n        <div class=\"demo-section\">\n            <h3>🎪 インタラクティブデモ</h3>\n            <p>下のボタンをクリックして、JavaScriptの魔法を体験しましょう！</p>\n            \n            <div class=\"message-display\" id=\"message-display\">\n                👋 ボタンをクリックしてみてください！\n            </div>\n            \n            <button class=\"click-button\" id=\"hello-button\">\n                🌟 Hello ボタン 🌟\n            </button>\n            \n            <button class=\"click-button\" id=\"color-button\">\n                🎨 色変更ボタン 🎨\n            </button>\n            \n            <button class=\"click-button\" id=\"time-button\">\n                🕐 時間表示ボタン 🕐\n            </button>\n            \n            <div class=\"stats\">\n                <div class=\"stat-item\">\n                    <div>クリック回数</div>\n                    <div id=\"click-count\" style=\"font-size: 2rem; font-weight: bold; color: #feca57;\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>最後にクリックしたボタン</div>\n                    <div id=\"last-button\" style=\"font-size: 1.2rem; font-weight: bold;\">まだありません</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🎯 addEventListener とは？</h3>\n            <p><strong>addEventListener</strong>は、HTML要素に「イベント」を設定するJavaScriptの機能です。</p>\n            \n            <div class=\"code-example\">\n// ボタンを取得\nlet button = document.getElementById(\"my-button\");\n\n// クリック時の動作を設定\nbutton.addEventListener(\"click\", function() {\n    alert(\"ボタンがクリックされました！\");\n});\n            </div>\n            \n            <p>この設定により、ボタンがクリックされた時に指定した処理が実行されます。</p>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>👀 実際のコードを見てみよう</h3>\n            <p>このページで使用されているコード（一部抜粋）：</p>\n            <div class=\"code-example\">\n// Helloボタンの処理\nlet helloButton = document.getElementById(\"hello-button\");\nhelloButton.addEventListener(\"click\", function() {\n    let display = document.getElementById(\"message-display\");\n    display.textContent = \"🌟 こんにちは！ JavaScriptの世界へようこそ！\";\n});\n\n// 色変更ボタンの処理\nlet colorButton = document.getElementById(\"color-button\");\ncolorButton.addEventListener(\"click\", function() {\n    let display = document.getElementById(\"message-display\");\n    display.textContent = \"🎨 色が変わりました！\";\n    display.style.background = \"linear-gradient(135deg, #ff6b6b, #4ecdc4)\";\n});\n            </div>\n        </div>\n        \n        <div class=\"instruction\">\n            <h3>🚀 体験してみよう！</h3>\n            <p>上の3つのボタンをそれぞれクリックして、どんな変化が起こるか確認してみてください。</p>\n            <p><strong>F12</strong>（MacはCmd+Option+I）で開発者ツールを開き、<strong>Console</strong>タブでクリック時のメッセージも確認できます！</p>\n        </div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n.demo-section {\n    background: #e8f4f8;\n    padding: 20px;\n    border-radius: 8px;\n    text-align: center;\n    margin: 20px 0;\n}\n\n.message-display {\n    background: white;\n    padding: 15px;\n    border-radius: 5px;\n    margin: 15px 0;\n    font-size: 1.2em;\n    min-height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.click-button {\n    background: #007bff;\n    color: white;\n    border: none;\n    padding: 12px 24px;\n    border-radius: 5px;\n    cursor: pointer;\n    margin: 5px;\n    font-size: 1em;\n}\n\n.click-button:hover {\n    background: #0056b3;\n}",
      "expected": "body {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n    max-width: 900px;\n    margin: 40px auto;\n    padding: 20px;\n    line-height: 1.6;\n    background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);\n    color: #2c3e50;\n    min-height: 100vh;\n}\n\n.container {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 40px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    color: #e74c3c;\n    text-align: center;\n    font-size: 2.5rem;\n    margin-bottom: 10px;\n}\n\n.step-info {\n    text-align: center;\n    margin-bottom: 30px;\n    opacity: 0.8;\n    color: #7f8c8d;\n}\n\n.demo-section {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    padding: 30px;\n    border-radius: 15px;\n    margin: 25px 0;\n    text-align: center;\n}\n\n.click-button {\n    background: linear-gradient(135deg, #ff6b6b 0%, #feca57 100%);\n    color: white;\n    border: none;\n    padding: 20px 40px;\n    font-size: 1.3rem;\n    border-radius: 50px;\n    cursor: pointer;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n    transition: all 0.3s ease;\n    margin: 10px;\n    font-weight: bold;\n}\n\n.click-button:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);\n}\n\n.click-button:active {\n    transform: translateY(0);\n}\n\n.message-display {\n    background: rgba(255, 255, 255, 0.2);\n    padding: 20px;\n    border-radius: 10px;\n    margin: 20px 0;\n    font-size: 1.2rem;\n    font-weight: bold;\n    min-height: 60px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n}\n\n.info-box {\n    background: #f8f9fa;\n    padding: 25px;\n    border-radius: 15px;\n    margin: 20px 0;\n    border-left: 5px solid #3498db;\n}\n\n.highlight {\n    color: #e74c3c;\n    font-weight: bold;\n}\n\n.code-example {\n    background: #2c3e50;\n    color: #ecf0f1;\n    padding: 15px;\n    border-radius: 8px;\n    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n    margin: 15px 0;\n    border: 1px solid #34495e;\n}\n\n.instruction {\n    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n    color: white;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 20px 0;\n}\n\n.celebration {\n    font-size: 3rem;\n    text-align: center;\n    margin: 20px 0;\n}\n\n.stats {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 15px;\n    margin: 20px 0;\n}\n\n.stat-item {\n    background: rgba(255, 255, 255, 0.1);\n    padding: 15px;\n    border-radius: 10px;\n    text-align: center;\n}"
    },
    "js": {
      "template": "// ボタンクリックイベントの基本実装\n\n// 1. Helloボタンの処理\nlet helloButton = document.getElementById('hello-button');\nhelloButton.addEventListener('click', function() {\n    let display = document.getElementById('message-display');\n    display.textContent = 'Hello! ボタンがクリックされました！';\n});\n\n// 2. 色変更ボタンの処理\nlet colorButton = document.getElementById('color-button');\ncolorButton.addEventListener('click', function() {\n    let display = document.getElementById('message-display');\n    display.textContent = '色が変わりました！';\n    display.style.background = '#ffeb3b';\n});\n\n// 3. 時間表示ボタンの処理\nlet timeButton = document.getElementById('time-button');\ntimeButton.addEventListener('click', function() {\n    let display = document.getElementById('message-display');\n    let now = new Date();\n    let timeString = now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds();\n    display.textContent = '現在時刻: ' + timeString;\n});",
      "expected": "console.log(\"🖱️ ステップ15.5: 最初のクリック体験を開始します！\");\nconsole.log(\"=====================================\");\n\n// クリック回数をカウントする変数\nlet totalClicks = 0;\n\n// 1. Helloボタンの処理\nlet helloButton = document.getElementById(\"hello-button\");\nhelloButton.addEventListener(\"click\", function() {\n    console.log(\"🌟 Helloボタンがクリックされました！\");\n    \n    let display = document.getElementById(\"message-display\");\n    display.textContent = \"🌟 こんにちは！ JavaScriptの世界へようこそ！\";\n    display.style.background = \"linear-gradient(135deg, #667eea, #764ba2)\";\n    \n    updateClickStats(\"Helloボタン\");\n});\n\n// 2. 色変更ボタンの処理\nlet colorButton = document.getElementById(\"color-button\");\ncolorButton.addEventListener(\"click\", function() {\n    console.log(\"🎨 色変更ボタンがクリックされました！\");\n    \n    let display = document.getElementById(\"message-display\");\n    display.textContent = \"🎨 カラフルに変身しました！\";\n    display.style.background = \"linear-gradient(135deg, #ff6b6b, #4ecdc4)\";\n    \n    updateClickStats(\"色変更ボタン\");\n});\n\n// 3. 時間表示ボタンの処理\nlet timeButton = document.getElementById(\"time-button\");\ntimeButton.addEventListener(\"click\", function() {\n    console.log(\"🕐 時間表示ボタンがクリックされました！\");\n    \n    let display = document.getElementById(\"message-display\");\n    let now = new Date();\n    let timeString = now.getHours() + \":\" + \n                   String(now.getMinutes()).padStart(2, '0') + \":\" + \n                   String(now.getSeconds()).padStart(2, '0');\n    \n    display.textContent = \"🕐 現在時刻: \" + timeString;\n    display.style.background = \"linear-gradient(135deg, #fa709a, #fee140)\";\n    \n    updateClickStats(\"時間表示ボタン\");\n});\n\n// クリック統計を更新する関数\nfunction updateClickStats(buttonName) {\n    totalClicks++;\n    document.getElementById(\"click-count\").textContent = totalClicks;\n    document.getElementById(\"last-button\").textContent = buttonName;\n    \n    console.log(\"📊 合計クリック数: \" + totalClicks);\n    console.log(\"📊 最後にクリック: \" + buttonName);\n}\n\nconsole.log(\"✅ すべてのボタンイベントが設定されました！\");\nconsole.log(\"💡 ボタンをクリックして、インタラクティブ機能を体験してください！\");"
    }
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "button-elements",
      "name": "ボタン要素",
      "type": "html",
      "message": "button要素が複数必要です"
    },
    {
      "id": "event-listeners",
      "name": "イベントリスナー",
      "type": "js",
      "message": "addEventListenerでイベント処理を追加してください"
    },
    {
      "id": "dom-manipulation",
      "name": "DOM操作",
      "type": "js",
      "message": "getElementByIdでDOM要素を取得し操作してください"
    }
  ],
  "expectedResult": {
    "clickHandling": "ボタンクリック時に指定した処理が実行される",
    "multipleButtons": "複数のボタンがそれぞれ異なる動作をする",
    "behavior": "クリックイベントが正しく処理される"
  }
}