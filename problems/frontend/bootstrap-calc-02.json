{
  "id": "bootstrap-calc-02",
  "title": "はじめての計算機（足し算のみ）",
  "description": "2つの数字を足し算する簡単な計算機を作り、inputタグからの数値取得とJavaScriptでの計算処理を学習します",
  "category": "practical-projects",
  "difficulty": 2,
  "instructions": [
    "inputタグから数字を取得する方法を学ぶ",
    "JavaScriptで足し算を実行する",
    "計算結果を画面に表示する",
    "Number()を使った文字から数字への変換を理解する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>簡単計算機</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"calculator-container\">\n        <h1>🧮 簡単計算機</h1>\n        \n        <div class=\"calculator-box\">\n            <!-- 基本計算機 -->\n            <div class=\"calc-section\">\n                <h2>基本計算機</h2>\n                <div class=\"input-group\">\n                    <input type=\"number\" id=\"num1\" placeholder=\"最初の数値\" step=\"any\">\n                    <select id=\"operation\">\n                        <option value=\"+\">+ 足し算</option>\n                        <option value=\"-\">- 引き算</option>\n                        <option value=\"*\">× 掛け算</option>\n                        <option value=\"/\">÷ 割り算</option>\n                    </select>\n                    <input type=\"number\" id=\"num2\" placeholder=\"2番目の数値\" step=\"any\">\n                    <button id=\"calculate\" class=\"calc-button\">計算実行</button>\n                </div>\n                \n                <div class=\"result-section\">\n                    <div id=\"result\" class=\"result-display\">結果がここに表示されます</div>\n                    <div id=\"error\" class=\"error-message\"></div>\n                </div>\n            </div>\n            \n            <!-- 履歴機能 -->\n            <div class=\"calc-section\">\n                <h2>計算履歴</h2>\n                <div class=\"history-controls\">\n                    <button id=\"clear-history\" class=\"clear-button\">履歴をクリア</button>\n                </div>\n                <div id=\"history\" class=\"history-list\">\n                    <p class=\"history-empty\">計算履歴はまだありません</p>\n                </div>\n            </div>\n            \n            <!-- 特殊計算 -->\n            <div class=\"calc-section\">\n                <h2>特殊計算</h2>\n                <div class=\"special-calc\">\n                    <div class=\"special-group\">\n                        <label>平方根：</label>\n                        <input type=\"number\" id=\"sqrt-input\" placeholder=\"数値\" step=\"any\">\n                        <button id=\"sqrt-btn\" class=\"special-button\">√ 計算</button>\n                        <span id=\"sqrt-result\" class=\"special-result\"></span>\n                    </div>\n                    \n                    <div class=\"special-group\">\n                        <label>乗算：</label>\n                        <input type=\"number\" id=\"power-base\" placeholder=\"底\" step=\"any\">\n                        <span class=\"power-symbol\">^</span>\n                        <input type=\"number\" id=\"power-exp\" placeholder=\"指数\" step=\"any\">\n                        <button id=\"power-btn\" class=\"special-button\">計算</button>\n                        <span id=\"power-result\" class=\"special-result\"></span>\n                    </div>\n                    \n                    <div class=\"special-group\">\n                        <label>円の面積：</label>\n                        <input type=\"number\" id=\"circle-radius\" placeholder=\"半径\" step=\"any\">\n                        <button id=\"circle-btn\" class=\"special-button\">面積計算</button>\n                        <span id=\"circle-result\" class=\"special-result\"></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Arial', sans-serif;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    padding: 20px;\n    color: #333;\n}\n\n.calculator-container {\n    max-width: 800px;\n    margin: 0 auto;\n}\n\nh1 {\n    text-align: center;\n    color: white;\n    margin-bottom: 30px;\n    font-size: 2.5rem;\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n}\n\n.calculator-box {\n    display: grid;\n    gap: 25px;\n}\n\n.calc-section {\n    background: white;\n    padding: 25px;\n    border-radius: 15px;\n    box-shadow: 0 8px 32px rgba(0,0,0,0.1);\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.calc-section:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 12px 40px rgba(0,0,0,0.15);\n}\n\n.calc-section h2 {\n    color: #4a5568;\n    margin-bottom: 20px;\n    font-size: 1.4rem;\n    border-bottom: 2px solid #e2e8f0;\n    padding-bottom: 10px;\n}\n\n/* 基本計算機のスタイル */\n.input-group {\n    display: flex;\n    gap: 10px;\n    margin-bottom: 20px;\n    flex-wrap: wrap;\n    align-items: center;\n}\n\n.input-group input[type=\"number\"] {\n    flex: 1;\n    min-width: 120px;\n    padding: 12px 15px;\n    border: 2px solid #e2e8f0;\n    border-radius: 8px;\n    font-size: 1rem;\n    transition: all 0.3s ease;\n}\n\n.input-group input[type=\"number\"]:focus {\n    outline: none;\n    border-color: #667eea;\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\n.input-group select {\n    padding: 12px 15px;\n    border: 2px solid #e2e8f0;\n    border-radius: 8px;\n    font-size: 1rem;\n    background: white;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.input-group select:focus {\n    outline: none;\n    border-color: #667eea;\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\n.calc-button {\n    background: linear-gradient(45deg, #667eea, #764ba2);\n    color: white;\n    border: none;\n    padding: 12px 25px;\n    border-radius: 8px;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n}\n\n.calc-button:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);\n    background: linear-gradient(45deg, #5a67d8, #6b46c1);\n}\n\n.calc-button:active {\n    transform: translateY(0);\n}\n\n/* 結果表示のスタイル */\n.result-section {\n    margin-top: 15px;\n}\n\n.result-display {\n    background: #f7fafc;\n    border: 2px solid #e2e8f0;\n    border-radius: 10px;\n    padding: 20px;\n    font-size: 1.2rem;\n    text-align: center;\n    min-height: 60px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.3s ease;\n}\n\n.result-display.success {\n    background: #f0fff4;\n    border-color: #68d391;\n    color: #2d3748;\n}\n\n.result-display.error {\n    background: #fed7d7;\n    border-color: #fc8181;\n    color: #c53030;\n}\n\n.calculation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    flex-wrap: wrap;\n}\n\n.calculation-expression {\n    font-weight: 500;\n    color: #4a5568;\n}\n\n.equals {\n    font-weight: bold;\n    color: #667eea;\n    font-size: 1.4rem;\n}\n\n.calculation-result {\n    font-weight: bold;\n    font-size: 1.4rem;\n    color: #2d3748;\n}\n\n.error-message {\n    margin-top: 10px;\n    padding: 10px 15px;\n    background: #fed7d7;\n    border: 1px solid #fc8181;\n    border-radius: 6px;\n    color: #c53030;\n    font-weight: 500;\n    display: none;\n}\n\n/* 履歴機能のスタイル */\n.history-controls {\n    margin-bottom: 15px;\n}\n\n.clear-button {\n    background: linear-gradient(45deg, #f56565, #e53e3e);\n    color: white;\n    border: none;\n    padding: 8px 16px;\n    border-radius: 6px;\n    font-size: 0.9rem;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.clear-button:hover {\n    background: linear-gradient(45deg, #e53e3e, #c53030);\n    transform: translateY(-1px);\n}\n\n.history-list {\n    max-height: 200px;\n    overflow-y: auto;\n    border: 2px solid #e2e8f0;\n    border-radius: 8px;\n    padding: 10px;\n}\n\n.history-empty {\n    text-align: center;\n    color: #a0aec0;\n    font-style: italic;\n    padding: 20px;\n}\n\n.history-item {\n    padding: 8px 12px;\n    border-bottom: 1px solid #e2e8f0;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.history-item:last-child {\n    border-bottom: none;\n}\n\n.history-expression {\n    font-weight: 500;\n    color: #4a5568;\n}\n\n.history-time {\n    font-size: 0.8rem;\n    color: #a0aec0;\n}\n\n/* 特殊計算のスタイル */\n.special-calc {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n\n.special-group {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    padding: 15px;\n    background: #f7fafc;\n    border-radius: 8px;\n    border: 1px solid #e2e8f0;\n    flex-wrap: wrap;\n}\n\n.special-group label {\n    font-weight: 600;\n    color: #4a5568;\n    min-width: 80px;\n}\n\n.special-group input[type=\"number\"] {\n    flex: 1;\n    min-width: 100px;\n    padding: 8px 12px;\n    border: 1px solid #d1d5db;\n    border-radius: 6px;\n    font-size: 0.9rem;\n}\n\n.power-symbol {\n    font-weight: bold;\n    font-size: 1.2rem;\n    color: #667eea;\n}\n\n.special-button {\n    background: linear-gradient(45deg, #48bb78, #38a169);\n    color: white;\n    border: none;\n    padding: 8px 12px;\n    border-radius: 6px;\n    font-size: 0.9rem;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-weight: 500;\n}\n\n.special-button:hover {\n    background: linear-gradient(45deg, #38a169, #2f855a);\n    transform: translateY(-1px);\n}\n\n.special-result {\n    font-weight: bold;\n    min-width: 100px;\n    padding: 5px 10px;\n    border-radius: 4px;\n    font-size: 0.9rem;\n}\n\n.special-result.success {\n    color: #2f855a;\n    background: #f0fff4;\n}\n\n.special-result.error {\n    color: #c53030;\n    background: #fed7d7;\n}\n\n/* レスポンシブデザイン */\n@media (max-width: 768px) {\n    .calculator-container {\n        padding: 0 10px;\n    }\n    \n    h1 {\n        font-size: 2rem;\n        margin-bottom: 20px;\n    }\n    \n    .calc-section {\n        padding: 20px;\n        margin-bottom: 20px;\n    }\n    \n    .input-group {\n        flex-direction: column;\n        align-items: stretch;\n    }\n    \n    .input-group input[type=\"number\"],\n    .input-group select,\n    .calc-button {\n        width: 100%;\n        margin-bottom: 10px;\n    }\n    \n    .special-group {\n        flex-direction: column;\n        align-items: stretch;\n        text-align: center;\n    }\n    \n    .special-group label {\n        min-width: auto;\n        margin-bottom: 5px;\n    }\n    \n    .calculation {\n        flex-direction: column;\n        gap: 5px;\n    }\n}\n\n@media (max-width: 480px) {\n    body {\n        padding: 10px;\n    }\n    \n    h1 {\n        font-size: 1.8rem;\n    }\n    \n    .calc-section {\n        padding: 15px;\n    }\n    \n    .result-display {\n        font-size: 1rem;\n        padding: 15px;\n    }\n    \n    .calculation-result {\n        font-size: 1.2rem;\n    }\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "// 18-simple-calculator: 簡単計算機の実装\n\n// 計算履歴を保存する配列\nlet calculationHistory = [];\n\n// DOMが読み込まれた後に実行\ndocument.addEventListener('DOMContentLoaded', function() {\n    \n    // === 基本計算機の実装 ===\n    \n    document.getElementById('calculate').addEventListener('click', function() {\n        // 入力値を取得\n        const num1Input = document.getElementById('num1').value;\n        const num2Input = document.getElementById('num2').value;\n        const operation = document.getElementById('operation').value;\n        \n        // エラーメッセージをクリア\n        clearError();\n        \n        try {\n            // 入力値のバリデーション\n            if (!num1Input || !num2Input) {\n                throw new Error('両方の数値を入力してください');\n            }\n            \n            // 数値に変換\n            const num1 = parseFloat(num1Input);\n            const num2 = parseFloat(num2Input);\n            \n            // 数値の妥当性チェック\n            if (isNaN(num1) || isNaN(num2)) {\n                throw new Error('有効な数値を入力してください');\n            }\n            \n            // 計算実行\n            let result = performCalculation(num1, num2, operation);\n            \n            // 結果の表示\n            displayResult(num1, num2, operation, result);\n            \n            // 履歴に追加\n            addToHistory(num1, num2, operation, result);\n            \n        } catch (error) {\n            // エラーメッセージを表示\n            showError(error.message);\n        }\n    });\n    \n    // === 履歴管理 ===\n    \n    document.getElementById('clear-history').addEventListener('click', function() {\n        calculationHistory = [];\n        updateHistoryDisplay();\n    });\n    \n    // === 特殊計算の実装 ===\n    \n    // 平方根計算\n    document.getElementById('sqrt-btn').addEventListener('click', function() {\n        const input = document.getElementById('sqrt-input').value;\n        const resultSpan = document.getElementById('sqrt-result');\n        \n        if (!input) {\n            resultSpan.textContent = 'エラー: 数値を入力してください';\n            resultSpan.className = 'special-result error';\n            return;\n        }\n        \n        const num = parseFloat(input);\n        if (isNaN(num)) {\n            resultSpan.textContent = 'エラー: 有効な数値を入力してください';\n            resultSpan.className = 'special-result error';\n            return;\n        }\n        \n        if (num < 0) {\n            resultSpan.textContent = 'エラー: 負の数の平方根は計算できません';\n            resultSpan.className = 'special-result error';\n            return;\n        }\n        \n        const result = Math.sqrt(num);\n        resultSpan.textContent = `= ${result.toFixed(4)}`;\n        resultSpan.className = 'special-result success';\n    });\n    \n    // 乗算計算\n    document.getElementById('power-btn').addEventListener('click', function() {\n        const baseInput = document.getElementById('power-base').value;\n        const expInput = document.getElementById('power-exp').value;\n        const resultSpan = document.getElementById('power-result');\n        \n        if (!baseInput || !expInput) {\n            resultSpan.textContent = 'エラー: 両方の数値を入力してください';\n            resultSpan.className = 'special-result error';\n            return;\n        }\n        \n        const base = parseFloat(baseInput);\n        const exp = parseFloat(expInput);\n        \n        if (isNaN(base) || isNaN(exp)) {\n            resultSpan.textContent = 'エラー: 有効な数値を入力してください';\n            resultSpan.className = 'special-result error';\n            return;\n        }\n        \n        const result = Math.pow(base, exp);\n        resultSpan.textContent = `= ${result.toFixed(4)}`;\n        resultSpan.className = 'special-result success';\n    });\n    \n    // 円の面積計算\n    document.getElementById('circle-btn').addEventListener('click', function() {\n        const input = document.getElementById('circle-radius').value;\n        const resultSpan = document.getElementById('circle-result');\n        \n        if (!input) {\n            resultSpan.textContent = 'エラー: 半径を入力してください';\n            resultSpan.className = 'special-result error';\n            return;\n        }\n        \n        const radius = parseFloat(input);\n        if (isNaN(radius)) {\n            resultSpan.textContent = 'エラー: 有効な数値を入力してください';\n            resultSpan.className = 'special-result error';\n            return;\n        }\n        \n        if (radius < 0) {\n            resultSpan.textContent = 'エラー: 半径は正の数である必要があります';\n            resultSpan.className = 'special-result error';\n            return;\n        }\n        \n        const area = Math.PI * Math.pow(radius, 2);\n        resultSpan.textContent = `= ${area.toFixed(4)}`;\n        resultSpan.className = 'special-result success';\n    });\n    \n    // Enter キーで計算実行\n    document.getElementById('num1').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') {\n            document.getElementById('calculate').click();\n        }\n    });\n    \n    document.getElementById('num2').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') {\n            document.getElementById('calculate').click();\n        }\n    });\n});\n\n// === ヘルパー関数 ===\n\n// 計算を実行する関数\nfunction performCalculation(num1, num2, operation) {\n    let result;\n    \n    switch (operation) {\n        case '+':\n            result = num1 + num2;\n            break;\n        case '-':\n            result = num1 - num2;\n            break;\n        case '*':\n            result = num1 * num2;\n            break;\n        case '/':\n            if (num2 === 0) {\n                throw new Error('0で割ることはできません');\n            }\n            result = num1 / num2;\n            break;\n        default:\n            throw new Error('無効な演算子です');\n    }\n    \n    return result;\n}\n\n// 結果を表示する関数\nfunction displayResult(num1, num2, operation, result) {\n    const resultElement = document.getElementById('result');\n    const operatorSymbol = getOperatorSymbol(operation);\n    const formattedResult = Number.isInteger(result) ? result : result.toFixed(4);\n    \n    resultElement.innerHTML = `\n        <div class=\"calculation\">\n            <span class=\"calculation-expression\">${num1} ${operatorSymbol} ${num2}</span>\n            <span class=\"equals\"> = </span>\n            <span class=\"calculation-result\">${formattedResult}</span>\n        </div>\n    `;\n    resultElement.className = 'result-display success';\n}\n\n// 演算子の表示用記号を取得\nfunction getOperatorSymbol(operation) {\n    const symbols = {\n        '+': '+',\n        '-': '-',\n        '*': '×',\n        '/': '÷'\n    };\n    return symbols[operation] || operation;\n}\n\n// エラーメッセージを表示する関数\nfunction showError(message) {\n    const errorElement = document.getElementById('error');\n    const resultElement = document.getElementById('result');\n    \n    errorElement.textContent = `⚠️ ${message}`;\n    errorElement.style.display = 'block';\n    \n    resultElement.textContent = '計算エラー';\n    resultElement.className = 'result-display error';\n}\n\n// エラーメッセージをクリアする関数\nfunction clearError() {\n    const errorElement = document.getElementById('error');\n    errorElement.textContent = '';\n    errorElement.style.display = 'none';\n}\n\n// 履歴に計算結果を追加\nfunction addToHistory(num1, num2, operation, result) {\n    const timestamp = new Date().toLocaleString();\n    const operatorSymbol = getOperatorSymbol(operation);\n    const formattedResult = Number.isInteger(result) ? result : result.toFixed(4);\n    \n    const historyItem = {\n        expression: `${num1} ${operatorSymbol} ${num2} = ${formattedResult}`,\n        timestamp: timestamp\n    };\n    \n    calculationHistory.unshift(historyItem); // 最新を先頭に追加\n    \n    // 履歴は最大20件まで\n    if (calculationHistory.length > 20) {\n        calculationHistory.pop();\n    }\n    \n    updateHistoryDisplay();\n}\n\n// 履歴表示を更新\nfunction updateHistoryDisplay() {\n    const historyElement = document.getElementById('history');\n    \n    if (calculationHistory.length === 0) {\n        historyElement.innerHTML = '<p class=\"history-empty\">計算履歴はまだありません</p>';\n        return;\n    }\n    \n    const historyHTML = calculationHistory.map((item, index) => `\n        <div class=\"history-item\">\n            <div class=\"history-expression\">${item.expression}</div>\n            <div class=\"history-time\">${item.timestamp}</div>\n        </div>\n    `).join('');\n    \n    historyElement.innerHTML = historyHTML;\n}\n\n// 初期メッセージ\nconsole.log('🧮 ステップ18: 簡単計算機が読み込まれました！');\nconsole.log('💡 数値を入力して計算してみましょう！');"
    }
  },
  "expectedResult": {
    "numberInput": "2つの数値入力フィールドが動作する",
    "addition": "足し算計算が正しく実行される",
    "resultDisplay": "計算結果が画面に表示される",
    "dataConversion": "文字列から数値への変換が正しく行われる",
    "behavior": "シンプルな足し算計算機が完成する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}