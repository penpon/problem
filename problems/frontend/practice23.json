{
  "id": "practice23",
  "title": "カウンター基本",
  "description": "基本的なカウンター機能を実装し、ボタンクリックで数値を増減させる仕組みを学習します",
  "category": "javascript-dom",
  "difficulty": 2,
  "instructions": [
    "カウンター変数を初期化する",
    "増加ボタンでカウンターを+1する",
    "減少ボタンでカウンターを-1する",
    "現在のカウント値をHTML要素に表示する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ステップ16.2 - カウンター基礎</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🔢 カウンター基礎</h1>\n        <div class=\"step-info\">\n            <strong>ステップ16.2 - 数値の増減をマスターする</strong>\n        </div>\n        \n        <div class=\"celebration\">➕ 🔢 ➖</div>\n        \n        <div class=\"info-box\">\n            <h3>📚 このステップで学ぶこと</h3>\n            <ul>\n                <li><strong>数値変数</strong>をボタンで増減させる方法</li>\n                <li><strong>DOM要素</strong>に数値を動的に表示する方法</li>\n                <li>ユーザーの操作で<strong>データの状態</strong>を変更する基礎</li>\n            </ul>\n        </div>\n        \n        <div class=\"counter-section\">\n            <h3>🎪 インタラクティブカウンター</h3>\n            <p>ボタンをクリックして数値を変更してみましょう！</p>\n            \n            <div class=\"counter-display\" id=\"counter-display\">0</div>\n            \n            <div class=\"counter-buttons\">\n                <button class=\"counter-btn minus\" id=\"minus-btn\">➖ -1</button>\n                <button class=\"counter-btn reset\" id=\"reset-btn\">🔄 リセット</button>\n                <button class=\"counter-btn plus\" id=\"plus-btn\">➕ +1</button>\n            </div>\n            \n            <div class=\"counter-status\" id=\"counter-status\">カウンター開始！数値を変更してみてください。</div>\n        </div>\n        \n        <div class=\"stats-section\">\n            <h4>📊 カウンター統計</h4>\n            <div class=\"stats-grid\">\n                <div class=\"stat-item\">\n                    <div>プラス回数</div>\n                    <div class=\"stat-number\" id=\"plus-count\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>マイナス回数</div>\n                    <div class=\"stat-number\" id=\"minus-count\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>リセット回数</div>\n                    <div class=\"stat-number\" id=\"reset-count\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>合計操作数</div>\n                    <div class=\"stat-number\" id=\"total-operations\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>最高値</div>\n                    <div class=\"stat-number\" id=\"max-value\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>最低値</div>\n                    <div class=\"stat-number\" id=\"min-value\">0</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🎯 カウンターの仕組み</h3>\n            <p>カウンターは<strong>変数</strong>を使って数値を記憶し、ボタンクリックで変数を変更します：</p>\n            \n            <div class=\"code-example\">\n// カウンター変数を宣言\nlet counter = 0;\n\n// プラスボタンの処理\ndocument.getElementById(\"plus-btn\").addEventListener(\"click\", function() {\n    counter = counter + 1;  // または counter++\n    document.getElementById(\"counter-display\").textContent = counter;\n});\n\n// マイナスボタンの処理\ndocument.getElementById(\"minus-btn\").addEventListener(\"click\", function() {\n    counter = counter - 1;  // または counter--\n    document.getElementById(\"counter-display\").textContent = counter;\n});\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🔍 実装されている機能</h3>\n            <ul>\n                <li><strong>➕ボタン</strong>: 数値を1増加させる</li>\n                <li><strong>➖ボタン</strong>: 数値を1減少させる</li>\n                <li><strong>🔄リセットボタン</strong>: 数値を0に戻す</li>\n                <li><strong>状態表示</strong>: 数値が正・負・ゼロで表示を変更</li>\n                <li><strong>統計機能</strong>: 操作回数、最高値・最低値を記録</li>\n            </ul>\n        </div>\n        \n        <div class=\"instruction\">\n            <h3>🚀 カウンターを操作してみよう！</h3>\n            <p>すべてのボタンを使って、数値がどのように変化するか確認してください。</p>\n            <p><strong>F12</strong>（MacはCmd+Option+I）で開発者ツールを開き、<strong>Console</strong>タブで操作ログも確認できます！</p>\n        </div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "body {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n    max-width: 900px;\n    margin: 40px auto;\n    padding: 20px;\n    line-height: 1.6;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    min-height: 100vh;\n}\n\n.container {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 40px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    color: #FFE135;\n    text-align: center;\n    font-size: 2.5rem;\n    margin-bottom: 10px;\n}\n\n.step-info {\n    text-align: center;\n    margin-bottom: 30px;\n    opacity: 0.9;\n}\n\n.counter-section {\n    background: rgba(255, 255, 255, 0.15);\n    padding: 40px;\n    border-radius: 20px;\n    margin: 25px 0;\n    text-align: center;\n    border: 2px solid rgba(255, 255, 255, 0.2);\n}\n\n.counter-display {\n    font-size: 4rem;\n    font-weight: bold;\n    color: #FFE135;\n    margin: 30px 0;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n    background: rgba(0, 0, 0, 0.2);\n    padding: 20px;\n    border-radius: 15px;\n    border: 3px solid rgba(255, 255, 255, 0.3);\n}\n\n.counter-buttons {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    margin: 30px 0;\n    flex-wrap: wrap;\n}\n\n.counter-btn {\n    background: linear-gradient(135deg, #ff6b6b 0%, #4ecdc4 100%);\n    color: white;\n    border: none;\n    padding: 15px 30px;\n    font-size: 1.5rem;\n    border-radius: 50px;\n    cursor: pointer;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n    transition: all 0.3s ease;\n    font-weight: bold;\n    min-width: 120px;\n}\n\n.counter-btn:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);\n}\n\n.counter-btn:active {\n    transform: translateY(0);\n}\n\n.counter-btn.plus {\n    background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);\n}\n\n.counter-btn.minus {\n    background: linear-gradient(135deg, #ff416c 0%, #ff4b2b 100%);\n}\n\n.counter-btn.reset {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n}\n\n.info-box {\n    background: rgba(255, 255, 255, 0.15);\n    padding: 25px;\n    border-radius: 15px;\n    margin: 20px 0;\n    border-left: 5px solid #FFE135;\n}\n\n.highlight {\n    color: #FFE135;\n    font-weight: bold;\n}\n\n.code-example {\n    background: rgba(0, 0, 0, 0.3);\n    padding: 15px;\n    border-radius: 8px;\n    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n    margin: 15px 0;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.instruction {\n    background: rgba(255, 193, 7, 0.2);\n    padding: 20px;\n    border-radius: 10px;\n    border: 2px solid #FFE135;\n    margin: 20px 0;\n}\n\n.celebration {\n    font-size: 3rem;\n    text-align: center;\n    margin: 20px 0;\n}\n\n.stats-section {\n    background: rgba(255, 255, 255, 0.1);\n    padding: 20px;\n    border-radius: 15px;\n    margin: 20px 0;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n    gap: 15px;\n    margin: 15px 0;\n}\n\n.stat-item {\n    background: rgba(0, 0, 0, 0.2);\n    padding: 15px;\n    border-radius: 10px;\n    text-align: center;\n}\n\n.stat-number {\n    font-size: 1.8rem;\n    font-weight: bold;\n    color: #FFE135;\n}\n\n.counter-status {\n    padding: 10px;\n    border-radius: 8px;\n    margin: 10px 0;\n    text-align: center;\n    font-weight: bold;\n}\n\n.status-positive {\n    background: linear-gradient(135deg, #56ab2f, #a8e6cf);\n}\n\n.status-negative {\n    background: linear-gradient(135deg, #ff416c, #ff4b2b);\n}\n\n.status-zero {\n    background: linear-gradient(135deg, #667eea, #764ba2);\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "console.log(\"🔢 ステップ16.2: カウンター基礎を開始します！\");\nconsole.log(\"=====================================\");\n\n// カウンター本体\nlet counter = 0;\n\n// 統計用変数\nlet plusCount = 0;\nlet minusCount = 0;\nlet resetCount = 0;\nlet maxValue = 0;\nlet minValue = 0;\n\n// DOM要素の取得\nlet counterDisplay = document.getElementById(\"counter-display\");\nlet counterStatus = document.getElementById(\"counter-status\");\n\n// カウンター表示を更新する関数\nfunction updateDisplay() {\n    counterDisplay.textContent = counter;\n    updateStatus();\n    updateStats();\n    \n    console.log(\"📊 現在のカウンター値: \" + counter);\n}\n\n// 状態メッセージを更新する関数\nfunction updateStatus() {\n    counterStatus.className = \"counter-status\";\n    \n    if (counter > 0) {\n        counterStatus.textContent = `✨ プラス${counter}！ 順調に増加中です！`;\n        counterStatus.classList.add(\"status-positive\");\n    } else if (counter < 0) {\n        counterStatus.textContent = `⚡ マイナス${Math.abs(counter)}。負の数値も大切な学習です！`;\n        counterStatus.classList.add(\"status-negative\");\n    } else {\n        counterStatus.textContent = \"🎯 ゼロに戻りました。新たなスタートです！\";\n        counterStatus.classList.add(\"status-zero\");\n    }\n}\n\n// 統計を更新する関数\nfunction updateStats() {\n    let totalOperations = plusCount + minusCount + resetCount;\n    \n    // 最高値・最低値の更新\n    if (counter > maxValue) maxValue = counter;\n    if (counter < minValue) minValue = counter;\n    \n    // 画面に統計を表示\n    document.getElementById(\"plus-count\").textContent = plusCount;\n    document.getElementById(\"minus-count\").textContent = minusCount;\n    document.getElementById(\"reset-count\").textContent = resetCount;\n    document.getElementById(\"total-operations\").textContent = totalOperations;\n    document.getElementById(\"max-value\").textContent = maxValue;\n    document.getElementById(\"min-value\").textContent = minValue;\n}\n\n// プラスボタン\ndocument.getElementById(\"plus-btn\").addEventListener(\"click\", function() {\n    console.log(\"➕ プラスボタンがクリックされました\");\n    counter = counter + 1;  // counter++ でも同じ\n    plusCount++;\n    updateDisplay();\n});\n\n// マイナスボタン\ndocument.getElementById(\"minus-btn\").addEventListener(\"click\", function() {\n    console.log(\"➖ マイナスボタンがクリックされました\");\n    counter = counter - 1;  // counter-- でも同じ\n    minusCount++;\n    updateDisplay();\n});\n\n// リセットボタン\ndocument.getElementById(\"reset-btn\").addEventListener(\"click\", function() {\n    console.log(\"🔄 リセットボタンがクリックされました\");\n    counter = 0;\n    resetCount++;\n    updateDisplay();\n});\n\n// 初期表示を設定\nupdateDisplay();\n\nconsole.log(\"✅ カウンターシステムが初期化されました！\");\nconsole.log(\"💡 プラス、マイナス、リセットボタンをクリックして操作してください！\");"
    }
  },
  "expectedResult": {
    "increment": "増加ボタンでカウンターが+1される",
    "decrement": "減少ボタンでカウンターが-1される",
    "display": "現在のカウント値がリアルタイムで表示される",
    "behavior": "カウンターが正しく動作する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}