{
  "id": "js-advanced-15",
  "title": "基本商品カード - オブジェクトでデータ管理入門",
  "description": "JavaScriptの「オブジェクト」を使った効果的なデータ管理方法を学習し、実用的な商品カードを通じて理解を深めます",
  "category": "javascript-advanced",
  "difficulty": 3,
  "instructions": [
    "オブジェクトを使った商品データの構造化管理を学ぶ",
    "オブジェクトの値を更新してUIに反映する方法を習得する",
    "関連する情報をひとまとめにして管理する仕組みを理解する",
    "データ整理術とデバッグ習慣を身につける"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>19.1 基本商品カード - オブジェクト学習</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <!-- 商品カード -->\n        <div class=\"product-card\">\n            <div class=\"product-image\">👕</div>\n            \n            <div class=\"product-info\">\n                <h2 id=\"productName\">プレミアム Tシャツ</h2>\n                <div class=\"product-price\">¥<span id=\"productPrice\">2,980</span></div>\n            </div>\n            \n            <button class=\"btn-like\" id=\"likeBtn\">\n                ❤️ いいね <span id=\"likeCount\">0</span>\n            </button>\n        </div>\n        \n        <!-- 学習パネル -->\n        <div class=\"learning-panel\">\n            <h2 class=\"panel-title\">📚 オブジェクト学習モード</h2>\n            \n            <!-- 統計表示 -->\n            <div class=\"stats-section\">\n                <div class=\"stats-title\">📊 いいね統計</div>\n                <div class=\"stat-display\">\n                    <div class=\"stat-number\" id=\"totalLikes\">0</div>\n                    <div class=\"stat-label\">合計いいね数</div>\n                </div>\n            </div>\n            \n            <!-- オブジェクト表示 -->\n            <div class=\"object-display\">\n                <div class=\"object-title\">🔍 productData オブジェクトの中身</div>\n                <div class=\"object-content\" id=\"objectDisplay\">\n                    読み込み中...\n                </div>\n            </div>\n            \n            <!-- リセットボタン -->\n            <button class=\"btn-reset\" id=\"resetBtn\">🔄 リセット</button>\n        </div>\n    </div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Hiragino Sans', 'Yu Gothic UI', sans-serif;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 20px;\n}\n\n.container {\n    max-width: 900px;\n    width: 100%;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 30px;\n}\n\n/* 商品カード */\n.product-card {\n    background: white;\n    border-radius: 20px;\n    padding: 40px;\n    text-align: center;\n    box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n}\n\n.product-image {\n    width: 150px;\n    height: 150px;\n    background: linear-gradient(45deg, #ff6b6b, #4ecdc4);\n    border-radius: 15px;\n    margin: 0 auto 25px auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 50px;\n    color: white;\n}\n\n.product-info h2 {\n    color: #333;\n    font-size: 22px;\n    margin-bottom: 10px;\n}\n\n.product-price {\n    font-size: 24px;\n    color: #e74c3c;\n    font-weight: bold;\n    margin-bottom: 25px;\n}\n\n.btn-like {\n    background: #f8f9fa;\n    color: #666;\n    border: 2px solid #ddd;\n    padding: 15px 30px;\n    border-radius: 25px;\n    cursor: pointer;\n    font-size: 16px;\n    font-weight: 600;\n    transition: all 0.3s ease;\n}\n\n.btn-like.liked {\n    background: #e74c3c;\n    color: white;\n    border-color: #e74c3c;\n}\n\n.btn-like:hover {\n    transform: scale(1.05);\n}\n\n/* 学習パネル */\n.learning-panel {\n    background: white;\n    border-radius: 20px;\n    padding: 30px;\n    box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n}\n\n.panel-title {\n    text-align: center;\n    font-size: 20px;\n    font-weight: 600;\n    color: #333;\n    margin-bottom: 25px;\n}\n\n/* 統計表示 */\n.stats-section {\n    margin-bottom: 25px;\n}\n\n.stats-title {\n    font-size: 16px;\n    color: #666;\n    margin-bottom: 15px;\n    text-align: center;\n}\n\n.stat-display {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    padding: 20px;\n    border-radius: 15px;\n    text-align: center;\n}\n\n.stat-number {\n    font-size: 28px;\n    font-weight: bold;\n    margin-bottom: 5px;\n}\n\n.stat-label {\n    font-size: 14px;\n    opacity: 0.9;\n}\n\n/* オブジェクト表示エリア */\n.object-display {\n    background: #2c3e50;\n    color: #ecf0f1;\n    border-radius: 10px;\n    padding: 15px;\n    margin-bottom: 20px;\n    font-family: 'Courier New', monospace;\n    font-size: 12px;\n}\n\n.object-title {\n    color: #3498db;\n    font-weight: bold;\n    margin-bottom: 10px;\n}\n\n.object-content {\n    line-height: 1.4;\n}\n\n/* リセットボタン */\n.btn-reset {\n    width: 100%;\n    background: #e74c3c;\n    color: white;\n    padding: 12px;\n    border: none;\n    border-radius: 10px;\n    font-size: 14px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: background 0.3s ease;\n}\n\n.btn-reset:hover {\n    background: #c0392b;\n}\n\n/* レスポンシブ */\n@media (max-width: 768px) {\n    .container {\n        grid-template-columns: 1fr;\n        gap: 20px;\n    }\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "// === 19.1 メイン学習テーマ: オブジェクトによるデータ管理 ===\n\n// 1. 商品データをオブジェクトで管理（これが今回のメインテーマ！）\n// なぜオブジェクトを使うのか？\n// → 関連する情報（商品名、価格、いいね数など）をひとまとめに管理できる\nlet productData = {\n    name: \"プレミアム Tシャツ\",  // 商品名\n    price: 2980,                // 価格\n    likes: 0,                   // いいね数\n    isLiked: false              // いいね状態（押されているかどうか）\n};\n\n// 2. HTMLの要素を取得（画面の要素を操作するため）\nconst likeBtn = document.getElementById('likeBtn');\nconst likeCount = document.getElementById('likeCount');\nconst totalLikes = document.getElementById('totalLikes');\nconst objectDisplay = document.getElementById('objectDisplay');\nconst resetBtn = document.getElementById('resetBtn');\n\n// 3. オブジェクトの中身を画面に表示する関数\n// なぜこの関数が必要？ → オブジェクトがどう変化するかを目で確認できる\nfunction displayObjectData() {\n    // オブジェクトを見やすい形で表示\n    objectDisplay.innerHTML = `\n        {<br>\n        &nbsp;&nbsp;name: \"${productData.name}\",<br>\n        &nbsp;&nbsp;price: ${productData.price},<br>\n        &nbsp;&nbsp;likes: <span style=\"color: #e74c3c; font-weight: bold;\">${productData.likes}</span>,<br>\n        &nbsp;&nbsp;isLiked: <span style=\"color: #3498db; font-weight: bold;\">${productData.isLiked}</span><br>\n        }\n    `;\n}\n\n// 4. 画面の表示を更新する関数\n// オブジェクトが変更されたら、画面も更新する必要がある\nfunction updateDisplay() {\n    // いいねカウントを更新\n    likeCount.textContent = productData.likes;\n    totalLikes.textContent = productData.likes;\n    \n    // いいねボタンの見た目を更新\n    if (productData.isLiked) {\n        likeBtn.classList.add('liked');\n        likeBtn.innerHTML = `❤️ いいね済み <span id=\"likeCount\">${productData.likes}</span>`;\n    } else {\n        likeBtn.classList.remove('liked');\n        likeBtn.innerHTML = `❤️ いいね <span id=\"likeCount\">${productData.likes}</span>`;\n    }\n    \n    // オブジェクトの中身を表示（学習のため）\n    displayObjectData();\n    \n    // コンソールにも出力（F12で確認可能）\n    console.log('📊 現在のproductData:', productData);\n}\n\n// 5. いいね機能（メインの学習ポイント！）\n// オブジェクトの値を変更する基本的な方法を学ぶ\nfunction handleLike() {\n    if (productData.isLiked) {\n        // いいね取り消し：オブジェクトの複数の値を同時に変更\n        productData.isLiked = false;           // 状態を変更\n        productData.likes = productData.likes - 1;  // 数を減らす\n        console.log('💔 いいねを取り消しました');\n    } else {\n        // いいね追加：オブジェクトの値を更新\n        productData.isLiked = true;            // 状態を変更\n        productData.likes = productData.likes + 1;   // 数を増やす（productData.likes += 1 と同じ）\n        console.log('❤️ いいねしました！');\n    }\n    \n    updateDisplay(); // 変更を画面に反映\n}\n\n// 6. リセット機能\n// オブジェクトを初期状態に戻す方法を学ぶ\nfunction handleReset() {\n    if (confirm('オブジェクトの中身をリセットしますか？')) {\n        // オブジェクトの各プロパティを初期値に戻す\n        productData.likes = 0;\n        productData.isLiked = false;\n        \n        console.log('🔄 オブジェクトをリセットしました');\n        updateDisplay(); // 変更を画面に反映\n    }\n}\n\n// 7. ボタンがクリックされた時の処理を設定\nlikeBtn.addEventListener('click', handleLike);\nresetBtn.addEventListener('click', handleReset);\n\n// 8. ページが読み込まれた時の初期化\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('=== 19.1 オブジェクト学習モード開始 ===');\n    console.log('今回のテーマ: オブジェクトによるデータ管理');\n    console.log('学習のポイント: 関連する情報をひとまとめにして管理する方法');\n    \n    updateDisplay(); // 初期状態を表示\n    \n    console.log('🎯 いいねボタンを押して、オブジェクトの変化を観察してみましょう！');\n});"
    }
  },
  "expectedResult": {
    "objectManagement": "商品データがオブジェクトで管理される",
    "dataStructure": "関連情報がひとまとめに整理される",
    "uiSync": "オブジェクトの値変更がUIに反映される",
    "likeSystem": "いいね機能でオブジェクトが更新される",
    "statistics": "基本統計表示が動作する",
    "behavior": "オブジェクトによるデータ管理の基礎が完成する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}