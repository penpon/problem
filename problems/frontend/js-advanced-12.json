{
  "id": "js-advanced-12",
  "title": "オブジェクトとデータ構造",
  "description": "オブジェクト指向プログラミングの入門として、オブジェクトリテラル・プロパティアクセス・メソッドを学習します",
  "category": "javascript-advanced",
  "difficulty": 4,
  "instructions": [
    "オブジェクトリテラルの基本構文と作成方法を学ぶ",
    "プロパティアクセス（ドット記法とブラケット記法）を習得する",
    "メソッド（オブジェクトに属する関数）の定義と実行を理解する",
    "thisの基本概念と使い方を理解する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>17.6 オブジェクト基礎 - データ構造管理の学習</title>\n    <!-- 外部CSSファイルの読み込み -->\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🏗️ オブジェクトとデータ構造</h1>\n        <div class=\"step-info\">\n            <strong>ステップ17.6 - オブジェクト指向プログラミングの入門</strong>\n        </div>\n        \n        <div class=\"celebration\">🏗️ 📦 ✨</div>\n        \n        <div class=\"info-box\">\n            <h3>📚 このステップで学ぶこと</h3>\n            <ul>\n                <li><strong>オブジェクトリテラル</strong>の基本構文と作成方法</li>\n                <li><strong>プロパティアクセス</strong>（ドット記法とブラケット記法）</li>\n                <li><strong>メソッド</strong>（オブジェクトに属する関数）の定義と実行</li>\n                <li><strong>this</strong>の基本概念と使い方</li>\n            </ul>\n        </div>\n        \n        <div class=\"demo-section\">\n            <h3>🏗️ インタラクティブオブジェクトシステム</h3>\n            \n            <div class=\"object-display\">\n                <div class=\"result-main\" id=\"result-display\">オブジェクトを操作してください</div>\n                <div class=\"object-status\" id=\"object-status\">オブジェクト待機中 - ボタンを押して操作してください</div>\n            </div>\n            \n            <div class=\"button-grid\">\n                <button class=\"object-btn btn-basic\" id=\"basic-btn\">\n                    👤 基本オブジェクト\n                </button>\n                \n                <button class=\"object-btn btn-method\" id=\"method-btn\">\n                    🎭 メソッド付き\n                </button>\n                \n                <button class=\"object-btn btn-nested\" id=\"nested-btn\">\n                    🏠 ネストオブジェクト\n                </button>\n                \n                <button class=\"object-btn btn-array\" id=\"array-btn\">\n                    👥 オブジェクト配列\n                </button>\n                \n                <button class=\"object-btn btn-dynamic\" id=\"dynamic-btn\">\n                    ⚡ 動的生成\n                </button>\n                \n                <button class=\"object-btn btn-system\" id=\"system-btn\">\n                    📚 図書管理システム\n                </button>\n            </div>\n        </div>\n        \n        <div class=\"input-section\" id=\"input-section\">\n            <h3>📝 オブジェクト作成用入力</h3>\n            \n            <div class=\"input-row\">\n                <div class=\"input-group\">\n                    <label for=\"person-name\">名前:</label>\n                    <input type=\"text\" id=\"person-name\" placeholder=\"例: 田中太郎\" value=\"田中太郎\">\n                </div>\n                <div class=\"input-group\">\n                    <label for=\"person-age\">年齢:</label>\n                    <input type=\"number\" id=\"person-age\" placeholder=\"例: 25\" value=\"25\" min=\"1\" max=\"150\">\n                </div>\n            </div>\n            \n            <div class=\"input-row\">\n                <div class=\"input-group\">\n                    <label for=\"person-job\">職業:</label>\n                    <input type=\"text\" id=\"person-job\" placeholder=\"例: エンジニア\" value=\"エンジニア\">\n                </div>\n                <div class=\"input-group\">\n                    <label for=\"person-city\">都市:</label>\n                    <input type=\"text\" id=\"person-city\" placeholder=\"例: 東京\" value=\"東京\">\n                </div>\n            </div>\n            \n            <div class=\"input-group\">\n                <label for=\"person-hobby\">趣味:</label>\n                <select id=\"person-hobby\">\n                    <option value=\"プログラミング\">プログラミング</option>\n                    <option value=\"読書\">読書</option>\n                    <option value=\"映画鑑賞\">映画鑑賞</option>\n                    <option value=\"スポーツ\">スポーツ</option>\n                    <option value=\"音楽\">音楽</option>\n                    <option value=\"料理\">料理</option>\n                    <option value=\"旅行\">旅行</option>\n                </select>\n            </div>\n        </div>\n        \n        <div class=\"object-display-area\" id=\"object-area\">\n            <h4>🔍 オブジェクト表示エリア</h4>\n            <div id=\"object-content\">\n                オブジェクトの内容がここに表示されます\n            </div>\n        </div>\n        \n        <div class=\"library-system\" id=\"library-system\" style=\"display: none;\">\n            <h3>📚 図書管理システム</h3>\n            <div class=\"input-row\">\n                <div class=\"input-group\">\n                    <label for=\"book-title\">書籍タイトル:</label>\n                    <input type=\"text\" id=\"book-title\" placeholder=\"例: JavaScript入門\" value=\"JavaScript入門\">\n                </div>\n                <div class=\"input-group\">\n                    <label for=\"book-author\">著者:</label>\n                    <input type=\"text\" id=\"book-author\" placeholder=\"例: 田中太郎\" value=\"田中太郎\">\n                </div>\n            </div>\n            <div class=\"input-row\">\n                <div class=\"input-group\">\n                    <label for=\"book-genre\">ジャンル:</label>\n                    <select id=\"book-genre\">\n                        <option value=\"プログラミング\">プログラミング</option>\n                        <option value=\"小説\">小説</option>\n                        <option value=\"ビジネス\">ビジネス</option>\n                        <option value=\"科学\">科学</option>\n                        <option value=\"歴史\">歴史</option>\n                        <option value=\"料理\">料理</option>\n                    </select>\n                </div>\n                <div class=\"input-group\">\n                    <label for=\"book-pages\">ページ数:</label>\n                    <input type=\"number\" id=\"book-pages\" value=\"300\" min=\"1\" max=\"2000\">\n                </div>\n            </div>\n            <button class=\"object-btn\" id=\"add-book-btn\" style=\"margin: 10px 0;\">📖 書籍を追加</button>\n            \n            <div class=\"book-list\" id=\"book-list\">\n                <!-- 書籍リストがここに表示されます -->\n            </div>\n        </div>\n        \n        <div class=\"stats-section\">\n            <h4>📊 オブジェクト統計</h4>\n            <div class=\"stats-grid\">\n                <div class=\"stat-item\">\n                    <div>総操作回数</div>\n                    <div class=\"stat-number\" id=\"total-operations\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>基本オブジェクト</div>\n                    <div class=\"stat-number\" id=\"basic-operations\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>メソッド実行</div>\n                    <div class=\"stat-number\" id=\"method-operations\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>動的生成</div>\n                    <div class=\"stat-number\" id=\"dynamic-operations\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>作成オブジェクト数</div>\n                    <div class=\"stat-number\" id=\"created-objects\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>図書管理使用</div>\n                    <div class=\"stat-number\" id=\"library-operations\">0</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🏗️ オブジェクトの基本構文</h3>\n            <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 15px 0;\">\n                <div style=\"background: #e8f5e8; padding: 15px; border-radius: 10px;\">\n                    <h4 style=\"margin-top: 0; color: #27ae60;\">オブジェクトリテラル</h4>\n                    <div class=\"code-example\">\nconst person = {\n    name: \"田中太郎\",\n    age: 25,\n    job: \"エンジニア\"\n};\n                    </div>\n                    <p style=\"margin-bottom: 0;\">基本的なオブジェクト作成方法</p>\n                </div>\n                <div style=\"background: #e3f2fd; padding: 15px; border-radius: 10px;\">\n                    <h4 style=\"margin-top: 0; color: #2196f3;\">メソッド付きオブジェクト</h4>\n                    <div class=\"code-example\">\nconst person = {\n    name: \"田中太郎\",\n    sayHello() {\n        return `こんにちは、${this.name}です！`;\n    }\n};\n                    </div>\n                    <p style=\"margin-bottom: 0;\">関数を持つオブジェクト</p>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🔧 実装されているオブジェクト機能</h3>\n            <ul>\n                <li><strong>👤 基本オブジェクト</strong>: 人物情報をプロパティで管理</li>\n                <li><strong>🎭 メソッド付き</strong>: 自己紹介機能を持つオブジェクト</li>\n                <li><strong>🏠 ネストオブジェクト</strong>: 住所情報などの階層構造</li>\n                <li><strong>👥 オブジェクト配列</strong>: 複数人のデータを配列で管理</li>\n                <li><strong>⚡ 動的生成</strong>: ユーザー入力でオブジェクト作成</li>\n                <li><strong>📚 図書管理システム</strong>: 実用的なオブジェクトシステム</li>\n            </ul>\n        </div>\n        \n        <div class=\"instruction\">\n            <h3>🚀 すべてのオブジェクト機能を試してみよう！</h3>\n            <p>6つのボタンをすべてクリックして、オブジェクトの様々な使い方を確認してください。動的生成では入力フィールドの値を変更して、パラメータによる結果の違いも確認しましょう。</p>\n            <p><strong>F12</strong>（MacはCmd+Option+I）で開発者ツールを開き、<strong>Console</strong>タブでオブジェクトの詳細な構造も確認できます！</p>\n        </div>\n    </div>\n    \n    <!-- 外部JavaScriptファイルの読み込み -->\n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "/* 17.6 オブジェクト基礎 - データ構造管理の学習 */\n\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n    max-width: 1200px;\n    margin: 40px auto;\n    padding: 20px;\n    line-height: 1.6;\n    background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%);\n    color: #2c3e50;\n    min-height: 100vh;\n}\n\n.container {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 40px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    color: #e91e63;\n    text-align: center;\n    font-size: 2.5rem;\n    margin-bottom: 10px;\n}\n\n.step-info {\n    text-align: center;\n    margin-bottom: 30px;\n    opacity: 0.8;\n    color: #7f8c8d;\n}\n\n.demo-section {\n    background: linear-gradient(135deg, #e91e63 0%, #f06292 100%);\n    color: white;\n    padding: 30px;\n    border-radius: 20px;\n    margin: 25px 0;\n}\n\n.object-display {\n    background: rgba(255, 255, 255, 0.15);\n    padding: 30px;\n    border-radius: 15px;\n    margin: 20px 0;\n    text-align: center;\n}\n\n.result-main {\n    font-size: 2rem;\n    font-weight: bold;\n    color: #FFE135;\n    margin: 20px 0;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n    min-height: 60px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.object-status {\n    font-size: 1.2rem;\n    margin: 15px 0;\n    padding: 10px;\n    background: rgba(255, 255, 255, 0.2);\n    border-radius: 10px;\n}\n\n.button-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 15px;\n    margin: 25px 0;\n}\n\n.object-btn {\n    background: linear-gradient(135deg, #ff4081 0%, #e91e63 100%);\n    color: white;\n    border: none;\n    padding: 15px 20px;\n    font-size: 1rem;\n    border-radius: 12px;\n    cursor: pointer;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n    transition: all 0.3s ease;\n    font-weight: bold;\n}\n\n.object-btn:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);\n}\n\n.object-btn:active {\n    transform: translateY(0);\n}\n\n.btn-basic { background: linear-gradient(135deg, #ff5722, #d84315); }\n.btn-method { background: linear-gradient(135deg, #4caf50, #388e3c); }\n.btn-nested { background: linear-gradient(135deg, #2196f3, #1565c0); }\n.btn-array { background: linear-gradient(135deg, #ff9800, #f57c00); }\n.btn-dynamic { background: linear-gradient(135deg, #9c27b0, #7b1fa2); }\n.btn-system { background: linear-gradient(135deg, #607d8b, #455a64); }\n\n.input-section {\n    background: rgba(255, 255, 255, 0.9);\n    color: #2c3e50;\n    padding: 30px;\n    border-radius: 15px;\n    margin: 20px 0;\n}\n\n.input-group {\n    margin: 15px 0;\n}\n\n.input-group label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n    color: #e91e63;\n}\n\n.input-group input, .input-group select {\n    width: 100%;\n    padding: 12px;\n    border: 2px solid #bdc3c7;\n    border-radius: 8px;\n    font-size: 1rem;\n    transition: border-color 0.3s;\n}\n\n.input-group input:focus, .input-group select:focus {\n    outline: none;\n    border-color: #e91e63;\n}\n\n.input-row {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 15px;\n}\n\n.object-display-area {\n    background: #f8f9fa;\n    padding: 20px;\n    border-radius: 15px;\n    margin: 15px 0;\n    border: 2px solid #e91e63;\n    min-height: 100px;\n}\n\n.object-card {\n    background: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 10px 0;\n    border-left: 4px solid #e91e63;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n.object-property {\n    background: #e8f5e8;\n    color: #2e7d32;\n    padding: 8px 12px;\n    margin: 5px 0;\n    border-radius: 5px;\n    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n    font-size: 0.9rem;\n}\n\n.method-result {\n    background: #e3f2fd;\n    color: #1565c0;\n    padding: 10px;\n    border-radius: 8px;\n    margin: 8px 0;\n    font-weight: bold;\n}\n\n.info-box {\n    background: #f8f9fa;\n    padding: 25px;\n    border-radius: 15px;\n    margin: 20px 0;\n    border-left: 5px solid #e91e63;\n}\n\n.highlight {\n    color: #e74c3c;\n    font-weight: bold;\n}\n\n.code-example {\n    background: #2c3e50;\n    color: #ecf0f1;\n    padding: 15px;\n    border-radius: 8px;\n    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n    margin: 15px 0;\n    border: 1px solid #34495e;\n}\n\n.instruction {\n    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n    color: white;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 20px 0;\n}\n\n.celebration {\n    font-size: 3rem;\n    text-align: center;\n    margin: 20px 0;\n}\n\n.stats-section {\n    background: rgba(52, 73, 94, 0.1);\n    padding: 20px;\n    border-radius: 15px;\n    margin: 20px 0;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    gap: 15px;\n    margin: 15px 0;\n}\n\n.stat-item {\n    background: white;\n    padding: 15px;\n    border-radius: 10px;\n    text-align: center;\n    border: 2px solid #e91e63;\n}\n\n.stat-number {\n    font-size: 1.8rem;\n    font-weight: bold;\n    color: #e91e63;\n}\n\n.library-system {\n    background: rgba(255, 255, 255, 0.9);\n    color: #2c3e50;\n    padding: 30px;\n    border-radius: 15px;\n    margin: 20px 0;\n    border: 3px solid #e91e63;\n}\n\n.book-list {\n    display: grid;\n    gap: 15px;\n    margin: 20px 0;\n}\n\n.book-item {\n    background: linear-gradient(135deg, #ffeaa7, #fab1a0);\n    padding: 20px;\n    border-radius: 10px;\n    border-left: 5px solid #e17055;\n}\n\n.book-actions {\n    display: flex;\n    gap: 10px;\n    margin: 10px 0;\n}\n\n.book-btn {\n    background: #e91e63;\n    color: white;\n    border: none;\n    padding: 8px 16px;\n    border-radius: 5px;\n    cursor: pointer;\n    font-size: 0.9rem;\n}\n\n.book-btn:hover {\n    background: #ad1457;\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "// 17.6 オブジェクト基礎 - データ構造管理の学習\n\nconsole.log(\"🏗️ ステップ17.6: オブジェクトとデータ構造を開始します！\");\nconsole.log(\"============================================\");\n\n// 統計用変数\nlet totalOperations = 0;\nlet basicOperations = 0;\nlet methodOperations = 0;\nlet dynamicOperations = 0;\nlet createdObjects = 0;\nlet libraryOperations = 0;\n\n// 図書管理システム用変数\nlet libraryBooks = [];\nlet bookIdCounter = 1;\n\n// DOM要素の取得\nconst resultDisplay = document.getElementById(\"result-display\");\nconst objectStatus = document.getElementById(\"object-status\");\nconst objectContent = document.getElementById(\"object-content\");\nconst librarySystem = document.getElementById(\"library-system\");\nconst bookList = document.getElementById(\"book-list\");\n\n// 統計更新関数\nfunction updateStats() {\n    document.getElementById(\"total-operations\").textContent = totalOperations;\n    document.getElementById(\"basic-operations\").textContent = basicOperations;\n    document.getElementById(\"method-operations\").textContent = methodOperations;\n    document.getElementById(\"dynamic-operations\").textContent = dynamicOperations;\n    document.getElementById(\"created-objects\").textContent = createdObjects;\n    document.getElementById(\"library-operations\").textContent = libraryOperations;\n}\n\n// オブジェクトを表示用に整形する関数\nfunction displayObject(obj, title = \"オブジェクト\") {\n    let html = `<div class=\"object-card\">\n        <h4>${title}</h4>`;\n    \n    for (let key in obj) {\n        if (typeof obj[key] === 'function') {\n            html += `<div class=\"object-property\">${key}: [メソッド]</div>`;\n        } else if (typeof obj[key] === 'object' && obj[key] !== null) {\n            if (Array.isArray(obj[key])) {\n                html += `<div class=\"object-property\">${key}: [配列: ${obj[key].length}個の要素]</div>`;\n            } else {\n                html += `<div class=\"object-property\">${key}: [オブジェクト]</div>`;\n                // ネストしたオブジェクトの中身も表示\n                for (let nestedKey in obj[key]) {\n                    html += `<div class=\"object-property\" style=\"margin-left: 20px;\">${nestedKey}: ${obj[key][nestedKey]}</div>`;\n                }\n            }\n        } else {\n            html += `<div class=\"object-property\">${key}: ${obj[key]}</div>`;\n        }\n    }\n    \n    html += `</div>`;\n    return html;\n}\n\n// 1. 基本オブジェクト\nfunction createBasicObject() {\n    console.log(\"👤 基本オブジェクトを作成中...\");\n    \n    // 基本的なオブジェクトリテラル\n    const person = {\n        name: \"田中太郎\",\n        age: 30,\n        job: \"Webデベロッパー\",\n        city: \"東京\",\n        isWorking: true\n    };\n    \n    resultDisplay.textContent = `${person.name}さん（${person.age}歳）`;\n    objectStatus.textContent = `✅ ${person.job}の情報を作成しました`;\n    objectContent.innerHTML = displayObject(person, \"基本オブジェクト\");\n    \n    console.log(\"✅ 基本オブジェクト作成完了:\", person);\n    \n    // プロパティアクセスの例をコンソールで示す\n    console.log(\"🔍 プロパティアクセス例:\");\n    console.log(\"  ドット記法: person.name =\", person.name);\n    console.log(\"  ブラケット記法: person['age'] =\", person['age']);\n    \n    return person;\n}\n\n// 2. メソッド付きオブジェクト\nfunction createMethodObject() {\n    console.log(\"🎭 メソッド付きオブジェクトを作成中...\");\n    \n    const person = {\n        name: \"佐藤花子\",\n        age: 28,\n        job: \"デザイナー\",\n        hobby: \"読書\",\n        \n        // メソッド（関数）の定義\n        introduce() {\n            return `こんにちは！${this.name}です。${this.age}歳の${this.job}をしています。`;\n        },\n        \n        getHobbyMessage() {\n            return `趣味は${this.hobby}です。`;\n        },\n        \n        celebrateBirthday() {\n            this.age++;\n            return `🎉 お誕生日おめでとう！${this.age}歳になりました！`;\n        }\n    };\n    \n    // メソッドを実行\n    const introMessage = person.introduce();\n    const hobbyMessage = person.getHobbyMessage();\n    \n    resultDisplay.textContent = introMessage;\n    objectStatus.textContent = `✅ ${person.name}さんのメソッドを実行しました`;\n    \n    let methodResults = `<div class=\"method-result\">🎭 ${introMessage}</div>`;\n    methodResults += `<div class=\"method-result\">💝 ${hobbyMessage}</div>`;\n    \n    objectContent.innerHTML = displayObject(person, \"メソッド付きオブジェクト\") + methodResults;\n    \n    console.log(\"✅ メソッド付きオブジェクト作成完了:\", person);\n    console.log(\"🎭 メソッド実行結果:\", introMessage);\n    console.log(\"💡 thisの使用例:\", person.introduce);\n    \n    return person;\n}\n\n// 3. ネストしたオブジェクト\nfunction createNestedObject() {\n    console.log(\"🏠 ネストしたオブジェクトを作成中...\");\n    \n    const person = {\n        name: \"山田次郎\",\n        age: 35,\n        contact: {\n            email: \"yamada@example.com\",\n            phone: \"090-1234-5678\",\n            social: {\n                twitter: \"@yamada_jiro\",\n                linkedin: \"yamada-jiro\"\n            }\n        },\n        address: {\n            prefecture: \"神奈川県\",\n            city: \"横浜市\",\n            ward: \"港北区\",\n            postalCode: \"222-0001\"\n        },\n        skills: [\"JavaScript\", \"Python\", \"React\", \"Node.js\"],\n        \n        getFullAddress() {\n            return `${this.address.prefecture}${this.address.city}${this.address.ward}`;\n        },\n        \n        getContactInfo() {\n            return `📧 ${this.contact.email} 📱 ${this.contact.phone}`;\n        }\n    };\n    \n    const address = person.getFullAddress();\n    const contact = person.getContactInfo();\n    \n    resultDisplay.textContent = `${person.name}さん（${address}在住）`;\n    objectStatus.textContent = `✅ ネストしたオブジェクト構造を作成しました`;\n    \n    let nestedInfo = `<div class=\"method-result\">🏠 住所: ${address}</div>`;\n    nestedInfo += `<div class=\"method-result\">📞 連絡先: ${contact}</div>`;\n    nestedInfo += `<div class=\"method-result\">💻 スキル: ${person.skills.join(\", \")}</div>`;\n    \n    objectContent.innerHTML = displayObject(person, \"ネストしたオブジェクト\") + nestedInfo;\n    \n    console.log(\"✅ ネストしたオブジェクト作成完了:\", person);\n    console.log(\"🏠 ネストしたプロパティアクセス例:\");\n    console.log(\"  person.address.city =\", person.address.city);\n    console.log(\"  person.contact.social.twitter =\", person.contact.social.twitter);\n    \n    return person;\n}\n\n// 4. オブジェクト配列\nfunction createObjectArray() {\n    console.log(\"👥 オブジェクト配列を作成中...\");\n    \n    const team = [\n        {\n            id: 1,\n            name: \"田中リーダー\",\n            role: \"プロジェクトマネージャー\",\n            experience: 8,\n            skills: [\"管理\", \"企画\", \"JavaScript\"]\n        },\n        {\n            id: 2,\n            name: \"佐藤エンジニア\",\n            role: \"フロントエンドエンジニア\",\n            experience: 5,\n            skills: [\"React\", \"Vue.js\", \"CSS\"]\n        },\n        {\n            id: 3,\n            name: \"山田デザイナー\",\n            role: \"UIデザイナー\",\n            experience: 3,\n            skills: [\"Figma\", \"Photoshop\", \"UXデザイン\"]\n        }\n    ];\n    \n    // チーム情報を処理\n    const totalExperience = team.reduce((sum, member) => sum + member.experience, 0);\n    const averageExperience = (totalExperience / team.length).toFixed(1);\n    \n    resultDisplay.textContent = `チーム${team.length}名（平均経験${averageExperience}年）`;\n    objectStatus.textContent = `✅ ${team.length}人のチームオブジェクト配列を作成しました`;\n    \n    let teamInfo = `<div class=\"object-card\">\n        <h4>👥 チーム構成</h4>\n        <div class=\"method-result\">総メンバー: ${team.length}名</div>\n        <div class=\"method-result\">平均経験年数: ${averageExperience}年</div>\n        <div class=\"method-result\">総経験年数: ${totalExperience}年</div>\n    </div>`;\n    \n    team.forEach((member, index) => {\n        teamInfo += displayObject(member, `メンバー${index + 1}: ${member.name}`);\n    });\n    \n    objectContent.innerHTML = teamInfo;\n    \n    console.log(\"✅ オブジェクト配列作成完了:\", team);\n    console.log(\"👥 配列内オブジェクトアクセス例:\");\n    console.log(\"  team[0].name =\", team[0].name);\n    console.log(\"  team[1].skills =\", team[1].skills);\n    \n    return team;\n}\n\n// 5. 動的オブジェクト生成\nfunction createDynamicObject() {\n    console.log(\"⚡ 動的オブジェクト生成中...\");\n    \n    // 入力値を取得\n    const name = document.getElementById(\"person-name\").value;\n    const age = parseInt(document.getElementById(\"person-age\").value);\n    const job = document.getElementById(\"person-job\").value;\n    const city = document.getElementById(\"person-city\").value;\n    const hobby = document.getElementById(\"person-hobby\").value;\n    \n    // 動的にオブジェクトを作成\n    const dynamicPerson = {\n        name: name,\n        age: age,\n        job: job,\n        location: {\n            city: city,\n            country: \"日本\"\n        },\n        hobby: hobby,\n        created: new Date().toLocaleString(),\n        \n        // 動的に生成されたメソッド\n        introduce() {\n            return `はじめまして！${this.name}と申します。${this.location.city}で${this.job}をしている${this.age}歳です。`;\n        },\n        \n        getHobbyInfo() {\n            return `趣味は${this.hobby}で、とても楽しんでいます！`;\n        },\n        \n        getAge() {\n            const currentYear = new Date().getFullYear();\n            return `現在${this.age}歳です。`;\n        }\n    };\n    \n    // メソッドを実行\n    const intro = dynamicPerson.introduce();\n    const hobbyInfo = dynamicPerson.getHobbyInfo();\n    \n    resultDisplay.textContent = `${dynamicPerson.name}さんのオブジェクトを作成`;\n    objectStatus.textContent = `✅ 入力値から動的オブジェクトを生成しました`;\n    \n    let dynamicResults = `<div class=\"method-result\">🎭 ${intro}</div>`;\n    dynamicResults += `<div class=\"method-result\">🎯 ${hobbyInfo}</div>`;\n    dynamicResults += `<div class=\"method-result\">📅 作成日時: ${dynamicPerson.created}</div>`;\n    \n    objectContent.innerHTML = displayObject(dynamicPerson, \"動的生成オブジェクト\") + dynamicResults;\n    \n    console.log(\"✅ 動的オブジェクト生成完了:\", dynamicPerson);\n    console.log(\"⚡ 動的プロパティ設定例:\");\n    console.log(\"  動的な値設定:\", { name, age, job, city, hobby });\n    \n    return dynamicPerson;\n}\n\n// 6. 図書管理システム\nclass Book {\n    constructor(title, author, genre, pages) {\n        this.id = bookIdCounter++;\n        this.title = title;\n        this.author = author;\n        this.genre = genre;\n        this.pages = pages;\n        this.isAvailable = true;\n        this.borrowedDate = null;\n        this.addedDate = new Date().toLocaleDateString();\n    }\n    \n    // 貸出処理\n    borrow() {\n        if (this.isAvailable) {\n            this.isAvailable = false;\n            this.borrowedDate = new Date().toLocaleDateString();\n            return `📖 「${this.title}」を貸し出しました。`;\n        } else {\n            return `❌ 「${this.title}」は貸し出し中です。`;\n        }\n    }\n    \n    // 返却処理\n    return() {\n        if (!this.isAvailable) {\n            this.isAvailable = true;\n            this.borrowedDate = null;\n            return `📚 「${this.title}」が返却されました。`;\n        } else {\n            return `❓ 「${this.title}」は既に返却されています。`;\n        }\n    }\n    \n    // 書籍情報\n    getInfo() {\n        const status = this.isAvailable ? \"在庫あり\" : `貸出中（${this.borrowedDate}から）`;\n        return `📖 ${this.title} | 著者: ${this.author} | ${this.pages}ページ | ${status}`;\n    }\n}\n\nfunction initLibrarySystem() {\n    console.log(\"📚 図書管理システムを初期化中...\");\n    \n    librarySystem.style.display = \"block\";\n    \n    // サンプル書籍を追加\n    if (libraryBooks.length === 0) {\n        libraryBooks.push(new Book(\"JavaScript完全ガイド\", \"田中太郎\", \"プログラミング\", 450));\n        libraryBooks.push(new Book(\"Web デザインの基礎\", \"佐藤花子\", \"デザイン\", 320));\n        libraryBooks.push(new Book(\"データベース設計入門\", \"山田次郎\", \"技術書\", 280));\n    }\n    \n    resultDisplay.textContent = `図書館に${libraryBooks.length}冊登録済み`;\n    objectStatus.textContent = `✅ 図書管理システムを開始しました`;\n    \n    updateBookList();\n    \n    let systemInfo = `<div class=\"object-card\">\n        <h4>📚 図書管理システム</h4>\n        <div class=\"method-result\">📖 総書籍数: ${libraryBooks.length}冊</div>\n        <div class=\"method-result\">📚 利用可能: ${libraryBooks.filter(book => book.isAvailable).length}冊</div>\n        <div class=\"method-result\">📝 貸出中: ${libraryBooks.filter(book => !book.isAvailable).length}冊</div>\n    </div>`;\n    \n    objectContent.innerHTML = systemInfo;\n    \n    console.log(\"✅ 図書管理システム初期化完了:\", libraryBooks);\n}\n\nfunction updateBookList() {\n    bookList.innerHTML = '';\n    \n    libraryBooks.forEach(book => {\n        const bookElement = document.createElement('div');\n        bookElement.className = 'book-item';\n        \n        const statusColor = book.isAvailable ? '#27ae60' : '#e74c3c';\n        const statusText = book.isAvailable ? '在庫あり' : '貸出中';\n        \n        bookElement.innerHTML = `\n            <h5>${book.title}</h5>\n            <p><strong>著者:</strong> ${book.author} | <strong>ジャンル:</strong> ${book.genre} | <strong>ページ:</strong> ${book.pages}</p>\n            <p style=\"color: ${statusColor};\"><strong>状態:</strong> ${statusText}</p>\n            <p><strong>追加日:</strong> ${book.addedDate}</p>\n            <div class=\"book-actions\">\n                <button class=\"book-btn\" onclick=\"borrowBook(${book.id})\">📖 貸出</button>\n                <button class=\"book-btn\" onclick=\"returnBook(${book.id})\">📚 返却</button>\n                <button class=\"book-btn\" onclick=\"showBookInfo(${book.id})\">ℹ️ 詳細</button>\n            </div>\n        `;\n        \n        bookList.appendChild(bookElement);\n    });\n}\n\nfunction addBook() {\n    const title = document.getElementById(\"book-title\").value;\n    const author = document.getElementById(\"book-author\").value;\n    const genre = document.getElementById(\"book-genre\").value;\n    const pages = parseInt(document.getElementById(\"book-pages\").value);\n    \n    if (title && author && pages > 0) {\n        const newBook = new Book(title, author, genre, pages);\n        libraryBooks.push(newBook);\n        \n        updateBookList();\n        \n        resultDisplay.textContent = `「${title}」を追加しました`;\n        objectStatus.textContent = `✅ 新しい書籍をライブラリに追加完了`;\n        \n        // 入力フィールドをクリア\n        document.getElementById(\"book-title\").value = \"\";\n        document.getElementById(\"book-author\").value = \"\";\n        document.getElementById(\"book-pages\").value = \"300\";\n        \n        console.log(\"📖 書籍追加完了:\", newBook);\n    }\n}\n\n// グローバル関数（HTML から呼び出されるため）\nwindow.borrowBook = function(bookId) {\n    const book = libraryBooks.find(b => b.id === bookId);\n    if (book) {\n        const message = book.borrow();\n        alert(message);\n        updateBookList();\n        console.log(\"📖 貸出処理:\", message);\n    }\n};\n\nwindow.returnBook = function(bookId) {\n    const book = libraryBooks.find(b => b.id === bookId);\n    if (book) {\n        const message = book.return();\n        alert(message);\n        updateBookList();\n        console.log(\"📚 返却処理:\", message);\n    }\n};\n\nwindow.showBookInfo = function(bookId) {\n    const book = libraryBooks.find(b => b.id === bookId);\n    if (book) {\n        const info = book.getInfo();\n        alert(info);\n        console.log(\"ℹ️ 書籍詳細:\", info);\n    }\n};\n\n// ボタンイベントリスナー\n\n// 1. 基本オブジェクトボタン\ndocument.getElementById(\"basic-btn\").addEventListener(\"click\", function() {\n    console.log(\"👤 基本オブジェクトボタンがクリックされました\");\n    \n    totalOperations++;\n    basicOperations++;\n    createdObjects++;\n    \n    createBasicObject();\n    updateStats();\n});\n\n// 2. メソッド付きオブジェクトボタン\ndocument.getElementById(\"method-btn\").addEventListener(\"click\", function() {\n    console.log(\"🎭 メソッド付きオブジェクトボタンがクリックされました\");\n    \n    totalOperations++;\n    methodOperations++;\n    createdObjects++;\n    \n    createMethodObject();\n    updateStats();\n});\n\n// 3. ネストオブジェクトボタン\ndocument.getElementById(\"nested-btn\").addEventListener(\"click\", function() {\n    console.log(\"🏠 ネストオブジェクトボタンがクリックされました\");\n    \n    totalOperations++;\n    createdObjects++;\n    \n    createNestedObject();\n    updateStats();\n});\n\n// 4. オブジェクト配列ボタン\ndocument.getElementById(\"array-btn\").addEventListener(\"click\", function() {\n    console.log(\"👥 オブジェクト配列ボタンがクリックされました\");\n    \n    totalOperations++;\n    createdObjects += 3; // 3人のチームメンバー\n    \n    createObjectArray();\n    updateStats();\n});\n\n// 5. 動的生成ボタン\ndocument.getElementById(\"dynamic-btn\").addEventListener(\"click\", function() {\n    console.log(\"⚡ 動的生成ボタンがクリックされました\");\n    \n    totalOperations++;\n    dynamicOperations++;\n    createdObjects++;\n    \n    createDynamicObject();\n    updateStats();\n});\n\n// 6. 図書管理システムボタン\ndocument.getElementById(\"system-btn\").addEventListener(\"click\", function() {\n    console.log(\"📚 図書管理システムボタンがクリックされました\");\n    \n    totalOperations++;\n    libraryOperations++;\n    \n    initLibrarySystem();\n    updateStats();\n});\n\n// 書籍追加ボタン\ndocument.getElementById(\"add-book-btn\").addEventListener(\"click\", function() {\n    console.log(\"📖 書籍追加ボタンがクリックされました\");\n    \n    createdObjects++;\n    addBook();\n    updateStats();\n});\n\n// 初期化\nupdateStats();\n\nconsole.log(\"✅ オブジェクトシステムが初期化されました！\");\nconsole.log(\"🏗️ オブジェクトの基本概念:\");\nconsole.log(\"  - オブジェクトリテラル: 基本的なオブジェクト作成方法\");\nconsole.log(\"  - プロパティ: オブジェクトが持つデータ\");\nconsole.log(\"  - メソッド: オブジェクトが持つ関数\");\nconsole.log(\"  - this: オブジェクト自身を参照するキーワード\");\nconsole.log(\"💡 各ボタンをクリックして、オブジェクトの様々な使い方を体験してください！\");\n\n// オブジェクトの例をコンソールに表示\nsetTimeout(() => {\n    console.log(\"🎯 オブジェクトデモンストレーション:\");\n    const demoObject = {\n        name: \"デモオブジェクト\",\n        getValue() { return \"メソッドの戻り値\"; }\n    };\n    console.log(\"  サンプルオブジェクト:\", demoObject);\n    console.log(\"  プロパティアクセス:\", demoObject.name);\n    console.log(\"  メソッド実行:\", demoObject.getValue());\n}, 2000);"
    }
  },
  "expectedResult": {
    "basicObject": "基本オブジェクトでプロパティアクセスが動作する",
    "methodObject": "メソッド付きオブジェクトでthisが正しく動作する",
    "nestedObject": "ネストしたオブジェクトで階層アクセスが動作する",
    "objectArray": "オブジェクト配列でチーム管理が動作する",
    "dynamicCreation": "入力値に基づく動的オブジェクト生成が動作する",
    "classSystem": "ES6クラスを使った図書管理システムが動作する",
    "behavior": "6つのオブジェクト学習システムが統計と共に動作する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}