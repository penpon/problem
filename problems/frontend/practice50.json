{
  "id": "practice50",
  "title": "基本計算機の完成",
  "description": "これまでの計算機機能をまとめ、きれいなデザインとエラーハンドリングを追加した完成版の基本計算機を作成します",
  "category": "practical-projects",
  "difficulty": 4,
  "instructions": [
    "これまでの機能（四則演算、クリアボタン）をまとめる",
    "CSSできれいで使いやすいデザインを追加する",
    "エラーハンドリング（0で割り算など）を実装する",
    "選択中の演算子をハイライト表示する機能を追加する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ステップ50: 基本的な計算機</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"calculator-container\">\n        <div class=\"calculator\">\n            <div class=\"header\">\n                <h1>🧮 基本計算機</h1>\n                <p>四則演算の基本を学ぼう</p>\n            </div>\n            \n            <!-- 表示画面 -->\n            <div class=\"display\" id=\"display\">0</div>\n            \n            <!-- ボタン配置（4×4のグリッド） -->\n            <div class=\"buttons\">\n                <!-- 1行目：クリア、÷ -->\n                <button class=\"btn btn-clear\" onclick=\"clearAll()\">C</button>\n                <button class=\"btn btn-function\" onclick=\"clearEntry()\">CE</button>\n                <button class=\"btn btn-function\" onclick=\"percentage()\">%</button>\n                <button class=\"btn btn-operator\" onclick=\"setOperator('/')\" title=\"割り算\">÷</button>\n                \n                <!-- 2行目：7, 8, 9, × -->\n                <button class=\"btn btn-number\" onclick=\"inputNumber(7)\">7</button>\n                <button class=\"btn btn-number\" onclick=\"inputNumber(8)\">8</button>\n                <button class=\"btn btn-number\" onclick=\"inputNumber(9)\">9</button>\n                <button class=\"btn btn-operator\" onclick=\"setOperator('*')\" title=\"掛け算\">×</button>\n                \n                <!-- 3行目：4, 5, 6, - -->\n                <button class=\"btn btn-number\" onclick=\"inputNumber(4)\">4</button>\n                <button class=\"btn btn-number\" onclick=\"inputNumber(5)\">5</button>\n                <button class=\"btn btn-number\" onclick=\"inputNumber(6)\">6</button>\n                <button class=\"btn btn-operator\" onclick=\"setOperator('-')\" title=\"引き算\">-</button>\n                \n                <!-- 4行目：1, 2, 3, + -->\n                <button class=\"btn btn-number\" onclick=\"inputNumber(1)\">1</button>\n                <button class=\"btn btn-number\" onclick=\"inputNumber(2)\">2</button>\n                <button class=\"btn btn-number\" onclick=\"inputNumber(3)\">3</button>\n                <button class=\"btn btn-operator\" onclick=\"setOperator('+')\" title=\"足し算\">+</button>\n                \n                <!-- 5行目：±, 0, ., = -->\n                <button class=\"btn btn-function\" onclick=\"toggleSign()\">±</button>\n                <button class=\"btn btn-number\" onclick=\"inputNumber(0)\">0</button>\n                <button class=\"btn btn-function\" onclick=\"inputDecimal()\">.</button>\n                <button class=\"btn btn-equals\" onclick=\"calculate()\" title=\"計算実行\">=</button>\n            </div>\n        </div>\n        \n        <!-- 説明パネル -->\n        <div class=\"info-panel\">\n            <div class=\"info-section\">\n                <h3>🎯 使い方</h3>\n                <p><strong>基本操作:</strong></p>\n                <ul>\n                    <li>数字ボタンで数字を入力</li>\n                    <li>+、-、×、÷ で演算子を選択</li>\n                    <li>= ボタンで計算実行</li>\n                    <li>C ボタンでリセット</li>\n                </ul>\n            </div>\n            \n            <div class=\"info-section\">\n                <h3>📝 計算例</h3>\n                <p><strong>基本計算:</strong></p>\n                <ul>\n                    <li>5 + 3 = 8</li>\n                    <li>10 - 4 = 6</li>\n                    <li>6 × 7 = 42</li>\n                    <li>15 ÷ 3 = 5</li>\n                </ul>\n            </div>\n            \n            <div class=\"info-section\">\n                <h3>⚠️ 注意点</h3>\n                <p><strong>エラーについて:</strong></p>\n                <ul>\n                    <li>0で割るとエラーが表示されます</li>\n                    <li>C ボタンで初期状態に戻ります</li>\n                    <li>小数点は1つまで入力可能です</li>\n                </ul>\n            </div>\n            \n            <!-- 現在の操作状況 -->\n            <div class=\"status\" id=\"status\">\n                基本計算機が起動しました\n            </div>\n        </div>\n    </div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "/* ============================================\n   基本計算機のスタイルシート\n   ============================================ */\n\n/* 全体のリセットと基本設定 */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Arial', sans-serif;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    padding: 20px;\n}\n\n/* メインコンテナ */\n.calculator-container {\n    max-width: 1000px;\n    margin: 0 auto;\n    display: grid;\n    grid-template-columns: 400px 1fr;\n    gap: 30px;\n}\n\n/* 計算機本体 */\n.calculator {\n    background: white;\n    border-radius: 15px;\n    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);\n    padding: 25px;\n    height: fit-content;\n}\n\n/* ヘッダー部分 */\n.header {\n    text-align: center;\n    margin-bottom: 25px;\n}\n\n.header h1 {\n    color: #333;\n    margin-bottom: 10px;\n    font-size: 24px;\n}\n\n.header p {\n    color: #666;\n    font-size: 14px;\n}\n\n/* 表示画面 */\n.display {\n    background: #1a1a1a;\n    color: white;\n    padding: 20px;\n    border-radius: 8px;\n    margin-bottom: 20px;\n    text-align: right;\n    font-size: 36px;\n    font-weight: bold;\n    min-height: 80px;\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    letter-spacing: 1px;\n    word-break: break-all;\n}\n\n.display.error {\n    color: #ff6b6b;\n    font-size: 20px;\n}\n\n/* ボタンコンテナ */\n.buttons {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 10px;\n}\n\n/* ボタンの基本スタイル */\n.btn {\n    border: none;\n    border-radius: 8px;\n    padding: 20px;\n    font-size: 18px;\n    font-weight: bold;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    min-height: 60px;\n}\n\n.btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n}\n\n.btn:active {\n    transform: translateY(0);\n}\n\n/* ボタンの種類別スタイル */\n.btn-number {\n    background: #f8f9fa;\n    color: #333;\n}\n\n.btn-number:hover {\n    background: #e9ecef;\n}\n\n.btn-operator {\n    background: #007bff;\n    color: white;\n}\n\n.btn-operator:hover {\n    background: #0056b3;\n}\n\n.btn-equals {\n    background: #28a745;\n    color: white;\n}\n\n.btn-equals:hover {\n    background: #1e7e34;\n}\n\n.btn-clear {\n    background: #dc3545;\n    color: white;\n}\n\n.btn-clear:hover {\n    background: #c82333;\n}\n\n.btn-function {\n    background: #6c757d;\n    color: white;\n}\n\n.btn-function:hover {\n    background: #545b62;\n}\n\n/* 情報パネル */\n.info-panel {\n    background: white;\n    border-radius: 12px;\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);\n    padding: 25px;\n    height: fit-content;\n}\n\n.info-section {\n    margin-bottom: 25px;\n}\n\n.info-section h3 {\n    color: #333;\n    margin-bottom: 10px;\n    font-size: 18px;\n}\n\n.info-section p {\n    color: #666;\n    margin-bottom: 8px;\n    font-weight: bold;\n}\n\n.info-section ul {\n    margin-left: 20px;\n}\n\n.info-section li {\n    color: #555;\n    margin-bottom: 5px;\n    line-height: 1.4;\n}\n\n/* ステータス表示 */\n.status {\n    background: #e3f2fd;\n    border: 1px solid #bbdefb;\n    border-radius: 6px;\n    padding: 12px;\n    text-align: center;\n    color: #1976d2;\n    font-size: 14px;\n    margin-top: 20px;\n}\n\n/* レスポンシブデザイン */\n@media (max-width: 800px) {\n    .calculator-container {\n        grid-template-columns: 1fr;\n        gap: 20px;\n    }\n    \n    .calculator {\n        order: 1;\n    }\n    \n    .info-panel {\n        order: 2;\n    }\n    \n    .display {\n        font-size: 28px;\n        min-height: 60px;\n    }\n    \n    .btn {\n        padding: 15px;\n        font-size: 16px;\n        min-height: 50px;\n    }\n    \n    .header h1 {\n        font-size: 20px;\n    }\n}\n\n@media (max-width: 480px) {\n    body {\n        padding: 10px;\n    }\n    \n    .calculator {\n        padding: 15px;\n    }\n    \n    .info-panel {\n        padding: 15px;\n    }\n    \n    .display {\n        font-size: 24px;\n        padding: 15px;\n        min-height: 50px;\n    }\n    \n    .btn {\n        padding: 12px;\n        font-size: 14px;\n        min-height: 45px;\n    }\n    \n    .buttons {\n        gap: 8px;\n    }\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "/* ============================================\n   基本計算機のJavaScriptファイル\n   ============================================ */\n\n// 計算機の状態を管理する変数\nlet currentInput = '0';        // 現在表示されている数字\nlet previousNumber = null;     // 前に入力された数字\nlet operator = null;           // 選択された演算子（+、-、*、/）\nlet waitingForNewInput = false; // 新しい数字の入力待ちかどうか\n\n// DOM要素を取得\nconst display = document.getElementById('display');\nconst status = document.getElementById('status');\n\n/**\n * 表示を更新する関数\n */\nfunction updateDisplay() {\n    display.textContent = currentInput;\n    display.classList.remove('error');\n    console.log('表示更新:', currentInput);\n}\n\n/**\n * ステータスメッセージを更新する関数\n */\nfunction updateStatus(message) {\n    const timestamp = new Date().toLocaleTimeString();\n    status.textContent = `[${timestamp}] ${message}`;\n    console.log('ステータス:', message);\n}\n\n/**\n * 数字ボタンが押された時の処理\n * @param {number} number - 押された数字（0-9）\n */\nfunction inputNumber(number) {\n    console.log(`数字ボタン \"${number}\" が押されました`);\n    \n    // 新しい入力を待っている場合、または表示が0の場合\n    if (waitingForNewInput || currentInput === '0') {\n        currentInput = number.toString();\n        waitingForNewInput = false;\n    } else {\n        // 既に数字がある場合は末尾に追加\n        currentInput += number.toString();\n    }\n    \n    updateDisplay();\n    updateStatus(`数字 \"${number}\" を入力しました`);\n}\n\n/**\n * 小数点ボタンが押された時の処理\n */\nfunction inputDecimal() {\n    console.log('小数点ボタンが押されました');\n    \n    // 新しい入力を待っている場合\n    if (waitingForNewInput) {\n        currentInput = '0.';\n        waitingForNewInput = false;\n    } else if (!currentInput.includes('.')) {\n        // まだ小数点が含まれていない場合のみ追加\n        currentInput += '.';\n    } else {\n        // すでに小数点がある場合は何もしない\n        updateStatus('小数点は既に入力済みです');\n        return;\n    }\n    \n    updateDisplay();\n    updateStatus('小数点を入力しました');\n}\n\n/**\n * 演算子ボタンが押された時の処理\n * @param {string} op - 演算子（+、-、*、/）\n */\nfunction setOperator(op) {\n    console.log(`演算子 \"${op}\" が選択されました`);\n    \n    const current = parseFloat(currentInput);\n    \n    // 前の数字が既にある場合、先に計算を実行\n    if (previousNumber !== null && operator !== null && !waitingForNewInput) {\n        const result = performCalculation();\n        if (result !== null) {\n            currentInput = result.toString();\n            previousNumber = result;\n            updateDisplay();\n        }\n    } else {\n        previousNumber = current;\n    }\n    \n    operator = op;\n    waitingForNewInput = true;\n    \n    const operatorNames = {\n        '+': '足し算',\n        '-': '引き算',\n        '*': '掛け算',\n        '/': '割り算'\n    };\n    \n    updateStatus(`${operatorNames[op]}（${getOperatorSymbol(op)}）を選択しました`);\n}\n\n/**\n * 計算実行ボタン（=）が押された時の処理\n */\nfunction calculate() {\n    console.log('計算実行ボタンが押されました');\n    \n    if (operator === null || previousNumber === null) {\n        updateStatus('❌ 計算する式が不完全です');\n        return;\n    }\n    \n    const current = parseFloat(currentInput);\n    const prev = previousNumber;\n    const op = operator;\n    \n    const result = performCalculation();\n    if (result !== null) {\n        const expression = `${prev} ${getOperatorSymbol(op)} ${current}`;\n        \n        currentInput = result.toString();\n        previousNumber = null;\n        operator = null;\n        waitingForNewInput = true;\n        \n        updateDisplay();\n        updateStatus(`✅ 計算完了: ${expression} = ${result}`);\n    }\n}\n\n/**\n * 実際の計算処理を行う関数\n * @returns {number|null} 計算結果、エラーの場合はnull\n */\nfunction performCalculation() {\n    const prev = previousNumber;\n    const current = parseFloat(currentInput);\n    \n    console.log(`計算実行: ${prev} ${operator} ${current}`);\n    \n    try {\n        let result;\n        \n        switch (operator) {\n            case '+':\n                result = prev + current;\n                break;\n            case '-':\n                result = prev - current;\n                break;\n            case '*':\n                result = prev * current;\n                break;\n            case '/':\n                if (current === 0) {\n                    throw new Error('0で割ることはできません');\n                }\n                result = prev / current;\n                break;\n            default:\n                throw new Error('未対応の演算子です');\n        }\n        \n        // 小数点以下の桁数を制限（表示の都合上）\n        if (result % 1 !== 0) {\n            result = Math.round(result * 100000000) / 100000000;\n        }\n        \n        console.log(`計算結果: ${result}`);\n        return result;\n        \n    } catch (error) {\n        console.error('計算エラー:', error.message);\n        showError(error.message);\n        return null;\n    }\n}\n\n/**\n * 符号変更ボタン（±）が押された時の処理\n */\nfunction toggleSign() {\n    console.log('符号変更ボタンが押されました');\n    \n    if (currentInput !== '0') {\n        if (currentInput.startsWith('-')) {\n            currentInput = currentInput.substring(1);\n        } else {\n            currentInput = '-' + currentInput;\n        }\n        \n        updateDisplay();\n        updateStatus('符号を変更しました');\n    } else {\n        updateStatus('0の符号は変更できません');\n    }\n}\n\n/**\n * パーセントボタン（%）が押された時の処理\n */\nfunction percentage() {\n    console.log('パーセントボタンが押されました');\n    \n    const current = parseFloat(currentInput);\n    const result = current / 100;\n    \n    currentInput = result.toString();\n    updateDisplay();\n    updateStatus(`パーセント計算: ${current}% = ${result}`);\n}\n\n/**\n * 全クリア（C）ボタンが押された時の処理\n */\nfunction clearAll() {\n    console.log('全クリアボタンが押されました');\n    \n    currentInput = '0';\n    previousNumber = null;\n    operator = null;\n    waitingForNewInput = false;\n    \n    updateDisplay();\n    updateStatus('🔄 計算機をリセットしました');\n}\n\n/**\n * エントリークリア（CE）ボタンが押された時の処理\n */\nfunction clearEntry() {\n    console.log('エントリークリアボタンが押されました');\n    \n    currentInput = '0';\n    waitingForNewInput = false;\n    \n    updateDisplay();\n    updateStatus('🔄 現在の入力をクリアしました');\n}\n\n/**\n * エラーを表示する関数\n * @param {string} message - エラーメッセージ\n */\nfunction showError(message) {\n    display.textContent = `エラー: ${message}`;\n    display.classList.add('error');\n    updateStatus(`❌ ${message}`);\n    \n    // 3秒後に自動的にリセット\n    setTimeout(() => {\n        clearAll();\n    }, 3000);\n}\n\n/**\n * 演算子記号を表示用に変換する関数\n * @param {string} op - 演算子\n * @returns {string} 表示用の演算子記号\n */\nfunction getOperatorSymbol(op) {\n    const symbols = {\n        '+': '+',\n        '-': '-',\n        '*': '×',\n        '/': '÷'\n    };\n    return symbols[op] || op;\n}\n\n/**\n * キーボード入力への対応\n */\ndocument.addEventListener('keydown', function(event) {\n    const key = event.key;\n    \n    // 数字キー（0-9）\n    if (key >= '0' && key <= '9') {\n        inputNumber(parseInt(key));\n        event.preventDefault();\n    }\n    // 演算子キー\n    else if (key === '+') {\n        setOperator('+');\n        event.preventDefault();\n    }\n    else if (key === '-') {\n        setOperator('-');\n        event.preventDefault();\n    }\n    else if (key === '*') {\n        setOperator('*');\n        event.preventDefault();\n    }\n    else if (key === '/') {\n        setOperator('/');\n        event.preventDefault();\n    }\n    // 計算実行キー\n    else if (key === 'Enter' || key === '=') {\n        calculate();\n        event.preventDefault();\n    }\n    // クリアキー\n    else if (key === 'Escape') {\n        clearAll();\n        event.preventDefault();\n    }\n    else if (key === 'Backspace') {\n        clearEntry();\n        event.preventDefault();\n    }\n    // 小数点キー\n    else if (key === '.') {\n        inputDecimal();\n        event.preventDefault();\n    }\n});\n\n/**\n * 初期化処理\n */\nfunction initialize() {\n    console.log('🧮 基本計算機が起動しました');\n    updateDisplay();\n    updateStatus('基本計算機が起動しました');\n}\n\n// ページ読み込み完了時に初期化実行\ndocument.addEventListener('DOMContentLoaded', initialize);"
    }
  },
  "expectedResult": {
    "professionalDesign": "プロレベルの美しいデザインが適用される",
    "operatorHighlight": "選択中の演算子がハイライト表示される",
    "errorHandling": "0で割り算などのエラーが適切に処理される",
    "completeFeatures": "すべての基本機能が統合されて動作する",
    "userExperience": "優れたユーザーエクスペリエンスを提供する",
    "behavior": "実用性とデザイン性を兼ね備えた完成版計算機が完成する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}