{
  "id": "js-advanced-11",
  "title": "関数実用システム",
  "description": "複数の関数を組み合わせた実用的なシステムを構築し、関数の再利用性と連携について理解します",
  "category": "javascript-advanced",
  "difficulty": 3,
  "instructions": [
    "複数関数の連携方法を学ぶ",
    "実用的な計算システム（BMI計算等）を構築する",
    "関数の再利用性の理解を深める",
    "アロー関数の基本的な使い方を習得する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ステップ17.5b - 関数実用システム</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🚀 関数実用システム</h1>\n        <div class=\"step-info\">\n            <strong>ステップ17.5b - 関数を組み合わせた実用的なシステムを学ぼう</strong>\n        </div>\n        \n        <div class=\"celebration\">🚀 🔧 ✨</div>\n        \n        <div class=\"info-box\">\n            <h3>📚 このステップで学ぶこと</h3>\n            <ul>\n                <li><strong>複数関数の連携</strong>方法</li>\n                <li><strong>実用的な計算システム</strong>（BMI計算等）の構築</li>\n                <li><strong>アロー関数</strong>の基本的な使い方</li>\n                <li><strong>関数の再利用性</strong>とシステム設計</li>\n            </ul>\n        </div>\n        \n        <div class=\"demo-section\">\n            <h3>🚀 関数システムデモ</h3>\n            \n            <div class=\"function-display\">\n                <div class=\"result-main\" id=\"result-display\">実用システムを実行してください</div>\n                <div class=\"function-status\" id=\"function-status\">システム待機中 - ボタンを押して実行してください</div>\n            </div>\n            \n            <div class=\"button-grid\">\n                <button class=\"function-btn btn-bmi\" id=\"bmi-btn\">\n                    📊 BMI計算システム\n                </button>\n                \n                <button class=\"function-btn btn-arrow\" id=\"arrow-btn\">\n                    🏹 アロー関数デモ\n                </button>\n                \n                <button class=\"function-btn btn-comprehensive\" id=\"comprehensive-btn\">\n                    🧮 総合計算システム\n                </button>\n                \n                <button class=\"function-btn btn-chain\" id=\"chain-btn\">\n                    🔄 関数連携デモ\n                </button>\n            </div>\n        </div>\n        \n        <div class=\"input-section\">\n            <h3>📝 システム入力</h3>\n            \n            <div class=\"calculation-area\">\n                <h4>📊 BMI計算システム</h4>\n                <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px;\">\n                    <div class=\"input-group\">\n                        <label for=\"height-input\">身長 (cm):</label>\n                        <input type=\"number\" id=\"height-input\" value=\"170\" min=\"50\" max=\"250\">\n                    </div>\n                    <div class=\"input-group\">\n                        <label for=\"weight-input\">体重 (kg):</label>\n                        <input type=\"number\" id=\"weight-input\" value=\"60\" min=\"20\" max=\"300\" step=\"0.1\">\n                    </div>\n                </div>\n                <div class=\"calculation-result\" id=\"bmi-result\">\n                    BMI結果が表示されます\n                </div>\n            </div>\n            \n            <div class=\"calculation-area\">\n                <h4>🧮 総合計算システム</h4>\n                <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 15px;\">\n                    <div class=\"input-group\">\n                        <label for=\"num1-input\">数値1:</label>\n                        <input type=\"number\" id=\"num1-input\" value=\"12\" step=\"any\">\n                    </div>\n                    <div class=\"input-group\">\n                        <label for=\"num2-input\">数値2:</label>\n                        <input type=\"number\" id=\"num2-input\" value=\"8\" step=\"any\">\n                    </div>\n                </div>\n                <div class=\"calculation-result\" id=\"calc-result\">\n                    計算結果が表示されます\n                </div>\n            </div>\n            \n            <div class=\"calculation-area\">\n                <h4>🏹 アロー関数テスト用</h4>\n                <div class=\"input-group\">\n                    <label for=\"name-input\">名前を入力してください:</label>\n                    <input type=\"text\" id=\"name-input\" placeholder=\"例: 田中太郎\" value=\"ゲスト\">\n                </div>\n                <div class=\"input-group\">\n                    <label for=\"age-input\">年齢を入力してください:</label>\n                    <input type=\"number\" id=\"age-input\" placeholder=\"例: 25\" value=\"25\" min=\"1\" max=\"150\">\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🔧 従来の関数 vs アロー関数</h3>\n            <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 15px 0;\">\n                <div style=\"background: #e8f5e8; padding: 15px; border-radius: 10px;\">\n                    <h4 style=\"margin-top: 0; color: #27ae60;\">従来の関数</h4>\n                    <div class=\"code-example\">\nfunction greet(name) {\n    return \"こんにちは、\" + name + \"さん\";\n}\n\nlet message = greet(\"田中\");\n                    </div>\n                </div>\n                <div style=\"background: #e3f2fd; padding: 15px; border-radius: 10px;\">\n                    <h4 style=\"margin-top: 0; color: #2196f3;\">アロー関数</h4>\n                    <div class=\"code-example\">\nconst greet = (name) => {\n    return \"こんにちは、\" + name + \"さん\";\n};\n\nlet message = greet(\"田中\");\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"system-overview\">\n            <h3>🏗️ BMI計算システムの構成</h3>\n            <div class=\"system-flow\">\n                <div class=\"flow-item\">\n                    <div class=\"flow-number\">1</div>\n                    <div class=\"flow-content\">\n                        <strong>calculateBMI()</strong><br>\n                        身長・体重からBMI値を計算\n                    </div>\n                </div>\n                <div class=\"flow-arrow\">→</div>\n                <div class=\"flow-item\">\n                    <div class=\"flow-number\">2</div>\n                    <div class=\"flow-content\">\n                        <strong>getBMICategory()</strong><br>\n                        BMI値から判定を決定\n                    </div>\n                </div>\n                <div class=\"flow-arrow\">→</div>\n                <div class=\"flow-item\">\n                    <div class=\"flow-number\">3</div>\n                    <div class=\"flow-content\">\n                        <strong>getBMIColor()</strong><br>\n                        判定に応じた色を決定\n                    </div>\n                </div>\n                <div class=\"flow-arrow\">→</div>\n                <div class=\"flow-item\">\n                    <div class=\"flow-number\">4</div>\n                    <div class=\"flow-content\">\n                        <strong>runBMISystem()</strong><br>\n                        すべての関数を統合\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"stats-section\">\n            <h4>📊 システム実行統計</h4>\n            <div class=\"stats-grid\">\n                <div class=\"stat-item\">\n                    <div>BMI計算実行回数</div>\n                    <div class=\"stat-number\" id=\"bmi-calls\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>アロー関数実行回数</div>\n                    <div class=\"stat-number\" id=\"arrow-calls\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>総合計算実行回数</div>\n                    <div class=\"stat-number\" id=\"comprehensive-calls\">0</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div>関数連携実行回数</div>\n                    <div class=\"stat-number\" id=\"chain-calls\">0</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🌟 実装されている実用システム</h3>\n            <ul>\n                <li><strong>📊 BMI計算システム</strong>: 身長・体重からBMI値と健康判定を算出する統合システム</li>\n                <li><strong>🏹 アロー関数デモ</strong>: ES6の新しい関数記法とその利点を体験</li>\n                <li><strong>🧮 総合計算システム</strong>: 複数の数学計算を統合したシステム</li>\n                <li><strong>🔄 関数連携デモ</strong>: 関数同士が連携して動作するシステムの実例</li>\n            </ul>\n        </div>\n        \n        <div class=\"instruction\">\n            <h3>🚀 すべてのシステムを試してみよう！</h3>\n            <p>4つのボタンをすべてクリックして、実用的な関数システムの動作を確認してください。特にBMI計算システムでは、身長・体重を変更して様々な結果を試してみましょう。</p>\n            <p><strong>F12</strong>で開発者ツールを開き、<strong>Console</strong>タブで各関数がどのように連携しているかも確認できます！</p>\n        </div>\n        \n        <div class=\"next-step\">\n            <h3>🎓 次のステップ</h3>\n            <p>このステップをマスターしたら、<strong>17.6-object-basics</strong>でオブジェクトと関数の組み合わせを学習しましょう！</p>\n        </div>\n    </div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "body {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n    max-width: 1200px;\n    margin: 40px auto;\n    padding: 20px;\n    line-height: 1.6;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: #2c3e50;\n    min-height: 100vh;\n}\n\n.container {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 40px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    color: #8e44ad;\n    text-align: center;\n    font-size: 2.5rem;\n    margin-bottom: 10px;\n}\n\n.step-info {\n    text-align: center;\n    margin-bottom: 30px;\n    opacity: 0.8;\n    color: #7f8c8d;\n    font-size: 1.1rem;\n}\n\n.demo-section {\n    background: linear-gradient(135deg, #8e44ad 0%, #3498db 100%);\n    color: white;\n    padding: 30px;\n    border-radius: 20px;\n    margin: 25px 0;\n}\n\n.function-display {\n    background: rgba(255, 255, 255, 0.15);\n    padding: 30px;\n    border-radius: 15px;\n    margin: 20px 0;\n    text-align: center;\n}\n\n.result-main {\n    font-size: 2.2rem;\n    font-weight: bold;\n    color: #FFE135;\n    margin: 20px 0;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n    min-height: 70px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.function-status {\n    font-size: 1.2rem;\n    margin: 15px 0;\n    padding: 10px;\n    background: rgba(255, 255, 255, 0.2);\n    border-radius: 10px;\n}\n\n.button-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 15px;\n    margin: 25px 0;\n}\n\n.function-btn {\n    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);\n    color: white;\n    border: none;\n    padding: 15px 20px;\n    font-size: 1rem;\n    border-radius: 12px;\n    cursor: pointer;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n    transition: all 0.3s ease;\n    font-weight: bold;\n}\n\n.function-btn:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);\n}\n\n.function-btn:active {\n    transform: translateY(0);\n}\n\n.btn-bmi { \n    background: linear-gradient(135deg, #e74c3c, #c0392b); \n}\n\n.btn-arrow { \n    background: linear-gradient(135deg, #9b59b6, #8e44ad); \n}\n\n.btn-comprehensive { \n    background: linear-gradient(135deg, #f39c12, #e67e22); \n}\n\n.btn-chain { \n    background: linear-gradient(135deg, #27ae60, #229954); \n}\n\n.input-section {\n    background: rgba(255, 255, 255, 0.9);\n    color: #2c3e50;\n    padding: 30px;\n    border-radius: 15px;\n    margin: 20px 0;\n}\n\n.input-group {\n    margin: 15px 0;\n}\n\n.input-group label {\n    display: block;\n    margin-bottom: 8px;\n    font-weight: bold;\n    color: #8e44ad;\n    font-size: 1rem;\n}\n\n.input-group input {\n    width: 100%;\n    padding: 12px;\n    border: 2px solid #bdc3c7;\n    border-radius: 8px;\n    font-size: 1rem;\n    transition: border-color 0.3s;\n}\n\n.input-group input:focus {\n    outline: none;\n    border-color: #8e44ad;\n}\n\n.calculation-area {\n    background: #f8f9fa;\n    padding: 20px;\n    border-radius: 15px;\n    margin: 20px 0;\n    border: 2px solid #8e44ad;\n}\n\n.calculation-area h4 {\n    color: #8e44ad;\n    margin-top: 0;\n}\n\n.calculation-result {\n    background: #e8f5e8;\n    color: #27ae60;\n    padding: 15px;\n    border-radius: 10px;\n    margin: 15px 0;\n    font-weight: bold;\n    font-size: 1.1rem;\n}\n\n.info-box {\n    background: #f8f9fa;\n    padding: 25px;\n    border-radius: 15px;\n    margin: 20px 0;\n    border-left: 5px solid #8e44ad;\n}\n\n.info-box h3 {\n    color: #8e44ad;\n    margin-top: 0;\n}\n\n.code-example {\n    background: #2c3e50;\n    color: #ecf0f1;\n    padding: 15px;\n    border-radius: 8px;\n    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n    margin: 15px 0;\n    border: 1px solid #34495e;\n    font-size: 0.9rem;\n    line-height: 1.4;\n}\n\n.system-overview {\n    background: rgba(52, 152, 219, 0.1);\n    padding: 25px;\n    border-radius: 15px;\n    margin: 20px 0;\n    border: 2px solid #3498db;\n}\n\n.system-overview h3 {\n    color: #3498db;\n    margin-top: 0;\n    text-align: center;\n}\n\n.system-flow {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 10px;\n    margin: 20px 0;\n}\n\n.flow-item {\n    background: white;\n    border: 2px solid #3498db;\n    border-radius: 12px;\n    padding: 15px;\n    text-align: center;\n    min-width: 150px;\n    position: relative;\n}\n\n.flow-number {\n    background: #3498db;\n    color: white;\n    width: 25px;\n    height: 25px;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    margin: 0 auto 10px;\n}\n\n.flow-content {\n    font-size: 0.9rem;\n    line-height: 1.3;\n}\n\n.flow-arrow {\n    font-size: 1.5rem;\n    color: #3498db;\n    font-weight: bold;\n}\n\n.stats-section {\n    background: rgba(52, 73, 94, 0.1);\n    padding: 20px;\n    border-radius: 15px;\n    margin: 20px 0;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n    gap: 15px;\n    margin: 15px 0;\n}\n\n.stat-item {\n    background: white;\n    padding: 15px;\n    border-radius: 10px;\n    text-align: center;\n    border: 2px solid #8e44ad;\n}\n\n.stat-number {\n    font-size: 1.8rem;\n    font-weight: bold;\n    color: #8e44ad;\n}\n\n.instruction {\n    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n    color: white;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 20px 0;\n}\n\n.next-step {\n    background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);\n    color: #2c3e50;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 20px 0;\n    text-align: center;\n}\n\n.celebration {\n    font-size: 3rem;\n    text-align: center;\n    margin: 20px 0;\n}\n\n/* レスポンシブ対応 */\n@media (max-width: 768px) {\n    .system-flow {\n        flex-direction: column;\n    }\n    \n    .flow-arrow {\n        transform: rotate(90deg);\n    }\n    \n    .button-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .calculation-area > div[style*=\"grid\"] {\n        grid-template-columns: 1fr !important;\n    }\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "console.log(\"🚀 ステップ17.5b: 関数実用システムを開始します！\");\nconsole.log(\"=============================================\");\n\n// 統計用変数\nlet bmiCalls = 0;\nlet arrowCalls = 0;\nlet comprehensiveCalls = 0;\nlet chainCalls = 0;\n\n// DOM要素の取得\nconst resultDisplay = document.getElementById(\"result-display\");\nconst functionStatus = document.getElementById(\"function-status\");\nconst heightInput = document.getElementById(\"height-input\");\nconst weightInput = document.getElementById(\"weight-input\");\nconst num1Input = document.getElementById(\"num1-input\");\nconst num2Input = document.getElementById(\"num2-input\");\nconst nameInput = document.getElementById(\"name-input\");\nconst ageInput = document.getElementById(\"age-input\");\nconst bmiResult = document.getElementById(\"bmi-result\");\nconst calcResult = document.getElementById(\"calc-result\");\n\n// 統計更新関数\nfunction updateStats() {\n    document.getElementById(\"bmi-calls\").textContent = bmiCalls;\n    document.getElementById(\"arrow-calls\").textContent = arrowCalls;\n    document.getElementById(\"comprehensive-calls\").textContent = comprehensiveCalls;\n    document.getElementById(\"chain-calls\").textContent = chainCalls;\n}\n\n// ========================================\n// BMI計算システム（複数の関数を連携）\n// ========================================\n\n// 1. BMI値を計算する関数\nfunction calculateBMI(height, weight) {\n    console.log(`📊 BMI計算開始... (height: ${height}cm, weight: ${weight}kg)`);\n    \n    // 身長をメートルに変換\n    const heightInMeters = height / 100;\n    \n    // BMI計算: 体重(kg) ÷ (身長(m) × 身長(m))\n    const bmi = weight / (heightInMeters * heightInMeters);\n    const roundedBMI = Math.round(bmi * 10) / 10; // 小数点第1位まで\n    \n    console.log(`  計算結果: BMI = ${roundedBMI}`);\n    return roundedBMI;\n}\n\n// 2. BMI値から判定を決める関数\nfunction getBMICategory(bmi) {\n    console.log(`📋 BMI判定中... (BMI: ${bmi})`);\n    \n    let category;\n    if (bmi < 18.5) {\n        category = \"低体重\";\n    } else if (bmi < 25) {\n        category = \"標準体重\";\n    } else if (bmi < 30) {\n        category = \"肥満（1度）\";\n    } else if (bmi < 35) {\n        category = \"肥満（2度）\";\n    } else {\n        category = \"肥満（3度）\";\n    }\n    \n    console.log(`  判定結果: ${category}`);\n    return category;\n}\n\n// 3. 判定に応じた色を決める関数\nfunction getBMIColor(category) {\n    console.log(`🎨 色を決定中... (category: ${category})`);\n    \n    const colors = {\n        \"低体重\": \"#3498db\",\n        \"標準体重\": \"#27ae60\", \n        \"肥満（1度）\": \"#f39c12\",\n        \"肥満（2度）\": \"#e67e22\",\n        \"肥満（3度）\": \"#e74c3c\"\n    };\n    \n    const color = colors[category] || \"#7f8c8d\";\n    console.log(`  色決定: ${color}`);\n    return color;\n}\n\n// 4. BMIシステム全体を統合する関数\nfunction runBMISystem() {\n    console.log(\"🏥 BMIシステム全体を実行開始...\");\n    \n    const height = parseFloat(heightInput.value);\n    const weight = parseFloat(weightInput.value);\n    \n    // 入力値チェック\n    if (isNaN(height) || isNaN(weight) || height <= 0 || weight <= 0) {\n        bmiResult.innerHTML = '<span style=\"color: #e74c3c;\">正しい数値を入力してください</span>';\n        return null;\n    }\n    \n    // 関数を順次呼び出し（関数連携）\n    const bmi = calculateBMI(height, weight);\n    const category = getBMICategory(bmi);\n    const color = getBMIColor(category);\n    \n    // 結果表示\n    const message = `BMI: ${bmi} (${category})`;\n    resultDisplay.textContent = message;\n    functionStatus.textContent = `✅ BMI計算システム完了: ${category}`;\n    \n    bmiResult.innerHTML = `\n        <strong>📊 BMI計算システム結果:</strong><br>\n        身長: ${height}cm / 体重: ${weight}kg<br>\n        <span style=\"color: ${color}; font-size: 1.8rem;\">BMI: ${bmi}</span><br>\n        判定: <span style=\"color: ${color}; font-weight: bold;\">${category}</span>\n    `;\n    \n    console.log(`🎉 BMIシステム完了: BMI=${bmi}, カテゴリ=${category}`);\n    \n    return { bmi, category, height, weight, color };\n}\n\n// ========================================\n// アロー関数のデモ\n// ========================================\n\n// 従来の関数\nfunction traditionalGreeting(name, age) {\n    return `こんにちは、${name}さん（${age}歳）！従来の関数からの挨拶です。`;\n}\n\n// アロー関数（基本形）\nconst arrowGreeting = (name, age) => {\n    return `こんにちは、${name}さん（${age}歳）！アロー関数からの挨拶です。`;\n};\n\n// アロー関数（短縮形）\nconst shortArrowGreeting = (name, age) => `${name}さん（${age}歳）、アロー関数は簡潔ですね！`;\n\n// ========================================\n// 総合計算システム\n// ========================================\n\n// 基本計算関数群（アロー関数で実装）\nconst add = (a, b) => a + b;\nconst subtract = (a, b) => a - b;\nconst multiply = (a, b) => a * b;\nconst divide = (a, b) => b !== 0 ? (a / b) : null;\nconst power = (a, b) => Math.pow(a, b);\nconst average = (a, b) => (a + b) / 2;\n\nfunction comprehensiveCalculation(num1, num2) {\n    console.log(`🧮 総合計算システム実行中... (num1: ${num1}, num2: ${num2})`);\n    \n    // 各アロー関数を使って計算\n    const results = {\n        addition: add(num1, num2),\n        subtraction: subtract(num1, num2),\n        multiplication: multiply(num1, num2),\n        division: divide(num1, num2),\n        power: power(num1, 2), // num1の2乗\n        average: average(num1, num2)\n    };\n    \n    console.log(\"計算結果:\", results);\n    \n    const message = `${num1} と ${num2} の総合計算完了`;\n    resultDisplay.textContent = message;\n    functionStatus.textContent = `✅ 総合計算システム完了: 6種類の計算実行`;\n    \n    calcResult.innerHTML = `\n        <strong>🧮 総合計算システム結果:</strong><br>\n        足し算: ${num1} + ${num2} = ${results.addition}<br>\n        引き算: ${num1} - ${num2} = ${results.subtraction}<br>\n        掛け算: ${num1} × ${num2} = ${results.multiplication}<br>\n        割り算: ${num1} ÷ ${num2} = ${results.division !== null ? results.division.toFixed(2) : '計算不可'}<br>\n        ${num1}の2乗: ${num1}² = ${results.power}<br>\n        平均値: (${num1} + ${num2}) ÷ 2 = ${results.average}\n    `;\n    \n    return results;\n}\n\n// ========================================\n// 関数連携デモ\n// ========================================\n\n// データ処理関数群\nconst validateInput = (value) => {\n    const num = parseFloat(value);\n    return !isNaN(num) && num > 0;\n};\n\nconst formatNumber = (num) => {\n    return num.toLocaleString(); // 3桁区切り\n};\n\nconst calculateTax = (amount) => {\n    return Math.round(amount * 0.1); // 10%の税金\n};\n\nconst calculateTotal = (amount, tax) => {\n    return amount + tax;\n};\n\nfunction runChainDemo() {\n    console.log(\"🔄 関数連携デモ実行中...\");\n    \n    const inputValue = num1Input.value;\n    \n    // 関数を連鎖的に呼び出し\n    if (!validateInput(inputValue)) {\n        resultDisplay.textContent = \"正しい数値を入力してください\";\n        functionStatus.textContent = \"❌ 入力値検証でエラー\";\n        return;\n    }\n    \n    const amount = parseFloat(inputValue);\n    const tax = calculateTax(amount);\n    const total = calculateTotal(amount, tax);\n    \n    const formattedAmount = formatNumber(amount);\n    const formattedTax = formatNumber(tax);\n    const formattedTotal = formatNumber(total);\n    \n    const message = `金額: ${formattedAmount}円 → 総額: ${formattedTotal}円`;\n    resultDisplay.textContent = message;\n    functionStatus.textContent = `✅ 関数連携完了: 5つの関数が連携動作`;\n    \n    console.log(`関数連携結果:`);\n    console.log(`  入力検証: ${inputValue} → 有効`);\n    console.log(`  金額: ${amount}円`);\n    console.log(`  税金: ${tax}円`);\n    console.log(`  総額: ${total}円`);\n    \n    return { amount, tax, total };\n}\n\n// ========================================\n// ボタンイベントリスナー\n// ========================================\n\n// 1. BMI計算システムボタン\ndocument.getElementById(\"bmi-btn\").addEventListener(\"click\", function() {\n    console.log(\"📊 BMI計算システムボタンがクリックされました\");\n    \n    bmiCalls++;\n    runBMISystem();\n    updateStats();\n});\n\n// 2. アロー関数デモボタン\ndocument.getElementById(\"arrow-btn\").addEventListener(\"click\", function() {\n    console.log(\"🏹 アロー関数デモボタンがクリックされました\");\n    \n    arrowCalls++;\n    \n    const name = nameInput.value || \"ゲスト\";\n    const age = parseInt(ageInput.value) || 25;\n    \n    // 従来の関数とアロー関数を比較実行\n    const traditionalResult = traditionalGreeting(name, age);\n    const arrowResult = arrowGreeting(name, age);\n    const shortResult = shortArrowGreeting(name, age);\n    \n    console.log(\"従来の関数:\", traditionalResult);\n    console.log(\"アロー関数:\", arrowResult);\n    console.log(\"短縮アロー関数:\", shortResult);\n    \n    resultDisplay.textContent = shortResult;\n    functionStatus.textContent = `✅ アロー関数デモ完了: 3種類の関数記法を比較実行`;\n    \n    updateStats();\n});\n\n// 3. 総合計算システムボタン\ndocument.getElementById(\"comprehensive-btn\").addEventListener(\"click\", function() {\n    console.log(\"🧮 総合計算システムボタンがクリックされました\");\n    \n    comprehensiveCalls++;\n    \n    const num1 = parseFloat(num1Input.value) || 0;\n    const num2 = parseFloat(num2Input.value) || 0;\n    \n    comprehensiveCalculation(num1, num2);\n    updateStats();\n});\n\n// 4. 関数連携デモボタン\ndocument.getElementById(\"chain-btn\").addEventListener(\"click\", function() {\n    console.log(\"🔄 関数連携デモボタンがクリックされました\");\n    \n    chainCalls++;\n    runChainDemo();\n    updateStats();\n});\n\n// ========================================\n// 初期化\n// ========================================\n\nupdateStats();\n\nconsole.log(\"✅ 関数実用システムが初期化されました！\");\nconsole.log(\"🚀 このシステムの特徴:\");\nconsole.log(\"  - 複数関数の連携（BMI計算システム）\");\nconsole.log(\"  - アロー関数の活用（ES6記法）\");\nconsole.log(\"  - 関数の再利用性（総合計算システム）\");\nconsole.log(\"  - システム設計（関数分割）\");\nconsole.log(\"💡 各ボタンをクリックして、実用的な関数システムを体験してください！\");\n\n// 実行時に自動でデモンストレーション\nsetTimeout(() => {\n    console.log(\"🎯 関数システムデモンストレーション:\");\n    console.log(\"  BMI計算システム: 4つの関数が連携\");\n    console.log(\"  アロー関数: ES6の新記法\");\n    console.log(\"  総合計算: 6種類のアロー関数活用\");\n    console.log(\"  関数連携: 5つの関数がチェーン動作\");\n    console.log(\"🎪 すべてのシステムボタンを試してみてください！\");\n}, 1500);"
    }
  },
  "expectedResult": {
    "bmiSystem": "身長・体重からBMI値と判定が計算される",
    "arrowFunctions": "ES6のアロー関数が正しく動作する",
    "functionChaining": "関数同士が連携して動作する",
    "comprehensiveCalculation": "総合計算システムで複数の計算が実行される",
    "behavior": "BMI・アロー関数・総合計算・関数連携の4システムが動作する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}