{
  "id": "ec-project-04",
  "title": "59: ソート機能統合システム",
  "description": "ECプロジェクトの高度な機能実装 - プロフェッショナルレベルのWebアプリケーション開発",
  "category": "ec-project",
  "difficulty": 5,
  "instructions": [
    "高度なJavaScript機能を実装してください",
    "データベース連携を模擬してください", 
    "ユーザビリティを最優先に設計してください",
    "セキュリティ対策を考慮してください"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ソート機能統合システム</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container-fluid\">\n        <nav class=\"navbar navbar-expand-lg navbar-dark bg-success\">\n            <div class=\"container\">\n                <a class=\"navbar-brand\" href=\"#\">Smart Sort System</a>\n            </div>\n        </nav>\n        <main class=\"py-4\">\n            <div class=\"container\">\n                <h1 class=\"display-4\">ソート機能統合システム</h1>\n                <div id=\"sortControls\">\n                    <!-- JavaScript で動的に生成されるソート機能 -->\n                </div>\n                <div id=\"sortableContent\">\n                    <!-- ソート対象コンテンツ表示エリア -->\n                </div>\n            </div>\n        </main>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "/* ソート機能統合システム CSS */\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);\n    min-height: 100vh;\n}\n\n.navbar {\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n.sort-controls {\n    background: white;\n    border-radius: 15px;\n    padding: 20px;\n    box-shadow: 0 5px 15px rgba(0,0,0,0.1);\n    margin-bottom: 20px;\n}\n\n.sort-button {\n    margin: 5px;\n    border-radius: 20px;\n    transition: all 0.3s ease;\n}\n\n.sort-button:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n.sort-button.active {\n    background: #28a745;\n    border-color: #28a745;\n    color: white;\n}\n\n.sortable-item {\n    background: white;\n    border-radius: 10px;\n    padding: 15px;\n    margin: 10px 0;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n    transition: all 0.3s ease;\n    cursor: move;\n}\n\n.sortable-item:hover {\n    box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n    transform: translateY(-2px);\n}\n\n.sortable-item.dragging {\n    opacity: 0.5;\n    transform: rotate(5deg);\n}\n\n.sort-indicator {\n    display: inline-block;\n    margin-left: 10px;\n    font-size: 0.8em;\n    color: #6c757d;\n}\n\n.sort-animation {\n    animation: sortFade 0.5s ease-in-out;\n}\n\n@keyframes sortFade {\n    0% { opacity: 0; transform: translateX(-20px); }\n    100% { opacity: 1; transform: translateX(0); }\n}\n\n@media (max-width: 768px) {\n    .container {\n        padding: 15px;\n    }\n    .sort-controls {\n        padding: 15px;\n    }\n    .sort-button {\n        display: block;\n        width: 100%;\n        margin: 5px 0;\n    }\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "// ソート機能統合システム JavaScript\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('ソート機能統合システム開始');\n    \n    initializeSortSystem();\n    \n    console.log('ソートシステム初期化完了');\n});\n\n// ソート対象データ\nconst sortableData = [\n    {\n        id: 1,\n        name: 'プレミアムノートPC',\n        price: 198000,\n        rating: 4.8,\n        date: '2024-01-15',\n        category: 'electronics',\n        sales: 250\n    },\n    {\n        id: 2,\n        name: 'デザイナーズチェア',\n        price: 45000,\n        rating: 4.5,\n        date: '2024-02-20',\n        category: 'furniture',\n        sales: 120\n    },\n    {\n        id: 3,\n        name: 'オーガニックコーヒー',\n        price: 2980,\n        rating: 4.2,\n        date: '2024-03-10',\n        category: 'food',\n        sales: 800\n    },\n    {\n        id: 4,\n        name: 'ワイヤレススピーカー',\n        price: 12800,\n        rating: 4.7,\n        date: '2024-01-25',\n        category: 'electronics',\n        sales: 340\n    },\n    {\n        id: 5,\n        name: 'ハンドメイドソープ',\n        price: 1200,\n        rating: 4.3,\n        date: '2024-02-14',\n        category: 'beauty',\n        sales: 150\n    }\n];\n\nlet currentSortConfig = {\n    field: 'name',\n    direction: 'asc',\n    type: 'alphabetic'\n};\n\nfunction initializeSortSystem() {\n    const controlsContainer = document.getElementById('sortControls');\n    const contentContainer = document.getElementById('sortableContent');\n    \n    if (!controlsContainer || !contentContainer) {\n        console.error('必要な要素が見つかりません');\n        return;\n    }\n    \n    // ソートコントロールUI構築\n    buildSortControls(controlsContainer);\n    \n    // 初期データ表示\n    displaySortableItems(sortableData, contentContainer);\n    \n    // ドラッグ&ドロップソート機能\n    enableDragAndDrop();\n}\n\nfunction buildSortControls(container) {\n    container.innerHTML = `\n        <div class=\"sort-controls\">\n            <h3>ソート設定</h3>\n            <div class=\"row\">\n                <!-- ソートフィールド選択 -->\n                <div class=\"col-md-4\">\n                    <label class=\"form-label\">ソート項目</label>\n                    <select class=\"form-select\" id=\"sortField\">\n                        <option value=\"name\">名前</option>\n                        <option value=\"price\">価格</option>\n                        <option value=\"rating\">評価</option>\n                        <option value=\"date\">日付</option>\n                        <option value=\"category\">カテゴリ</option>\n                        <option value=\"sales\">売上数</option>\n                    </select>\n                </div>\n                \n                <!-- ソート方向選択 -->\n                <div class=\"col-md-4\">\n                    <label class=\"form-label\">ソート方向</label>\n                    <select class=\"form-select\" id=\"sortDirection\">\n                        <option value=\"asc\">昇順</option>\n                        <option value=\"desc\">降順</option>\n                    </select>\n                </div>\n                \n                <!-- ソートタイプ選択 -->\n                <div class=\"col-md-4\">\n                    <label class=\"form-label\">ソートタイプ</label>\n                    <select class=\"form-select\" id=\"sortType\">\n                        <option value=\"alphabetic\">文字順</option>\n                        <option value=\"numeric\">数値順</option>\n                        <option value=\"date\">日付順</option>\n                        <option value=\"custom\">カスタム</option>\n                    </select>\n                </div>\n            </div>\n            \n            <!-- クイックソートボタン -->\n            <div class=\"mt-3\">\n                <h5>クイックソート</h5>\n                <button class=\"btn btn-outline-primary sort-button\" onclick=\"quickSort('name', 'asc')\">\n                    名前順\n                </button>\n                <button class=\"btn btn-outline-success sort-button\" onclick=\"quickSort('price', 'desc')\">\n                    価格高い順\n                </button>\n                <button class=\"btn btn-outline-warning sort-button\" onclick=\"quickSort('rating', 'desc')\">\n                    評価高い順\n                </button>\n                <button class=\"btn btn-outline-info sort-button\" onclick=\"quickSort('date', 'desc')\">\n                    新着順\n                </button>\n                <button class=\"btn btn-outline-danger sort-button\" onclick=\"quickSort('sales', 'desc')\">\n                    売上順\n                </button>\n            </div>\n            \n            <div class=\"mt-3\">\n                <button class=\"btn btn-primary me-2\" onclick=\"applySortSettings()\">\n                    ソート適用\n                </button>\n                <button class=\"btn btn-secondary me-2\" onclick=\"resetSort()\">\n                    リセット\n                </button>\n                <button class=\"btn btn-info\" onclick=\"shuffleItems()\">\n                    シャッフル\n                </button>\n            </div>\n        </div>\n    `;\n    \n    // イベントリスナー設定\n    setupSortEvents();\n}\n\nfunction setupSortEvents() {\n    // リアルタイムソート\n    document.getElementById('sortField').addEventListener('change', applySortSettings);\n    document.getElementById('sortDirection').addEventListener('change', applySortSettings);\n    document.getElementById('sortType').addEventListener('change', applySortSettings);\n}\n\nfunction applySortSettings() {\n    // 設定値取得\n    currentSortConfig.field = document.getElementById('sortField').value;\n    currentSortConfig.direction = document.getElementById('sortDirection').value;\n    currentSortConfig.type = document.getElementById('sortType').value;\n    \n    // ソート実行\n    const sortedData = performSort([...sortableData], currentSortConfig);\n    \n    // 結果表示\n    const contentContainer = document.getElementById('sortableContent');\n    displaySortableItems(sortedData, contentContainer);\n    \n    // アクティブボタンの状態更新\n    updateActiveButton();\n    \n    console.log('ソート適用:', currentSortConfig);\n}\n\nfunction quickSort(field, direction) {\n    currentSortConfig.field = field;\n    currentSortConfig.direction = direction;\n    \n    // UI更新\n    document.getElementById('sortField').value = field;\n    document.getElementById('sortDirection').value = direction;\n    \n    // 適切なソートタイプを自動選択\n    let sortType = 'alphabetic';\n    if (['price', 'rating', 'sales'].includes(field)) {\n        sortType = 'numeric';\n    } else if (field === 'date') {\n        sortType = 'date';\n    }\n    \n    currentSortConfig.type = sortType;\n    document.getElementById('sortType').value = sortType;\n    \n    applySortSettings();\n}\n\nfunction performSort(data, config) {\n    const { field, direction, type } = config;\n    \n    return data.sort((a, b) => {\n        let valueA = a[field];\n        let valueB = b[field];\n        \n        // ソートタイプによる処理\n        switch (type) {\n            case 'numeric':\n                valueA = parseFloat(valueA) || 0;\n                valueB = parseFloat(valueB) || 0;\n                break;\n                \n            case 'date':\n                valueA = new Date(valueA).getTime();\n                valueB = new Date(valueB).getTime();\n                break;\n                \n            case 'alphabetic':\n                valueA = String(valueA).toLowerCase();\n                valueB = String(valueB).toLowerCase();\n                break;\n                \n            case 'custom':\n                // カスタムソートロジック\n                return customSortLogic(a, b, field, direction);\n        }\n        \n        // 比較実行\n        let result = 0;\n        if (valueA < valueB) result = -1;\n        if (valueA > valueB) result = 1;\n        \n        return direction === 'desc' ? -result : result;\n    });\n}\n\nfunction customSortLogic(a, b, field, direction) {\n    // カテゴリ別の優先順位を定義\n    const categoryPriority = {\n        'electronics': 1,\n        'furniture': 2,\n        'beauty': 3,\n        'food': 4\n    };\n    \n    if (field === 'category') {\n        const priorityA = categoryPriority[a[field]] || 999;\n        const priorityB = categoryPriority[b[field]] || 999;\n        \n        const result = priorityA - priorityB;\n        return direction === 'desc' ? -result : result;\n    }\n    \n    // 複合ソート（評価 + 売上）\n    if (field === 'rating') {\n        const scoreA = a.rating * Math.log(a.sales + 1);\n        const scoreB = b.rating * Math.log(b.sales + 1);\n        \n        const result = scoreA - scoreB;\n        return direction === 'desc' ? -result : result;\n    }\n    \n    return 0;\n}\n\nfunction displaySortableItems(data, container) {\n    const itemsHtml = data.map((item, index) => `\n        <div class=\"sortable-item sort-animation\" data-id=\"${item.id}\" draggable=\"true\">\n            <div class=\"row align-items-center\">\n                <div class=\"col-md-6\">\n                    <h5>${item.name}</h5>\n                    <p class=\"text-muted mb-0\">${item.category}</p>\n                </div>\n                <div class=\"col-md-2 text-center\">\n                    <strong>¥${item.price.toLocaleString()}</strong>\n                </div>\n                <div class=\"col-md-2 text-center\">\n                    <span class=\"text-warning\">★${item.rating}</span>\n                </div>\n                <div class=\"col-md-2 text-center\">\n                    <span class=\"badge bg-primary\">${item.sales}個</span>\n                    <span class=\"sort-indicator\">#${index + 1}</span>\n                </div>\n            </div>\n        </div>\n    `).join('');\n    \n    container.innerHTML = itemsHtml;\n    \n    // アニメーション効果\n    setTimeout(() => {\n        document.querySelectorAll('.sort-animation').forEach(item => {\n            item.classList.remove('sort-animation');\n        });\n    }, 500);\n}\n\nfunction resetSort() {\n    currentSortConfig = {\n        field: 'name',\n        direction: 'asc',\n        type: 'alphabetic'\n    };\n    \n    document.getElementById('sortField').value = 'name';\n    document.getElementById('sortDirection').value = 'asc';\n    document.getElementById('sortType').value = 'alphabetic';\n    \n    applySortSettings();\n}\n\nfunction shuffleItems() {\n    const shuffled = [...sortableData].sort(() => Math.random() - 0.5);\n    const container = document.getElementById('sortableContent');\n    displaySortableItems(shuffled, container);\n    \n    console.log('アイテムをシャッフルしました');\n}\n\nfunction updateActiveButton() {\n    // 全てのボタンからactiveクラスを削除\n    document.querySelectorAll('.sort-button').forEach(btn => {\n        btn.classList.remove('active');\n    });\n    \n    // 現在の設定に対応するボタンをアクティブに\n    const buttons = document.querySelectorAll('.sort-button');\n    buttons.forEach(btn => {\n        const onclick = btn.getAttribute('onclick');\n        if (onclick && onclick.includes(currentSortConfig.field) && \n            onclick.includes(currentSortConfig.direction)) {\n            btn.classList.add('active');\n        }\n    });\n}\n\nfunction enableDragAndDrop() {\n    let draggedElement = null;\n    \n    document.addEventListener('dragstart', function(e) {\n        if (e.target.classList.contains('sortable-item')) {\n            draggedElement = e.target;\n            e.target.classList.add('dragging');\n            console.log('ドラッグ開始:', e.target.dataset.id);\n        }\n    });\n    \n    document.addEventListener('dragend', function(e) {\n        if (e.target.classList.contains('sortable-item')) {\n            e.target.classList.remove('dragging');\n            draggedElement = null;\n        }\n    });\n    \n    document.addEventListener('dragover', function(e) {\n        e.preventDefault();\n    });\n    \n    document.addEventListener('drop', function(e) {\n        e.preventDefault();\n        \n        if (draggedElement && e.target.classList.contains('sortable-item')) {\n            const container = e.target.parentNode;\n            const afterElement = getDragAfterElement(container, e.clientY);\n            \n            if (afterElement == null) {\n                container.appendChild(draggedElement);\n            } else {\n                container.insertBefore(draggedElement, afterElement);\n            }\n            \n            console.log('ドラッグ&ドロップ完了');\n            updateSortIndicators();\n        }\n    });\n}\n\nfunction getDragAfterElement(container, y) {\n    const draggableElements = [...container.querySelectorAll('.sortable-item:not(.dragging)')];\n    \n    return draggableElements.reduce((closest, child) => {\n        const box = child.getBoundingClientRect();\n        const offset = y - box.top - box.height / 2;\n        \n        if (offset < 0 && offset > closest.offset) {\n            return { offset: offset, element: child };\n        } else {\n            return closest;\n        }\n    }, { offset: Number.NEGATIVE_INFINITY }).element;\n}\n\nfunction updateSortIndicators() {\n    const items = document.querySelectorAll('.sortable-item');\n    items.forEach((item, index) => {\n        const indicator = item.querySelector('.sort-indicator');\n        if (indicator) {\n            indicator.textContent = `#${index + 1}`;\n        }\n    });\n}\n\n// エクスポート（モジュールシステム対応）\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { initializeSortSystem, applySortSettings, quickSort };\n}"
    }
  },
  "expectedResult": {
    "console": "ソートシステム初期化完了",
    "behavior": "高度なソート機能により様々な条件でデータを並び替えできるシステムが動作する"
  },
  "checks": [
    {
      "id": "multi-sort",
      "name": "複数ソート条件",
      "type": "js",
      "message": "複数の項目とタイプでソートできる機能が実装されている必要があります"
    },
    {
      "id": "drag-sort",
      "name": "ドラッグソート",
      "type": "js",
      "message": "ドラッグ&ドロップによる手動ソート機能が実装されている必要があります"
    },
    {
      "id": "quick-sort",
      "name": "クイックソート",
      "type": "js",
      "message": "ワンクリックでよく使用されるソートを適用できる必要があります"
    },
    {
      "id": "sort-persistence",
      "name": "ソート状態保持",
      "type": "js",
      "message": "ソート設定が適切に管理・表示されている必要があります"
    }
  ],
  "hints": [
    "配列のsort()メソッドとカスタム比較関数を活用しましょう",
    "ドラッグ&ドロップAPIを使って直感的なソート機能を実装しましょう",
    "異なるデータタイプ（文字列、数値、日付）に対応したソートロジックを実装しましょう",
    "ユーザーが設定を把握しやすいUI/UXを心がけましょう"
  ]
}
