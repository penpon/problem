{
  "id": "js-basic-09",
  "title": "カウンター拡張",
  "description": "基本カウンターに追加機能を実装し、リセット・制限・統計機能付きの高度なカウンターを作成します",
  "category": "javascript-dom",
  "difficulty": 3,
  "instructions": [
    "基本的なカウンター機能に追加機能を実装する",
    "リセットボタンでカウンターを0に戻す",
    "カウンターの最小値・最大値制限を設定する",
    "カウンター操作の統計情報を表示する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ステップ16.3 - カウンター機能強化</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>⚡ カウンター機能強化</h1>\n        <div class=\"step-info\">\n            <strong>ステップ16.3 - 制限付きカウンターとバリデーション</strong>\n        </div>\n        \n        <div class=\"celebration\">⚡ 🚀 🎯</div>\n        \n        <div class=\"info-box\">\n            <h3>📚 このステップで学ぶこと</h3>\n            <ul>\n                <li><strong>制限付きカウンター</strong>（最小値・最大値の設定）</li>\n                <li><strong>複数の増減値</strong>（+1, +5, +10など）</li>\n                <li><strong>バリデーション</strong>（値の妥当性チェック）</li>\n                <li><strong>動的ボタン制御</strong>（有効・無効の切り替え）</li>\n            </ul>\n        </div>\n        \n        <div class=\"counter-section\">\n            <h3>🎪 高機能カウンター</h3>\n            <p>制限付きカウンター（-50から+100まで）</p>\n            \n            <div class=\"counter-display\" id=\"counter-display\">0</div>\n            \n            <div class=\"limit-display\" id=\"limit-display\">\n                範囲: -50 ≤ カウンター ≤ 100\n            </div>\n            \n            <div class=\"progress-section\">\n                <div>進捗: <span id=\"progress-text\">50/150 (33%)</span></div>\n                <div class=\"progress-bar\">\n                    <div class=\"progress-fill\" id=\"progress-fill\" style=\"width: 33%\"></div>\n                </div>\n            </div>\n            \n            <div class=\"counter-buttons\">\n                <button class=\"counter-btn btn-minus10\" id=\"minus10-btn\">-10</button>\n                <button class=\"counter-btn btn-minus5\" id=\"minus5-btn\">-5</button>\n                <button class=\"counter-btn btn-minus1\" id=\"minus1-btn\">-1</button>\n                <button class=\"counter-btn btn-plus1\" id=\"plus1-btn\">+1</button>\n                <button class=\"counter-btn btn-plus5\" id=\"plus5-btn\">+5</button>\n                <button class=\"counter-btn btn-plus10\" id=\"plus10-btn\">+10</button>\n                <button class=\"counter-btn btn-reset\" id=\"reset-btn\">🔄 リセット</button>\n                <button class=\"counter-btn btn-random\" id=\"random-btn\">🎲 ランダム</button>\n            </div>\n            \n            <div class=\"status-display\" id=\"status-display\">カウンター準備完了！</div>\n        </div>\n        \n        <div class=\"features-grid\">\n            <div class=\"feature-card\">\n                <div class=\"feature-icon\">🛡️</div>\n                <h4>制限機能</h4>\n                <p>最小値-50、最大値100で範囲を制限</p>\n            </div>\n            <div class=\"feature-card\">\n                <div class=\"feature-icon\">🎯</div>\n                <h4>複数増減</h4>\n                <p>1, 5, 10単位での増減をサポート</p>\n            </div>\n            <div class=\"feature-card\">\n                <div class=\"feature-icon\">⚡</div>\n                <h4>動的制御</h4>\n                <p>範囲を超える操作を自動で無効化</p>\n            </div>\n            <div class=\"feature-card\">\n                <div class=\"feature-icon\">📊</div>\n                <h4>進捗表示</h4>\n                <p>現在位置を視覚的に表示</p>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🛡️ バリデーション機能</h3>\n            <p>このカウンターは範囲外の値を防ぐため、以下のチェックを行います：</p>\n            \n            <div class=\"code-example\">\n// 最小値・最大値の定義\nconst MIN_VALUE = -50;\nconst MAX_VALUE = 100;\n\n// 値の変更前にチェック\nfunction changeCounter(delta) {\n    let newValue = counter + delta;\n    \n    if (newValue < MIN_VALUE) {\n        newValue = MIN_VALUE;  // 最小値で制限\n    } else if (newValue > MAX_VALUE) {\n        newValue = MAX_VALUE;  // 最大値で制限\n    }\n    \n    counter = newValue;\n    updateDisplay();\n}\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>🔧 実装されている機能</h3>\n            <ul>\n                <li><strong>範囲制限</strong>: -50 ≤ 値 ≤ 100</li>\n                <li><strong>複数増減</strong>: ±1, ±5, ±10のボタン</li>\n                <li><strong>ボタン制御</strong>: 範囲外操作の自動無効化</li>\n                <li><strong>進捗バー</strong>: 現在位置の視覚化</li>\n                <li><strong>ステータス表示</strong>: 操作結果のフィードバック</li>\n                <li><strong>ランダム機能</strong>: 範囲内のランダム値設定</li>\n            </ul>\n        </div>\n        \n        <div class=\"instruction\">\n            <h3>🚀 すべての機能を試してみよう！</h3>\n            <p>異なる増減値のボタンを使って、制限機能がどのように働くか確認してください。最小値(-50)や最大値(100)に到達した時の動作も確認しましょう。</p>\n            <p><strong>F12</strong>（MacはCmd+Option+I）で開発者ツールを開き、<strong>Console</strong>タブで詳細ログも確認できます！</p>\n        </div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "body {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n    max-width: 1000px;\n    margin: 40px auto;\n    padding: 20px;\n    line-height: 1.6;\n    background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);\n    color: #2c3e50;\n    min-height: 100vh;\n}\n\n.container {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 40px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    color: #e74c3c;\n    text-align: center;\n    font-size: 2.5rem;\n    margin-bottom: 10px;\n}\n\n.step-info {\n    text-align: center;\n    margin-bottom: 30px;\n    opacity: 0.8;\n    color: #7f8c8d;\n}\n\n.counter-section {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    padding: 30px;\n    border-radius: 20px;\n    margin: 25px 0;\n    text-align: center;\n}\n\n.counter-display {\n    font-size: 5rem;\n    font-weight: bold;\n    color: #FFE135;\n    margin: 20px 0;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n    background: rgba(0, 0, 0, 0.2);\n    padding: 20px;\n    border-radius: 15px;\n    border: 3px solid rgba(255, 255, 255, 0.3);\n}\n\n.limit-display {\n    font-size: 1.2rem;\n    margin: 15px 0;\n    padding: 10px;\n    background: rgba(255, 255, 255, 0.2);\n    border-radius: 10px;\n    font-weight: bold;\n}\n\n.counter-buttons {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));\n    gap: 15px;\n    margin: 25px 0;\n}\n\n.counter-btn {\n    color: white;\n    border: none;\n    padding: 15px 20px;\n    font-size: 1.1rem;\n    border-radius: 50px;\n    cursor: pointer;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n    transition: all 0.3s ease;\n    font-weight: bold;\n}\n\n.counter-btn:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);\n}\n\n.counter-btn:active {\n    transform: translateY(0);\n}\n\n.counter-btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    transform: none;\n}\n\n.btn-plus1 { background: linear-gradient(135deg, #56ab2f, #a8e6cf); }\n.btn-plus5 { background: linear-gradient(135deg, #4CAF50, #8BC34A); }\n.btn-plus10 { background: linear-gradient(135deg, #2E7D32, #66BB6A); }\n.btn-minus1 { background: linear-gradient(135deg, #ff416c, #ff4b2b); }\n.btn-minus5 { background: linear-gradient(135deg, #F44336, #E91E63); }\n.btn-minus10 { background: linear-gradient(135deg, #B71C1C, #D32F2F); }\n.btn-reset { background: linear-gradient(135deg, #667eea, #764ba2); }\n.btn-random { background: linear-gradient(135deg, #ff9a9e, #fecfef); }\n\n.info-box {\n    background: #f8f9fa;\n    padding: 25px;\n    border-radius: 15px;\n    margin: 20px 0;\n    border-left: 5px solid #3498db;\n}\n\n.highlight {\n    color: #e74c3c;\n    font-weight: bold;\n}\n\n.code-example {\n    background: #2c3e50;\n    color: #ecf0f1;\n    padding: 15px;\n    border-radius: 8px;\n    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n    margin: 15px 0;\n    border: 1px solid #34495e;\n}\n\n.instruction {\n    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n    color: white;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 20px 0;\n}\n\n.celebration {\n    font-size: 3rem;\n    text-align: center;\n    margin: 20px 0;\n}\n\n.features-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 15px;\n    margin: 20px 0;\n}\n\n.feature-card {\n    background: rgba(0, 0, 0, 0.1);\n    padding: 20px;\n    border-radius: 15px;\n    text-align: center;\n}\n\n.feature-icon {\n    font-size: 2.5rem;\n    margin-bottom: 10px;\n}\n\n.status-display {\n    padding: 15px;\n    border-radius: 10px;\n    margin: 15px 0;\n    text-align: center;\n    font-weight: bold;\n    font-size: 1.1rem;\n}\n\n.status-normal { background: linear-gradient(135deg, #a8edea, #fed6e3); color: #2c3e50; }\n.status-warning { background: linear-gradient(135deg, #ffeaa7, #fab1a0); color: #2c3e50; }\n.status-danger { background: linear-gradient(135deg, #ff7675, #fd79a8); color: white; }\n.status-success { background: linear-gradient(135deg, #00b894, #00cec9); color: white; }\n\n.progress-section {\n    background: rgba(255, 255, 255, 0.1);\n    padding: 20px;\n    border-radius: 15px;\n    margin: 20px 0;\n}\n\n.progress-bar {\n    width: 100%;\n    height: 20px;\n    background: rgba(0, 0, 0, 0.2);\n    border-radius: 10px;\n    overflow: hidden;\n    margin: 10px 0;\n}\n\n.progress-fill {\n    height: 100%;\n    background: linear-gradient(135deg, #56ab2f, #a8e6cf);\n    transition: width 0.3s ease;\n    border-radius: 10px;\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "console.log(\"⚡ ステップ16.3: カウンター機能強化を開始します！\");\nconsole.log(\"==========================================\");\n\n// 制限値の定義\nconst MIN_VALUE = -50;\nconst MAX_VALUE = 100;\nconst TOTAL_RANGE = MAX_VALUE - MIN_VALUE;\n\n// カウンター本体\nlet counter = 0;\n\n// DOM要素の取得\nlet counterDisplay = document.getElementById(\"counter-display\");\nlet statusDisplay = document.getElementById(\"status-display\");\nlet progressFill = document.getElementById(\"progress-fill\");\nlet progressText = document.getElementById(\"progress-text\");\n\n// すべてのボタンを取得\nlet buttons = {\n    minus10: document.getElementById(\"minus10-btn\"),\n    minus5: document.getElementById(\"minus5-btn\"),\n    minus1: document.getElementById(\"minus1-btn\"),\n    plus1: document.getElementById(\"plus1-btn\"),\n    plus5: document.getElementById(\"plus5-btn\"),\n    plus10: document.getElementById(\"plus10-btn\"),\n    reset: document.getElementById(\"reset-btn\"),\n    random: document.getElementById(\"random-btn\")\n};\n\n// カウンターを安全に変更する関数\nfunction changeCounter(delta, buttonName) {\n    let oldValue = counter;\n    let newValue = counter + delta;\n    \n    // 範囲制限\n    if (newValue < MIN_VALUE) {\n        newValue = MIN_VALUE;\n    } else if (newValue > MAX_VALUE) {\n        newValue = MAX_VALUE;\n    }\n    \n    counter = newValue;\n    \n    // ログ出力\n    console.log(`${buttonName}: ${oldValue} → ${counter} (${delta > 0 ? '+' : ''}${delta})`);\n    \n    // 制限に達した場合の警告\n    if (newValue !== oldValue + delta) {\n        if (newValue === MIN_VALUE) {\n            console.log(\"⚠️ 最小値(-50)に到達しました\");\n        } else if (newValue === MAX_VALUE) {\n            console.log(\"⚠️ 最大値(100)に到達しました\");\n        }\n    }\n    \n    updateDisplay();\n}\n\n// 表示を更新する関数\nfunction updateDisplay() {\n    // カウンター表示\n    counterDisplay.textContent = counter;\n    \n    // 進捗バーの更新\n    let progress = ((counter - MIN_VALUE) / TOTAL_RANGE) * 100;\n    progressFill.style.width = progress + '%';\n    progressText.textContent = `${counter - MIN_VALUE}/${TOTAL_RANGE} (${Math.round(progress)}%)`;\n    \n    // ステータス表示の更新\n    updateStatus();\n    \n    // ボタンの有効/無効制御\n    updateButtonStates();\n}\n\n// ステータスメッセージを更新する関数\nfunction updateStatus() {\n    statusDisplay.className = \"status-display\";\n    \n    if (counter === MAX_VALUE) {\n        statusDisplay.textContent = \"🎯 最大値(100)に到達！これ以上増加できません。\";\n        statusDisplay.classList.add(\"status-danger\");\n    } else if (counter === MIN_VALUE) {\n        statusDisplay.textContent = \"⚠️ 最小値(-50)に到達！これ以上減少できません。\";\n        statusDisplay.classList.add(\"status-danger\");\n    } else if (counter >= 80) {\n        statusDisplay.textContent = \"🔥 高い値です！最大値まであと少し！\";\n        statusDisplay.classList.add(\"status-warning\");\n    } else if (counter <= -40) {\n        statusDisplay.textContent = \"❄️ 低い値です！最小値に近づいています。\";\n        statusDisplay.classList.add(\"status-warning\");\n    } else if (counter >= 50) {\n        statusDisplay.textContent = \"✨ 良い調子！高い値を維持中！\";\n        statusDisplay.classList.add(\"status-success\");\n    } else if (counter <= -25) {\n        statusDisplay.textContent = \"📉 マイナス領域！でも大丈夫です。\";\n        statusDisplay.classList.add(\"status-normal\");\n    } else {\n        statusDisplay.textContent = \"👍 バランスの良い値です！\";\n        statusDisplay.classList.add(\"status-normal\");\n    }\n}\n\n// ボタンの有効/無効を制御する関数\nfunction updateButtonStates() {\n    // プラス系ボタンの制御\n    buttons.plus1.disabled = (counter >= MAX_VALUE);\n    buttons.plus5.disabled = (counter > MAX_VALUE - 5);\n    buttons.plus10.disabled = (counter > MAX_VALUE - 10);\n    \n    // マイナス系ボタンの制御\n    buttons.minus1.disabled = (counter <= MIN_VALUE);\n    buttons.minus5.disabled = (counter < MIN_VALUE + 5);\n    buttons.minus10.disabled = (counter < MIN_VALUE + 10);\n}\n\n// イベントリスナーの設定\nbuttons.plus1.addEventListener(\"click\", () => changeCounter(1, \"プラス1\"));\nbuttons.plus5.addEventListener(\"click\", () => changeCounter(5, \"プラス5\"));\nbuttons.plus10.addEventListener(\"click\", () => changeCounter(10, \"プラス10\"));\nbuttons.minus1.addEventListener(\"click\", () => changeCounter(-1, \"マイナス1\"));\nbuttons.minus5.addEventListener(\"click\", () => changeCounter(-5, \"マイナス5\"));\nbuttons.minus10.addEventListener(\"click\", () => changeCounter(-10, \"マイナス10\"));\n\nbuttons.reset.addEventListener(\"click\", function() {\n    console.log(\"🔄 リセット実行\");\n    counter = 0;\n    updateDisplay();\n});\n\nbuttons.random.addEventListener(\"click\", function() {\n    let randomValue = Math.floor(Math.random() * (MAX_VALUE - MIN_VALUE + 1)) + MIN_VALUE;\n    console.log(\"🎲 ランダム値設定: \" + randomValue);\n    counter = randomValue;\n    updateDisplay();\n});\n\n// 初期表示を設定\nupdateDisplay();\n\nconsole.log(\"✅ 高機能カウンターシステムが初期化されました！\");\nconsole.log(`📊 設定範囲: ${MIN_VALUE} ～ ${MAX_VALUE}`);\nconsole.log(\"💡 すべてのボタンを試して、制限機能を確認してください！\");"
    }
  },
  "expectedResult": {
    "basicCounter": "増減・リセット機能が正しく動作する",
    "limits": "最小値・最大値制限が適用される",
    "statistics": "操作回数などの統計情報が表示される",
    "behavior": "拡張された全機能が連携して動作する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}