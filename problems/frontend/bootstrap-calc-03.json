{
  "id": "bootstrap-calc-03",
  "title": "四則演算の計算機",
  "description": "足し算計算機に引き算・掛け算・割り算を追加し、演算選択機能と条件分岐を使った本格的な計算機を作成します",
  "category": "bootstrap-calculator",
  "difficulty": 3,
  "instructions": [
    "足し算に加えて引き算、掛け算、割り算を実装する",
    "ボタンで演算を選択する方法を学ぶ",
    "条件分岐（if文）を使った処理を理解する",
    "4つの演算子（+、-、×、÷）を管理するシステムを構築する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>簡単計算機（Bootstrap版）</title>\n    <!-- Bootstrap CSS -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container py-5\">\n        <h1 class=\"text-center text-white mb-5\">🧮 簡単計算機（Bootstrap版）</h1>\n        \n        <div class=\"row g-4\">\n            <!-- 基本計算機 -->\n            <div class=\"col-lg-4 col-md-6 col-sm-12\">\n                <div class=\"card h-100\">\n                    <div class=\"card-body\">\n                        <h2 class=\"card-title\">基本計算機</h2>\n                        <div class=\"mb-3\">\n                            <input type=\"number\" id=\"num1\" class=\"form-control mb-2\" placeholder=\"最初の数値\" step=\"any\">\n                            <select id=\"operation\" class=\"form-select mb-2\">\n                                <option value=\"+\">+ 足し算</option>\n                                <option value=\"-\">- 引き算</option>\n                                <option value=\"*\">× 掛け算</option>\n                                <option value=\"/\">÷ 割り算</option>\n                            </select>\n                            <input type=\"number\" id=\"num2\" class=\"form-control mb-2\" placeholder=\"2番目の数値\" step=\"any\">\n                            <div class=\"d-grid\">\n                                <button id=\"calculate\" class=\"btn btn-primary\">計算実行</button>\n                            </div>\n                        </div>\n                        \n                        <div class=\"mt-3\">\n                            <div id=\"result\" class=\"alert alert-light text-center\">結果がここに表示されます</div>\n                            <div id=\"error\" class=\"alert alert-danger d-none\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- 履歴機能 -->\n            <div class=\"col-lg-4 col-md-6 col-sm-12\">\n                <div class=\"card h-100\">\n                    <div class=\"card-body\">\n                        <h2 class=\"card-title\">計算履歴</h2>\n                        <div class=\"mb-3\">\n                            <div class=\"d-grid\">\n                                <button id=\"clear-history\" class=\"btn btn-danger\">履歴をクリア</button>\n                            </div>\n                        </div>\n                        <div id=\"history\" class=\"history-list\">\n                            <p class=\"text-muted text-center\">計算履歴はまだありません</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- 特殊計算 -->\n            <div class=\"col-lg-4 col-md-12 col-sm-12\">\n                <div class=\"card h-100\">\n                    <div class=\"card-body\">\n                        <h2 class=\"card-title\">特殊計算</h2>\n                        <div class=\"special-calc\">\n                            <div class=\"mb-3\">\n                                <label class=\"form-label\">平方根：</label>\n                                <div class=\"input-group mb-2\">\n                                    <input type=\"number\" id=\"sqrt-input\" class=\"form-control\" placeholder=\"数値\" step=\"any\">\n                                    <button id=\"sqrt-btn\" class=\"btn btn-success\">√ 計算</button>\n                                </div>\n                                <span id=\"sqrt-result\" class=\"badge bg-info\"></span>\n                            </div>\n                            \n                            <div class=\"mb-3\">\n                                <label class=\"form-label\">乗算：</label>\n                                <div class=\"input-group mb-2\">\n                                    <input type=\"number\" id=\"power-base\" class=\"form-control\" placeholder=\"底\" step=\"any\">\n                                    <span class=\"input-group-text\">^</span>\n                                    <input type=\"number\" id=\"power-exp\" class=\"form-control\" placeholder=\"指数\" step=\"any\">\n                                    <button id=\"power-btn\" class=\"btn btn-success\">計算</button>\n                                </div>\n                                <span id=\"power-result\" class=\"badge bg-info\"></span>\n                            </div>\n                            \n                            <div class=\"mb-3\">\n                                <label class=\"form-label\">円の面積：</label>\n                                <div class=\"input-group mb-2\">\n                                    <input type=\"number\" id=\"circle-radius\" class=\"form-control\" placeholder=\"半径\" step=\"any\">\n                                    <button id=\"circle-btn\" class=\"btn btn-success\">面積計算</button>\n                                </div>\n                                <span id=\"circle-result\" class=\"badge bg-info\"></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <!-- Bootstrap JS Bundle -->\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\"></script>\n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "/* Bootstrap版 簡単計算機 カスタムスタイル */\n\n/* ベーススタイル */\nbody {\n    font-family: 'Arial', sans-serif;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    color: #333;\n}\n\n/* タイトルスタイル */\nh1 {\n    font-size: 2.5rem;\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n}\n\n/* カードのホバーエフェクト */\n.card {\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    box-shadow: 0 8px 32px rgba(0,0,0,0.1);\n}\n\n.card:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 12px 40px rgba(0,0,0,0.15);\n}\n\n/* カードタイトル */\n.card-title {\n    color: #4a5568;\n    font-size: 1.4rem;\n    border-bottom: 2px solid #e2e8f0;\n    padding-bottom: 10px;\n    margin-bottom: 20px;\n}\n\n/* 主要ボタンのカスタマイズ */\n.btn-primary {\n    background: linear-gradient(45deg, #667eea, #764ba2);\n    border: none;\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n    transition: all 0.3s ease;\n    font-weight: 600;\n}\n\n.btn-primary:hover {\n    background: linear-gradient(45deg, #5a67d8, #6b46c1);\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);\n}\n\n.btn-primary:active {\n    transform: translateY(0);\n}\n\n/* 成功ボタンのカスタマイズ */\n.btn-success {\n    background: linear-gradient(45deg, #48bb78, #38a169);\n    border: none;\n    transition: all 0.3s ease;\n    font-weight: 500;\n}\n\n.btn-success:hover {\n    background: linear-gradient(45deg, #38a169, #2f855a);\n    transform: translateY(-1px);\n}\n\n/* 削除ボタンのカスタマイズ */\n.btn-danger {\n    background: linear-gradient(45deg, #f56565, #e53e3e);\n    border: none;\n    transition: all 0.3s ease;\n}\n\n.btn-danger:hover {\n    background: linear-gradient(45deg, #e53e3e, #c53030);\n    transform: translateY(-1px);\n}\n\n/* フォームコントロールのフォーカス */\n.form-control:focus,\n.form-select:focus {\n    border-color: #667eea;\n    box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);\n}\n\n/* 結果表示の成功状態 */\n.alert-light.success {\n    background: #f0fff4;\n    border-color: #68d391;\n    color: #2d3748;\n}\n\n/* 計算結果の表示スタイル */\n.calculation {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    flex-wrap: wrap;\n}\n\n.calculation-expression {\n    font-weight: 500;\n    color: #4a5568;\n}\n\n.equals {\n    font-weight: bold;\n    color: #667eea;\n    font-size: 1.4rem;\n}\n\n.calculation-result {\n    font-weight: bold;\n    font-size: 1.4rem;\n    color: #2d3748;\n}\n\n/* 履歴リスト */\n.history-list {\n    max-height: 200px;\n    overflow-y: auto;\n    border: 2px solid #e2e8f0;\n    border-radius: 8px;\n    padding: 10px;\n}\n\n.history-item {\n    padding: 8px 12px;\n    border-bottom: 1px solid #e2e8f0;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.history-item:last-child {\n    border-bottom: none;\n}\n\n.history-expression {\n    font-weight: 500;\n    color: #4a5568;\n}\n\n.history-time {\n    font-size: 0.8rem;\n    color: #a0aec0;\n}\n\n/* 特殊計算の結果バッジ */\n.badge.bg-info {\n    font-size: 0.9rem;\n    padding: 5px 10px;\n}\n\n.badge.bg-info.success {\n    background-color: #48bb78 !important;\n}\n\n.badge.bg-info.error {\n    background-color: #f56565 !important;\n}\n\n/* エラーメッセージの表示制御 */\n.alert.d-none {\n    display: none !important;\n}\n\n/* 小画面での調整 */\n@media (max-width: 768px) {\n    h1 {\n        font-size: 2rem;\n    }\n    \n    .calculation {\n        flex-direction: column;\n        gap: 5px;\n    }\n    \n    .calculation-result {\n        font-size: 1.2rem;\n    }\n}\n\n@media (max-width: 480px) {\n    h1 {\n        font-size: 1.8rem;\n    }\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "// 18-simple-calculator: 簡単計算機の実装\n\n// 計算履歴を保存する配列\nlet calculationHistory = [];\n\n// DOMが読み込まれた後に実行\ndocument.addEventListener('DOMContentLoaded', function() {\n    \n    // === 基本計算機の実装 ===\n    \n    document.getElementById('calculate').addEventListener('click', function() {\n        // 入力値を取得\n        const num1Input = document.getElementById('num1').value;\n        const num2Input = document.getElementById('num2').value;\n        const operation = document.getElementById('operation').value;\n        \n        // エラーメッセージをクリア\n        clearError();\n        \n        try {\n            // 入力値のバリデーション\n            if (!num1Input || !num2Input) {\n                throw new Error('両方の数値を入力してください');\n            }\n            \n            // 数値に変換\n            const num1 = parseFloat(num1Input);\n            const num2 = parseFloat(num2Input);\n            \n            // 数値の妥当性チェック\n            if (isNaN(num1) || isNaN(num2)) {\n                throw new Error('有効な数値を入力してください');\n            }\n            \n            // 計算実行\n            let result = performCalculation(num1, num2, operation);\n            \n            // 結果の表示\n            displayResult(num1, num2, operation, result);\n            \n            // 履歴に追加\n            addToHistory(num1, num2, operation, result);\n            \n        } catch (error) {\n            // エラーメッセージを表示\n            showError(error.message);\n        }\n    });\n    \n    // === 履歴管理 ===\n    \n    document.getElementById('clear-history').addEventListener('click', function() {\n        calculationHistory = [];\n        updateHistoryDisplay();\n    });\n    \n    // === 特殊計算の実装 ===\n    \n    // 平方根計算\n    document.getElementById('sqrt-btn').addEventListener('click', function() {\n        const input = document.getElementById('sqrt-input').value;\n        const resultSpan = document.getElementById('sqrt-result');\n        \n        if (!input) {\n            resultSpan.textContent = 'エラー: 数値を入力してください';\n            resultSpan.className = 'badge bg-info error';\n            return;\n        }\n        \n        const num = parseFloat(input);\n        if (isNaN(num)) {\n            resultSpan.textContent = 'エラー: 有効な数値を入力してください';\n            resultSpan.className = 'badge bg-info error';\n            return;\n        }\n        \n        if (num < 0) {\n            resultSpan.textContent = 'エラー: 負の数の平方根は計算できません';\n            resultSpan.className = 'badge bg-info error';\n            return;\n        }\n        \n        const result = Math.sqrt(num);\n        resultSpan.textContent = `= ${result.toFixed(4)}`;\n        resultSpan.className = 'badge bg-info success';\n    });\n    \n    // 乗算計算\n    document.getElementById('power-btn').addEventListener('click', function() {\n        const baseInput = document.getElementById('power-base').value;\n        const expInput = document.getElementById('power-exp').value;\n        const resultSpan = document.getElementById('power-result');\n        \n        if (!baseInput || !expInput) {\n            resultSpan.textContent = 'エラー: 両方の数値を入力してください';\n            resultSpan.className = 'badge bg-info error';\n            return;\n        }\n        \n        const base = parseFloat(baseInput);\n        const exp = parseFloat(expInput);\n        \n        if (isNaN(base) || isNaN(exp)) {\n            resultSpan.textContent = 'エラー: 有効な数値を入力してください';\n            resultSpan.className = 'badge bg-info error';\n            return;\n        }\n        \n        const result = Math.pow(base, exp);\n        resultSpan.textContent = `= ${result.toFixed(4)}`;\n        resultSpan.className = 'badge bg-info success';\n    });\n    \n    // 円の面積計算\n    document.getElementById('circle-btn').addEventListener('click', function() {\n        const input = document.getElementById('circle-radius').value;\n        const resultSpan = document.getElementById('circle-result');\n        \n        if (!input) {\n            resultSpan.textContent = 'エラー: 半径を入力してください';\n            resultSpan.className = 'badge bg-info error';\n            return;\n        }\n        \n        const radius = parseFloat(input);\n        if (isNaN(radius)) {\n            resultSpan.textContent = 'エラー: 有効な数値を入力してください';\n            resultSpan.className = 'badge bg-info error';\n            return;\n        }\n        \n        if (radius < 0) {\n            resultSpan.textContent = 'エラー: 半径は正の数である必要があります';\n            resultSpan.className = 'badge bg-info error';\n            return;\n        }\n        \n        const area = Math.PI * Math.pow(radius, 2);\n        resultSpan.textContent = `= ${area.toFixed(4)}`;\n        resultSpan.className = 'badge bg-info success';\n    });\n    \n    // Enter キーで計算実行\n    document.getElementById('num1').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') {\n            document.getElementById('calculate').click();\n        }\n    });\n    \n    document.getElementById('num2').addEventListener('keypress', function(e) {\n        if (e.key === 'Enter') {\n            document.getElementById('calculate').click();\n        }\n    });\n});\n\n// === ヘルパー関数 ===\n\n// 計算を実行する関数\nfunction performCalculation(num1, num2, operation) {\n    let result;\n    \n    switch (operation) {\n        case '+':\n            result = num1 + num2;\n            break;\n        case '-':\n            result = num1 - num2;\n            break;\n        case '*':\n            result = num1 * num2;\n            break;\n        case '/':\n            if (num2 === 0) {\n                throw new Error('0で割ることはできません');\n            }\n            result = num1 / num2;\n            break;\n        default:\n            throw new Error('無効な演算子です');\n    }\n    \n    return result;\n}\n\n// 結果を表示する関数\nfunction displayResult(num1, num2, operation, result) {\n    const resultElement = document.getElementById('result');\n    const operatorSymbol = getOperatorSymbol(operation);\n    const formattedResult = Number.isInteger(result) ? result : result.toFixed(4);\n    \n    resultElement.innerHTML = `\n        <div class=\"calculation\">\n            <span class=\"calculation-expression\">${num1} ${operatorSymbol} ${num2}</span>\n            <span class=\"equals\"> = </span>\n            <span class=\"calculation-result\">${formattedResult}</span>\n        </div>\n    `;\n    resultElement.className = 'alert alert-light success';\n}\n\n// 演算子の表示用記号を取得\nfunction getOperatorSymbol(operation) {\n    const symbols = {\n        '+': '+',\n        '-': '-',\n        '*': '×',\n        '/': '÷'\n    };\n    return symbols[operation] || operation;\n}\n\n// エラーメッセージを表示する関数\nfunction showError(message) {\n    const errorElement = document.getElementById('error');\n    const resultElement = document.getElementById('result');\n    \n    errorElement.textContent = `⚠️ ${message}`;\n    errorElement.classList.remove('d-none');\n    \n    resultElement.textContent = '計算エラー';\n    resultElement.className = 'alert alert-danger';\n}\n\n// エラーメッセージをクリアする関数\nfunction clearError() {\n    const errorElement = document.getElementById('error');\n    errorElement.textContent = '';\n    errorElement.classList.add('d-none');\n}\n\n// 履歴に計算結果を追加\nfunction addToHistory(num1, num2, operation, result) {\n    const timestamp = new Date().toLocaleString();\n    const operatorSymbol = getOperatorSymbol(operation);\n    const formattedResult = Number.isInteger(result) ? result : result.toFixed(4);\n    \n    const historyItem = {\n        expression: `${num1} ${operatorSymbol} ${num2} = ${formattedResult}`,\n        timestamp: timestamp\n    };\n    \n    calculationHistory.unshift(historyItem); // 最新を先頭に追加\n    \n    // 履歴は最大20件まで\n    if (calculationHistory.length > 20) {\n        calculationHistory.pop();\n    }\n    \n    updateHistoryDisplay();\n}\n\n// 履歴表示を更新\nfunction updateHistoryDisplay() {\n    const historyElement = document.getElementById('history');\n    \n    if (calculationHistory.length === 0) {\n        historyElement.innerHTML = '<p class=\"text-muted text-center\">計算履歴はまだありません</p>';\n        return;\n    }\n    \n    const historyHTML = calculationHistory.map((item, index) => `\n        <div class=\"history-item\">\n            <div class=\"history-expression\">${item.expression}</div>\n            <div class=\"history-time\">${item.timestamp}</div>\n        </div>\n    `).join('');\n    \n    historyElement.innerHTML = historyHTML;\n}\n\n// 初期メッセージ\nconsole.log('🧮 ステップ18: 簡単計算機（Bootstrap版）が読み込まれました！');\nconsole.log('💡 Bootstrapのレスポンシブデザインで計算してみましょう！');"
    }
  },
  "expectedResult": {
    "operationSelection": "4つの演算子（+、-、×、÷）が選択できる",
    "conditionalLogic": "if文で選択した演算が正しく実行される",
    "allOperations": "足し算、引き算、掛け算、割り算すべてが動作する",
    "operatorManagement": "演算子の状態が適切に管理される",
    "behavior": "本格的な四則演算計算機が完成する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}