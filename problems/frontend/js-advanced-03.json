{
  "id": "js-advanced-03",
  "title": "ランダム基本",
  "description": "Math.random()とMath.floor()を使ったランダム数生成の基本を理解し、配列からのランダム選択を実装します",
  "category": "javascript-dom",
  "difficulty": 2,
  "instructions": [
    "Math.random()でランダム数を生成する",
    "Math.floor()で小数点以下を切り捨てる",
    "配列のインデックスを使ったランダム選択を実装する",
    "ランダム処理の詳細分析システムを構築する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ステップ17.3-2 - ランダム基本</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>🎲 ランダムの基本</h1>\n        <div class=\"step-info\">\n            <strong>ステップ17.3-2 - ランダム数生成と配列からの選択</strong>\n        </div>\n        \n        <div class=\"celebration\">🎲 🎯 ⚡</div>\n        \n        <div class=\"info-box\">\n            <h3>🎯 このステップで学ぶこと</h3>\n            <ul>\n                <li><strong>Math.random()</strong>を使ったランダム数生成</li>\n                <li><strong>Math.floor()</strong>で小数点を切り捨て</li>\n                <li>配列から<strong>ランダムに要素を選択</strong>する方法</li>\n                <li><strong>インデックス</strong>を使ったランダムアクセス</li>\n            </ul>\n        </div>\n        \n        <div class=\"demo-section\">\n            <h3>🎪 ランダム選択デモ</h3>\n            <p>ボタンをクリックして、配列からランダムに要素を選択してみましょう！</p>\n            \n            <div class=\"content-display\" id=\"content-display\">\n                <h3 style=\"color: #3498db; margin-top: 0;\">🎯 ランダム選択結果</h3>\n                <p>下のボタンをクリックして、ランダム選択がどのように動作するか確認してください。</p>\n            </div>\n            \n            <div class=\"button-grid\">\n                <button class=\"random-btn btn-animal\" id=\"animal-btn\">\n                    🐾 動物ランダム選択\n                </button>\n                <button class=\"random-btn btn-number\" id=\"number-btn\">\n                    🔢 数字ランダム選択\n                </button>\n            </div>\n            \n            <div class=\"process-display\" id=\"process-display\">\n                <h4>📊 ランダム処理の詳細</h4>\n                <p>ボタンをクリックすると、ランダム処理の詳細がここに表示されます。</p>\n            </div>\n        </div>\n        \n        <div class=\"info-box\">\n            <h3>💡 ランダム選択の仕組み</h3>\n            <p>配列からランダムに要素を選択する基本的な手順：</p>\n            \n            <div class=\"code-example\">\n// 1. 配列を用意\nlet animals = [\"犬\", \"猫\", \"鳥\"];\n\n// 2. 0～1未満のランダム数を生成\nlet randomNumber = Math.random(); // 例: 0.7234...\n\n// 3. 配列の長さをかけて範囲を調整\nlet scaled = randomNumber * animals.length; // 例: 2.17...\n\n// 4. 小数点を切り捨ててインデックスを取得\nlet index = Math.floor(scaled); // 例: 2\n\n// 5. インデックスで配列から要素を取得\nlet selected = animals[index]; // \"鳥\"\n            </div>\n        </div>\n        \n        <div class=\"array-display\">\n            <h4>📋 使用している配列</h4>\n            <div class=\"array-grid\">\n                <div class=\"array-card\">\n                    <h4>🐾 動物配列</h4>\n                    <div id=\"animals-display\">読み込み中...</div>\n                </div>\n                <div class=\"array-card\">\n                    <h4>🔢 数字配列</h4>\n                    <div id=\"numbers-display\">読み込み中...</div>\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"instruction\">\n            <h3>🚀 ランダム選択を体験してみよう！</h3>\n            <p>2つのボタンを何度もクリックして、毎回違う結果が出ることを確認してください。</p>\n            <p>「ランダム処理の詳細」で、どのようにランダム選択されているかも確認しましょう！</p>\n        </div>\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "/* 基本スタイル */\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    margin: 0;\n    padding: 20px;\n    background: linear-gradient(135deg, #ff6b6b 0%, #ffa726 100%);\n    min-height: 100vh;\n    color: #333;\n}\n\n.container {\n    max-width: 900px;\n    margin: 0 auto;\n    background: white;\n    padding: 30px;\n    border-radius: 15px;\n    box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n}\n\nh1 {\n    text-align: center;\n    color: #2c3e50;\n    margin-bottom: 10px;\n    font-size: 2.5rem;\n}\n\n.step-info {\n    text-align: center;\n    background: #f8f9fa;\n    padding: 15px;\n    border-radius: 10px;\n    margin-bottom: 20px;\n    color: #495057;\n}\n\n.celebration {\n    text-align: center;\n    font-size: 3rem;\n    margin: 20px 0;\n}\n\n.info-box {\n    background: #fff3e0;\n    padding: 20px;\n    border-radius: 10px;\n    margin-bottom: 25px;\n    border-left: 4px solid #ff9800;\n}\n\n.info-box h3 {\n    margin-top: 0;\n    color: #f57c00;\n}\n\n.info-box ul {\n    margin: 15px 0;\n    padding-left: 20px;\n}\n\n.info-box li {\n    margin-bottom: 8px;\n}\n\n.demo-section {\n    background: #fff;\n    padding: 25px;\n    border-radius: 10px;\n    margin-bottom: 25px;\n    border: 1px solid #e0e0e0;\n}\n\n.content-display {\n    background: #f8f9fa;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 20px 0;\n    border: 2px dashed #dee2e6;\n    min-height: 120px;\n}\n\n.button-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 20px;\n    margin: 20px 0;\n}\n\n.random-btn {\n    padding: 18px 25px;\n    font-size: 1.1rem;\n    border: none;\n    border-radius: 12px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 1px;\n}\n\n.btn-animal {\n    background: linear-gradient(135deg, #f39c12, #e67e22);\n    color: white;\n}\n\n.btn-number {\n    background: linear-gradient(135deg, #3498db, #2980b9);\n    color: white;\n}\n\n.random-btn:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 8px 25px rgba(0,0,0,0.25);\n}\n\n.random-btn:active {\n    transform: translateY(-1px);\n}\n\n.process-display {\n    background: #f1f8e9;\n    padding: 20px;\n    border-radius: 10px;\n    margin-top: 25px;\n    border: 1px solid #c8e6c9;\n}\n\n.process-display h4 {\n    margin-top: 0;\n    color: #2e7d32;\n}\n\n.code-example {\n    background: #263238;\n    color: #e0f2f1;\n    padding: 20px;\n    border-radius: 8px;\n    font-family: 'Courier New', monospace;\n    white-space: pre-wrap;\n    overflow-x: auto;\n    margin: 15px 0;\n    line-height: 1.5;\n}\n\n.array-display {\n    background: #f3e5f5;\n    padding: 20px;\n    border-radius: 10px;\n    margin: 25px 0;\n}\n\n.array-display h4 {\n    margin-top: 0;\n    color: #7b1fa2;\n    text-align: center;\n}\n\n.array-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 20px;\n}\n\n.array-card {\n    background: white;\n    padding: 15px;\n    border-radius: 8px;\n    border: 1px solid #ce93d8;\n}\n\n.array-card h4 {\n    margin: 0 0 10px 0;\n    color: #8e24aa;\n    font-size: 1rem;\n}\n\n.array-card div {\n    font-family: monospace;\n    font-size: 0.9rem;\n    color: #444;\n    word-break: break-all;\n}\n\n.instruction {\n    background: #e8f5e9;\n    padding: 20px;\n    border-radius: 10px;\n    border-left: 4px solid #4caf50;\n}\n\n.instruction h3 {\n    margin-top: 0;\n    color: #2e7d32;\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "console.log(\"🎲 ステップ17.3-2: ランダムの基本を開始します！\");\n\n// ランダム選択用の配列を定義\nlet animals = [\"🐶 犬\", \"🐱 猫\", \"🐰 うさぎ\", \"🐸 カエル\", \"🐧 ペンギン\", \"🐻 クマ\"];\nlet numbers = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\n\n// DOM要素を取得\nlet contentDisplay = document.getElementById(\"content-display\");\nlet processDisplay = document.getElementById(\"process-display\");\n\n// 配列を表示する関数\nfunction displayArrays() {\n    document.getElementById(\"animals-display\").textContent = `[${animals.join(\", \")}] (${animals.length}個)`;\n    document.getElementById(\"numbers-display\").textContent = `[${numbers.join(\", \")}] (${numbers.length}個)`;\n}\n\n// ランダム選択を行う共通関数\nfunction randomSelect(array, arrayName) {\n    // 1. ランダム数を生成（0～1未満）\n    let randomNumber = Math.random();\n    \n    // 2. 配列の長さをかける\n    let scaled = randomNumber * array.length;\n    \n    // 3. 小数点を切り捨ててインデックスにする\n    let randomIndex = Math.floor(scaled);\n    \n    // 4. 配列から要素を取得\n    let selectedItem = array[randomIndex];\n    \n    // 処理詳細を表示\n    processDisplay.innerHTML = `\n        <h4>📊 ランダム処理の詳細</h4>\n        <div style=\"background: #f8f9fa; padding: 15px; border-radius: 8px; font-family: monospace;\">\n            <p><strong>1. ランダム数生成:</strong> ${randomNumber.toFixed(4)}</p>\n            <p><strong>2. 配列長をかける:</strong> ${randomNumber.toFixed(4)} × ${array.length} = ${scaled.toFixed(4)}</p>\n            <p><strong>3. 小数点切り捨て:</strong> Math.floor(${scaled.toFixed(4)}) = ${randomIndex}</p>\n            <p><strong>4. 配列から取得:</strong> ${arrayName}[${randomIndex}] = \"${selectedItem}\"</p>\n        </div>\n    `;\n    \n    // コンソールにも表示\n    console.log(`${arrayName}からランダム選択:`);\n    console.log(`ランダム数: ${randomNumber}`);\n    console.log(`インデックス: ${randomIndex}`);\n    console.log(`選択された要素: ${selectedItem}`);\n    \n    return { selectedItem, randomIndex, randomNumber, scaled };\n}\n\n// 動物ランダム選択ボタン\ndocument.getElementById(\"animal-btn\").addEventListener(\"click\", function() {\n    console.log(\"🐾 動物ランダム選択が押されました\");\n    \n    let result = randomSelect(animals, \"animals\");\n    \n    contentDisplay.innerHTML = `\n        <h3 style=\"color: #f39c12; margin-top: 0;\">🐾 選ばれた動物</h3>\n        <div style=\"background: linear-gradient(135deg, #f39c12, #f1c40f); color: white; padding: 25px; border-radius: 15px; text-align: center;\">\n            <div style=\"font-size: 4rem; margin: 10px 0;\">\n                ${result.selectedItem.charAt(0)}\n            </div>\n            <h2 style=\"margin: 10px 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\">\n                ${result.selectedItem.substring(2)}\n            </h2>\n        </div>\n        <p style=\"color: #7f8c8d; margin-top: 15px;\">\n            📍 ${animals.length}匹の動物の中から ${result.randomIndex + 1} 番目が選ばれました\n        </p>\n    `;\n});\n\n// 数字ランダム選択ボタン\ndocument.getElementById(\"number-btn\").addEventListener(\"click\", function() {\n    console.log(\"🔢 数字ランダム選択が押されました\");\n    \n    let result = randomSelect(numbers, \"numbers\");\n    \n    contentDisplay.innerHTML = `\n        <h3 style=\"color: #3498db; margin-top: 0;\">🔢 選ばれた数字</h3>\n        <div style=\"background: linear-gradient(135deg, #3498db, #2980b9); color: white; padding: 25px; border-radius: 15px; text-align: center;\">\n            <div style=\"font-size: 5rem; font-weight: bold; margin: 20px 0; text-shadow: 3px 3px 6px rgba(0,0,0,0.3);\">\n                ${result.selectedItem}\n            </div>\n            <h3 style=\"margin: 10px 0;\">ラッキーナンバー！</h3>\n        </div>\n        <p style=\"color: #7f8c8d; margin-top: 15px;\">\n            📍 ${numbers.length}個の数字の中から ${result.randomIndex + 1} 番目が選ばれました\n        </p>\n    `;\n});\n\n// 初期化処理\ndisplayArrays();\n\nconsole.log(\"✅ ランダム選択システムが初期化されました！\");\nconsole.log(\"🎲 Math.random()のテスト:\", Math.random());\nconsole.log(\"💡 ボタンをクリックして、ランダム選択を体験してください！\");"
    }
  },
  "expectedResult": {
    "randomGeneration": "0以上1未満のランダム数が生成される",
    "arraySelection": "配列から要素がランダムに選択される",
    "processAnalysis": "ランダム選択の計算過程が表示される",
    "behavior": "動物と数字の配列からランダム選択が動作する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}