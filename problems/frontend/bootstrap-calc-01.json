{
  "id": "bootstrap-calc-01",
  "title": "統合システム完成",
  "description": "シンプル統合システムにマイナス機能を追加して、完成した統合システムを作成します",
  "category": "practical-projects",
  "difficulty": 3,
  "instructions": [
    "前回の3つの機能（カウンター、データ保存、リセット）を確認する",
    "マイナスボタンでカウントを1減らす機能を追加する",
    "カウントが0以下にならないよう制限を実装する",
    "4つの機能が連携して動作する完成システムを構築する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>19.6 統合システム - パフォーマンス最適化と学習の集大成</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <!-- 左側: 商品カード -->\n        <div class=\"product-card\">\n            <div class=\"product-image-container\">\n                <div id=\"productImage\" class=\"product-image default-image\" role=\"img\" \n                     aria-label=\"商品画像: デフォルト表示\">🎽</div>\n                \n                <div class=\"image-buttons\">\n                    <button class=\"image-btn\" onclick=\"changeImage(1)\" aria-label=\"画像1に変更\">\n                        <span class=\"image-preview\">🎽</span>\n                    </button>\n                    <button class=\"image-btn\" onclick=\"changeImage(2)\" aria-label=\"画像2に変更\">\n                        <span class=\"image-preview\">👕</span>\n                    </button>\n                    <button class=\"image-btn\" onclick=\"changeImage(3)\" aria-label=\"画像3に変更\">\n                        <span class=\"image-preview\">🏷️</span>\n                    </button>\n                </div>\n                \n                <div id=\"performanceBadge\" class=\"performance-badge\" aria-live=\"polite\">⚡ 最適化済み</div>\n            </div>\n            \n            <div class=\"product-info\">\n                <h2 class=\"product-title\">プレミアム Tシャツ</h2>\n                <div class=\"product-price\">¥2,980</div>\n                \n                <div class=\"product-actions\">\n                    <button id=\"likeBtn\" class=\"btn like-btn\" onclick=\"handleLike()\" \n                            aria-pressed=\"false\" aria-label=\"この商品にいいねする\">\n                        <span class=\"btn-icon\">❤️</span>\n                        <span class=\"btn-text\">いいね</span>\n                        <span id=\"likeCount\" class=\"like-count\">0</span>\n                    </button>\n                    \n                    <button id=\"detailsBtn\" class=\"btn details-btn\" onclick=\"handleDetails()\" \n                            aria-expanded=\"false\" aria-label=\"商品詳細を表示\">\n                        <span class=\"btn-icon\">📋</span>\n                        <span class=\"btn-text\">詳細</span>\n                    </button>\n                    \n                    <button id=\"cartBtn\" class=\"btn cart-btn\" onclick=\"handleCart()\" \n                            aria-pressed=\"false\" aria-label=\"カートに追加\">\n                        <span class=\"btn-icon\">🛒</span>\n                        <span class=\"btn-text\">カート</span>\n                    </button>\n                    \n                    <button id=\"shareBtn\" class=\"btn share-btn\" onclick=\"handleShare()\" \n                            aria-label=\"商品をシェアする\">\n                        <span class=\"btn-icon\">📤</span>\n                        <span class=\"btn-text\">シェア</span>\n                    </button>\n                </div>\n                \n                <div id=\"productDetails\" class=\"product-details\" aria-hidden=\"true\">\n                    <h3>商品詳細</h3>\n                    <ul>\n                        <li>素材: 100% 綿</li>\n                        <li>サイズ: S/M/L/XL</li>\n                        <li>カラー: 白/黒/グレー</li>\n                        <li>洗濯: 手洗い可</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n\n        <!-- 右側: 学習パネル -->\n        <div class=\"learning-panel\">\n            <!-- 統計セクション -->\n            <div class=\"stats-section\">\n                <h3>📊 アクション統計</h3>\n                <div class=\"stats-grid\">\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">いいね</span>\n                        <span id=\"totalLikes\" class=\"stat-value\">0</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">詳細確認</span>\n                        <span id=\"totalViews\" class=\"stat-value\">0</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">カート追加</span>\n                        <span id=\"totalCart\" class=\"stat-value\">0</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">画像切替</span>\n                        <span id=\"totalImageChanges\" class=\"stat-value\">0</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">シェア回数</span>\n                        <span id=\"totalShares\" class=\"stat-value\">0</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-label\">総アクション</span>\n                        <span id=\"totalActions\" class=\"stat-value\">0</span>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- パフォーマンスメトリクス -->\n            <div class=\"performance-section\">\n                <h3>⚡ パフォーマンス監視</h3>\n                <div id=\"performanceMetrics\" class=\"performance-grid\">\n                    <div class=\"metric-item\">\n                        <span class=\"metric-label\">平均応答時間</span>\n                        <span id=\"avgResponseTime\" class=\"metric-value\">-</span>\n                    </div>\n                    <div class=\"metric-item\">\n                        <span class=\"metric-label\">メモリ使用量</span>\n                        <span id=\"memoryUsage\" class=\"metric-value\">-</span>\n                    </div>\n                    <div class=\"metric-item\">\n                        <span class=\"metric-label\">フレームレート</span>\n                        <span id=\"frameRate\" class=\"metric-value\">-</span>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- 高度分析 -->\n            <div class=\"analysis-section\">\n                <h3>🎯 高度分析システム</h3>\n                <div id=\"analysisContent\" class=\"analysis-content\">\n                    <p>システム分析中...</p>\n                </div>\n            </div>\n            \n            <!-- オブジェクト表示 -->\n            <div class=\"object-section\">\n                <h3>🔍 データオブジェクト</h3>\n                <div id=\"objectDisplay\" class=\"object-display\"></div>\n            </div>\n            \n            <!-- リセット・最適化ボタン -->\n            <div class=\"control-section\">\n                <button id=\"resetBtn\" class=\"btn reset-btn\" onclick=\"handleReset()\" aria-label=\"全データをリセット\">\n                    <span class=\"btn-icon\">🔄</span>\n                    <span class=\"btn-text\">リセット</span>\n                </button>\n                \n                <button id=\"optimizeBtn\" class=\"btn optimize-btn\" onclick=\"optimizeSystem()\" aria-label=\"システムを最適化\">\n                    <span class=\"btn-icon\">⚡</span>\n                    <span class=\"btn-text\">最適化</span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <!-- 通知システム -->\n    <div id=\"notification\" class=\"notification\" role=\"alert\" aria-live=\"assertive\"></div>\n    \n    <!-- アクセシビリティ用ライブリージョン -->\n    <div id=\"liveRegion\" class=\"sr-only\" aria-live=\"polite\"></div>\n\n    <!-- 外部JavaScriptファイルの読み込み -->\n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        /* パフォーマンス最適化: will-changeプロパティ */\n        .optimized-animation {\n            will-change: transform, opacity;\n        }\n\n        /* アクセシビリティ: 基本設定 */\n        :focus {\n            outline: 3px solid #3498db;\n            outline-offset: 2px;\n        }\n\n        @media (prefers-contrast: high) {\n            * {\n                border-color: #000 !important;\n            }\n        }\n\n        @media (prefers-reduced-motion: reduce) {\n            *, *::before, *::after {\n                animation-duration: 0.01ms !important;\n                animation-iteration-count: 1 !important;\n                transition-duration: 0.01ms !important;\n            }\n        }\n\n        body {\n            font-family: 'Hiragino Sans', 'Yu Gothic UI', Arial, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 15px;\n            font-size: 16px;\n            line-height: 1.5;\n        }\n\n        .container {\n            max-width: 1300px;\n            width: 100%;\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 25px;\n            animation: fadeInUp 0.8s ease;\n        }\n\n        @keyframes fadeInUp {\n            from {\n                opacity: 0;\n                transform: translateY(30px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n\n        /* 商品カード（最適化・統合版） */\n        .product-card {\n            background: white;\n            border-radius: 20px;\n            padding: 25px;\n            text-align: center;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n            position: relative;\n        }\n\n        .product-card:hover,\n        .product-card:focus-within {\n            transform: translateY(-5px);\n            box-shadow: 0 25px 50px rgba(0,0,0,0.15);\n        }\n\n        /* パフォーマンス監視表示 */\n        .performance-badge {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            background: #2ecc71;\n            color: white;\n            padding: 5px 10px;\n            border-radius: 15px;\n            font-size: 10px;\n            font-weight: 600;\n            opacity: 0.8;\n        }\n\n        .performance-badge.warning {\n            background: #f39c12;\n        }\n\n        .performance-badge.error {\n            background: #e74c3c;\n        }\n\n        /* 画像システム（最適化版） */\n        .image-container {\n            position: relative;\n            width: 130px;\n            height: 130px;\n            margin: 0 auto 20px auto;\n            border-radius: 15px;\n            overflow: hidden;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n        }\n\n        .product-image {\n            width: 100%;\n            height: 100%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 45px;\n            color: white;\n            transition: all 0.5s ease;\n            cursor: pointer;\n            border: none;\n            background: none;\n        }\n\n        .product-image:hover,\n        .product-image:focus {\n            transform: scale(1.1);\n        }\n\n        .image-1 { background: linear-gradient(45deg, #ff6b6b, #4ecdc4); }\n        .image-2 { background: linear-gradient(45deg, #a8e6cf, #ffd3a5); }\n        .image-3 { background: linear-gradient(45deg, #84fab0, #8fd3f4); }\n        .image-4 { background: linear-gradient(45deg, #ffeaa7, #fab1a0); }\n        .image-5 { background: linear-gradient(45deg, #fd79a8, #e84393); }\n\n        /* 画像切替ボタン（5個に拡張） */\n        .image-controls {\n            display: flex;\n            justify-content: center;\n            gap: 8px;\n            margin-bottom: 15px;\n        }\n\n        .image-btn {\n            width: 10px;\n            height: 10px;\n            border-radius: 50%;\n            background: #ddd;\n            border: none;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            min-width: 40px;\n            min-height: 40px;\n            position: relative;\n        }\n\n        .image-btn::before {\n            content: '';\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 10px;\n            height: 10px;\n            border-radius: 50%;\n            background: inherit;\n            transform: translate(-50%, -50%);\n        }\n\n        .image-btn.active::before {\n            background: #3498db;\n            transform: translate(-50%, -50%) scale(1.5);\n        }\n\n        /* 商品情報 */\n        .product-info h2 {\n            color: #333;\n            font-size: 19px;\n            margin-bottom: 8px;\n            transition: color 0.3s ease;\n        }\n\n        .product-price {\n            font-size: 22px;\n            color: #e74c3c;\n            font-weight: bold;\n            margin-bottom: 20px;\n            transition: transform 0.3s ease;\n        }\n\n        /* アクションボタン（統合最適化版） */\n        .action-buttons {\n            display: flex;\n            gap: 8px;\n            margin-bottom: 20px;\n            justify-content: center;\n            flex-wrap: wrap;\n        }\n\n        .btn {\n            padding: 10px 16px;\n            border: none;\n            border-radius: 20px;\n            cursor: pointer;\n            font-size: 12px;\n            font-weight: 600;\n            transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n            flex: 1;\n            max-width: 100px;\n            min-width: 44px;\n            min-height: 44px;\n            position: relative;\n            overflow: hidden;\n        }\n\n        .btn::before {\n            content: '';\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            width: 0;\n            height: 0;\n            background: rgba(255,255,255,0.3);\n            border-radius: 50%;\n            transition: width 0.6s, height 0.6s;\n            transform: translate(-50%, -50%);\n            z-index: 0;\n        }\n\n        .btn:active::before {\n            width: 300px;\n            height: 300px;\n        }\n\n        .btn > span {\n            position: relative;\n            z-index: 1;\n        }\n\n        .btn-like {\n            background: #f8f9fa;\n            color: #666;\n            border: 2px solid #ddd;\n        }\n\n        .btn-like.liked {\n            background: #e74c3c;\n            color: white;\n            border-color: #e74c3c;\n            animation: pulse 0.6s ease;\n        }\n\n        @keyframes pulse {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.15); }\n            100% { transform: scale(1); }\n        }\n\n        .btn-details {\n            background: #3498db;\n            color: white;\n        }\n\n        .btn-cart {\n            background: #27ae60;\n            color: white;\n        }\n\n        .btn-cart.in-cart {\n            background: #f39c12;\n            animation: bounce 0.5s ease;\n        }\n\n        @keyframes bounce {\n            0%, 100% { transform: scale(1); }\n            50% { transform: scale(1.2); }\n        }\n\n        .btn-share {\n            background: #9b59b6;\n            color: white;\n        }\n\n        .btn:hover,\n        .btn:focus {\n            transform: translateY(-2px) scale(1.05);\n            box-shadow: 0 8px 20px rgba(0,0,0,0.2);\n        }\n\n        /* 商品詳細 */\n        .product-details {\n            background: #f8f9fa;\n            border-radius: 15px;\n            padding: 15px;\n            margin-top: 15px;\n            opacity: 0;\n            max-height: 0;\n            overflow: hidden;\n            transition: all 0.5s ease;\n            text-align: left;\n        }\n\n        .product-details.show {\n            opacity: 1;\n            max-height: 300px;\n            animation: slideDown 0.5s ease;\n        }\n\n        @keyframes slideDown {\n            from {\n                opacity: 0;\n                transform: translateY(-20px);\n            }\n            to {\n                opacity: 1;\n                transform: translateY(0);\n            }\n        }\n\n        /* 通知システム */\n        .notification {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: #2ecc71;\n            color: white;\n            padding: 12px 18px;\n            border-radius: 10px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n            opacity: 0;\n            transform: translateX(100%);\n            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n            font-size: 13px;\n            font-weight: 600;\n            z-index: 1000;\n            max-width: 280px;\n        }\n\n        .notification.show {\n            opacity: 1;\n            transform: translateX(0);\n        }\n\n        .notification.error {\n            background: #e74c3c;\n        }\n\n        .notification.info {\n            background: #3498db;\n        }\n\n        .notification.warning {\n            background: #f39c12;\n        }\n\n        /* スクリーンリーダー用 */\n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0, 0, 0, 0);\n            white-space: nowrap;\n            border: 0;\n        }\n\n        /* 学習パネル（統合最適化版） */\n        .learning-panel {\n            background: white;\n            border-radius: 20px;\n            padding: 20px;\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n            animation: fadeInUp 0.8s ease 0.2s both;\n        }\n\n        .panel-title {\n            text-align: center;\n            font-size: 16px;\n            font-weight: 600;\n            color: #333;\n            margin-bottom: 15px;\n        }\n\n        /* 統計表示（拡張版） */\n        .stats-grid {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            gap: 8px;\n            margin-bottom: 15px;\n        }\n\n        .stat-item {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 10px;\n            border-radius: 10px;\n            text-align: center;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            min-height: 44px;\n        }\n\n        .stat-item:hover,\n        .stat-item:focus {\n            transform: translateY(-2px);\n            box-shadow: 0 8px 20px rgba(0,0,0,0.2);\n        }\n\n        .stat-number {\n            font-size: 14px;\n            font-weight: bold;\n            margin-bottom: 2px;\n        }\n\n        .stat-label {\n            font-size: 9px;\n            opacity: 0.9;\n        }\n\n        /* パフォーマンス表示 */\n        .performance-section {\n            background: #34495e;\n            color: #ecf0f1;\n            border-radius: 10px;\n            padding: 12px;\n            margin-bottom: 12px;\n        }\n\n        .performance-title {\n            font-size: 12px;\n            font-weight: 600;\n            margin-bottom: 8px;\n            color: #3498db;\n        }\n\n        .performance-metrics {\n            font-size: 10px;\n            line-height: 1.4;\n        }\n\n        .metric-item {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 3px;\n        }\n\n        .metric-good {\n            color: #2ecc71;\n        }\n\n        .metric-warning {\n            color: #f39c12;\n        }\n\n        .metric-error {\n            color: #e74c3c;\n        }\n\n        /* 分析・予測セクション */\n        .analysis-section {\n            background: #f8f9fa;\n            border-radius: 10px;\n            padding: 12px;\n            margin-bottom: 12px;\n        }\n\n        .analysis-title {\n            font-size: 12px;\n            color: #666;\n            margin-bottom: 8px;\n            font-weight: 600;\n        }\n\n        .analysis-content {\n            font-size: 10px;\n            line-height: 1.4;\n            max-height: 80px;\n            overflow-y: auto;\n        }\n\n        /* コントロールボタン（拡張版） */\n        .control-buttons {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 8px;\n        }\n\n        .btn-control {\n            padding: 10px;\n            border: none;\n            border-radius: 10px;\n            font-size: 11px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n            position: relative;\n            overflow: hidden;\n            min-height: 40px;\n        }\n\n        .btn-control:hover,\n        .btn-control:focus {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 15px rgba(0,0,0,0.2);\n        }\n\n        .btn-reset {\n            background: #e74c3c;\n            color: white;\n        }\n\n        .btn-optimize {\n            background: #2ecc71;\n            color: white;\n        }\n\n        /* レスポンシブデザイン: モバイル */\n        @media (max-width: 768px) {\n            .container {\n                grid-template-columns: 1fr;\n                gap: 15px;\n            }\n            \n            .stats-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 6px;\n            }\n            \n            .action-buttons {\n                flex-direction: column;\n                align-items: center;\n                gap: 6px;\n            }\n            \n            .btn {\n                max-width: 180px;\n                width: 100%;\n            }\n            \n            .notification {\n                top: 10px;\n                right: 10px;\n                left: 10px;\n                transform: translateY(-100%);\n            }\n            \n            .notification.show {\n                transform: translateY(0);\n            }\n            \n            .image-controls {\n                gap: 6px;\n            }\n            \n            .image-btn {\n                min-width: 35px;\n                min-height: 35px;\n            }\n        }\n\n        /* ダークモード対応 */\n        @media (prefers-color-scheme: dark) {\n            body {\n                background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\n            }\n            \n            .product-card,\n            .learning-panel {\n                background: #34495e;\n                color: #ecf0f1;\n            }\n            \n            .product-info h2 {\n                color: #ecf0f1;\n            }\n            \n            .analysis-section {\n                background: #2c3e50;\n            }\n            \n            .analysis-title {\n                color: #ecf0f1;\n            }\n            \n            .product-details {\n                background: #2c3e50;\n            }\n        }\n"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "        // === 19.6 統合システム - 商品カード学習の集大成 ===\n\n        // 1. 商品データオブジェクト（最終統合版）\n        let productData = {\n            name: \"プレミアム Tシャツ\",\n            price: 2980,\n            likes: 0,\n            isLiked: false,\n            showDetails: false,\n            inCart: false,\n            isShared: false,\n            detailViews: 0,\n            cartActions: 0,\n            imageChanges: 0,\n            shareCount: 0,\n            totalActions: 0,\n            currentImage: 1,\n            deviceType: 'desktop',\n            accessibilityMode: false,\n            performanceOptimized: true,\n            lastUpdated: new Date().toISOString(),\n            sessionStart: new Date().toISOString()\n        };\n\n        let actionHistory = [];\n        let performanceMetrics = {\n            responseTimes: [],\n            memoryUsages: [],\n            frameRates: []\n        };\n\n        // 2. DOM要素の取得\n        const productImage = document.getElementById('productImage');\n        const imageButtons = document.querySelectorAll('.image-btn');\n        const likeBtn = document.getElementById('likeBtn');\n        const detailsBtn = document.getElementById('detailsBtn');\n        const cartBtn = document.getElementById('cartBtn');\n        const shareBtn = document.getElementById('shareBtn');\n        const productDetails = document.getElementById('productDetails');\n        const notification = document.getElementById('notification');\n        const liveRegion = document.getElementById('liveRegion');\n        const performanceBadge = document.getElementById('performanceBadge');\n        const likeCount = document.getElementById('likeCount');\n        const totalLikes = document.getElementById('totalLikes');\n        const totalViews = document.getElementById('totalViews');\n        const totalCart = document.getElementById('totalCart');\n        const totalImageChanges = document.getElementById('totalImageChanges');\n        const totalShares = document.getElementById('totalShares');\n        const totalActions = document.getElementById('totalActions');\n        const performanceMetricsEl = document.getElementById('performanceMetrics');\n        const avgResponseTime = document.getElementById('avgResponseTime');\n        const memoryUsage = document.getElementById('memoryUsage');\n        const frameRate = document.getElementById('frameRate');\n        const analysisContent = document.getElementById('analysisContent');\n        const objectDisplay = document.getElementById('objectDisplay');\n        const resetBtn = document.getElementById('resetBtn');\n        const optimizeBtn = document.getElementById('optimizeBtn');\n\n        // 3. パフォーマンス測定システム（新機能 - メイン学習ポイント）\n        class PerformanceMonitor {\n            static measureExecutionTime(func, label) {\n                const startTime = performance.now();\n                const result = func();\n                const endTime = performance.now();\n                const duration = endTime - startTime;\n                \n                this.recordMetric('responseTime', duration);\n                console.log(`⚡ ${label}: ${duration.toFixed(2)}ms`);\n                return result;\n            }\n\n            static recordMetric(type, value) {\n                switch(type) {\n                    case 'responseTime':\n                        performanceMetrics.responseTimes.push(value);\n                        if (performanceMetrics.responseTimes.length > 50) {\n                            performanceMetrics.responseTimes.shift();\n                        }\n                        break;\n                    case 'memory':\n                        if (performance.memory) {\n                            const usage = performance.memory.usedJSHeapSize / 1024 / 1024;\n                            performanceMetrics.memoryUsages.push(usage);\n                        }\n                        break;\n                }\n                this.updatePerformanceDisplay();\n            }\n\n            static updatePerformanceDisplay() {\n                // 平均応答時間\n                if (performanceMetrics.responseTimes.length > 0) {\n                    const avg = performanceMetrics.responseTimes.reduce((a, b) => a + b, 0) / performanceMetrics.responseTimes.length;\n                    avgResponseTime.textContent = `${avg.toFixed(1)}ms`;\n                    avgResponseTime.className = avg < 5 ? 'metric-good' : avg < 20 ? 'metric-warning' : 'metric-error';\n                }\n\n                // メモリ使用量\n                if (performance.memory) {\n                    const usage = performance.memory.usedJSHeapSize / 1024 / 1024;\n                    memoryUsage.textContent = usage < 10 ? '最適' : usage < 20 ? '普通' : '要最適化';\n                    memoryUsage.className = usage < 10 ? 'metric-good' : usage < 20 ? 'metric-warning' : 'metric-error';\n                }\n\n                // パフォーマンスバッジ更新\n                this.updatePerformanceBadge();\n            }\n\n            static updatePerformanceBadge() {\n                const avgResponse = performanceMetrics.responseTimes.length > 0 \n                    ? performanceMetrics.responseTimes.reduce((a, b) => a + b, 0) / performanceMetrics.responseTimes.length \n                    : 0;\n                \n                if (avgResponse < 5) {\n                    performanceBadge.className = 'performance-badge';\n                    performanceBadge.textContent = '⚡ 高速';\n                } else if (avgResponse < 20) {\n                    performanceBadge.className = 'performance-badge warning';\n                    performanceBadge.textContent = '⚠️ 普通';\n                } else {\n                    performanceBadge.className = 'performance-badge error';\n                    performanceBadge.textContent = '🐌 要最適化';\n                }\n            }\n        }\n\n        // 4. インテリジェント分析システム（新機能）\n        class IntelligentAnalyzer {\n            static analyzeUserBehavior() {\n                const totalTime = new Date() - new Date(productData.sessionStart);\n                const actionsPerMinute = productData.totalActions / (totalTime / 60000);\n                const favoriteImage = this.getMostUsedImage();\n                \n                let analysis = `📊 ユーザー行動分析\\n`;\n                analysis += `・セッション時間: ${Math.floor(totalTime / 1000)}秒\\n`;\n                analysis += `・操作頻度: ${actionsPerMinute.toFixed(1)}/分\\n`;\n                analysis += `・お気に入り画像: ${favoriteImage}\\n`;\n                \n                if (productData.isLiked && productData.inCart) {\n                    analysis += `・購入意欲: 高（いいね+カート）\\n`;\n                } else if (productData.isLiked) {\n                    analysis += `・購入意欲: 中（いいねのみ）\\n`;\n                } else {\n                    analysis += `・購入意欲: 低\\n`;\n                }\n\n                return analysis;\n            }\n\n            static getMostUsedImage() {\n                // 履歴から最も使用された画像を分析\n                const imageUse = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };\n                actionHistory.forEach(action => {\n                    if (action.includes('画像')) {\n                        const match = action.match(/(\\d+)/);\n                        if (match) {\n                            imageUse[match[1]]++;\n                        }\n                    }\n                });\n                \n                const mostUsed = Object.keys(imageUse).reduce((a, b) => imageUse[a] > imageUse[b] ? a : b);\n                return `画像${mostUsed}`;\n            }\n\n            static generateOptimizationSuggestions() {\n                let suggestions = `🚀 最適化提案\\n`;\n                \n                if (productData.detailViews === 0) {\n                    suggestions += `・商品詳細の確認をお勧めします\\n`;\n                }\n                if (productData.isLiked && !productData.inCart) {\n                    suggestions += `・いいねした商品をカートに追加しませんか？\\n`;\n                }\n                if (productData.imageChanges < 3) {\n                    suggestions += `・他の商品画像もご覧ください\\n`;\n                }\n                if (productData.shareCount === 0) {\n                    suggestions += `・気に入った商品をシェアしてみませんか？\\n`;\n                }\n                \n                return suggestions;\n            }\n        }\n\n        // 5. 通知システム（強化版）\n        function showNotification(message, type = 'success') {\n            PerformanceMonitor.measureExecutionTime(() => {\n                notification.textContent = message;\n                notification.className = `notification ${type} show`;\n                notification.setAttribute('aria-label', message);\n                announceToScreenReader(message);\n            }, 'Notification');\n            \n            setTimeout(() => {\n                notification.classList.remove('show');\n            }, 3000);\n        }\n\n        // 6. アクセシビリティ支援\n        function announceToScreenReader(message) {\n            liveRegion.textContent = message;\n            setTimeout(() => {\n                liveRegion.textContent = '';\n            }, 1000);\n        }\n\n        // 7. データ管理（統合版）\n        function incrementAction() {\n            productData.totalActions += 1;\n            addToHistory('システム操作');\n            updateDisplay();\n        }\n\n        function saveData() {\n            PerformanceMonitor.measureExecutionTime(() => {\n                try {\n                    productData.lastUpdated = new Date().toISOString();\n                    localStorage.setItem('productCardData_v6', JSON.stringify(productData));\n                    localStorage.setItem('productCardHistory_v6', JSON.stringify(actionHistory));\n                    localStorage.setItem('performanceMetrics_v6', JSON.stringify(performanceMetrics));\n                } catch (error) {\n                    showNotification('データ保存エラー', 'error');\n                    console.error('保存エラー:', error);\n                }\n            }, 'Data Save');\n        }\n\n        function loadData() {\n            try {\n                const savedData = localStorage.getItem('productCardData_v6');\n                if (savedData) {\n                    const parsed = JSON.parse(savedData);\n                    productData = Object.assign({\n                        deviceType: 'desktop',\n                        accessibilityMode: false,\n                        performanceOptimized: true,\n                        sessionStart: new Date().toISOString()\n                    }, parsed);\n                }\n\n                const savedHistory = localStorage.getItem('productCardHistory_v6');\n                if (savedHistory) {\n                    actionHistory = JSON.parse(savedHistory);\n                }\n\n                const savedMetrics = localStorage.getItem('performanceMetrics_v6');\n                if (savedMetrics) {\n                    performanceMetrics = JSON.parse(savedMetrics);\n                }\n            } catch (error) {\n                showNotification('データ読み込みエラー', 'error');\n                resetToDefaults();\n            }\n        }\n\n        // 8. 画像切替システム（5画像対応）\n        function changeImage(imageNumber) {\n            PerformanceMonitor.measureExecutionTime(() => {\n                const images = ['👕', '👔', '🧥', '👗', '🧦'];\n                const imageClasses = ['image-1', 'image-2', 'image-3', 'image-4', 'image-5'];\n                const imageNames = ['Tシャツ', 'ワイシャツ', 'ジャケット', 'ドレス', '靴下'];\n                \n                productImage.className = 'product-image';\n                \n                setTimeout(() => {\n                    productImage.className = `product-image ${imageClasses[imageNumber - 1]}`;\n                    productImage.textContent = images[imageNumber - 1];\n                    productImage.setAttribute('aria-label', `商品画像: ${imageNames[imageNumber - 1]}`);\n                    \n                    productData.currentImage = imageNumber;\n                    productData.imageChanges += 1;\n                    incrementAction();\n                    \n                    imageButtons.forEach((btn, index) => {\n                        const isActive = index + 1 === imageNumber;\n                        btn.classList.toggle('active', isActive);\n                        btn.setAttribute('aria-pressed', isActive.toString());\n                    });\n                    \n                    showNotification(`${imageNames[imageNumber - 1]}に変更`, 'info');\n                    addToHistory(`画像を${imageNumber}番に変更`);\n                    updateDisplay();\n                    saveData();\n                }, 50);\n            }, `Image Change ${imageNumber}`);\n        }\n\n        // 9. 各種機能（最適化版）\n        function handleLike() {\n            PerformanceMonitor.measureExecutionTime(() => {\n                productData.isLiked = !productData.isLiked;\n                productData.likes += productData.isLiked ? 1 : -1;\n                incrementAction();\n                \n                const message = productData.isLiked ? '❤️ いいねしました！' : '💔 いいねを取り消しました';\n                addToHistory(productData.isLiked ? 'いいねしました' : 'いいねを取り消し');\n                showNotification(message);\n                \n                updateDisplay();\n                saveData();\n            }, 'Like Action');\n        }\n\n        function handleDetailsToggle() {\n            PerformanceMonitor.measureExecutionTime(() => {\n                productData.showDetails = !productData.showDetails;\n                incrementAction();\n                \n                if (productData.showDetails) {\n                    productData.detailViews += 1;\n                    addToHistory('詳細情報を表示');\n                    showNotification('📝 詳細情報を表示');\n                } else {\n                    addToHistory('詳細情報を閉じる');\n                    showNotification('📝 詳細情報を閉じる');\n                }\n                \n                updateDisplay();\n                saveData();\n            }, 'Details Toggle');\n        }\n\n        function handleCart() {\n            PerformanceMonitor.measureExecutionTime(() => {\n                productData.inCart = !productData.inCart;\n                productData.cartActions += 1;\n                incrementAction();\n                \n                const message = productData.inCart ? '🛒 カートに追加！' : '🗑️ カートから削除';\n                addToHistory(productData.inCart ? 'カートに追加' : 'カートから削除');\n                showNotification(message);\n                \n                updateDisplay();\n                saveData();\n            }, 'Cart Action');\n        }\n\n        function handleShare() {\n            PerformanceMonitor.measureExecutionTime(() => {\n                productData.isShared = true;\n                productData.shareCount += 1;\n                incrementAction();\n                \n                addToHistory('商品を共有しました');\n                showNotification('📤 商品を共有しました！', 'info');\n                \n                // 実際のシェア機能（モックアップ）\n                if (navigator.share) {\n                    navigator.share({\n                        title: productData.name,\n                        text: `素敵な商品を見つけました！`,\n                        url: window.location.href\n                    });\n                } else {\n                    // フォールバック: クリップボードにコピー\n                    navigator.clipboard.writeText(window.location.href);\n                    showNotification('📋 リンクをクリップボードにコピーしました', 'info');\n                }\n                \n                updateDisplay();\n                saveData();\n            }, 'Share Action');\n        }\n\n        // 10. システム最適化機能（新機能）\n        function optimizeSystem() {\n            PerformanceMonitor.measureExecutionTime(() => {\n                // メモリクリーンアップ\n                if (actionHistory.length > 20) {\n                    actionHistory = actionHistory.slice(0, 10);\n                }\n                \n                // パフォーマンスメトリクスのクリーンアップ\n                if (performanceMetrics.responseTimes.length > 100) {\n                    performanceMetrics.responseTimes = performanceMetrics.responseTimes.slice(-50);\n                }\n                \n                // 最適化完了\n                productData.performanceOptimized = true;\n                showNotification('⚡ システム最適化完了！', 'success');\n                addToHistory('システム最適化実行');\n                \n                updateDisplay();\n                saveData();\n            }, 'System Optimization');\n        }\n\n        // 11. 表示更新（統合最適化版）\n        function updateDisplay() {\n            PerformanceMonitor.measureExecutionTime(() => {\n                // カウンター更新\n                likeCount.textContent = productData.likes;\n                totalLikes.textContent = productData.likes;\n                totalViews.textContent = productData.detailViews;\n                totalCart.textContent = productData.cartActions;\n                totalImageChanges.textContent = productData.imageChanges;\n                totalShares.textContent = productData.shareCount;\n                totalActions.textContent = productData.totalActions;\n\n                // ボタン状態更新（ARIA属性込み）\n                updateButtonStates();\n                \n                // オブジェクト表示更新\n                objectDisplay.innerHTML = `\n                    likes: ${productData.likes}<br>\n                    currentImage: ${productData.currentImage}<br>\n                    totalActions: ${productData.totalActions}<br>\n                    inCart: ${productData.inCart}<br>\n                    optimized: ${productData.performanceOptimized}\n                `;\n\n                // 分析内容更新\n                const analysis = IntelligentAnalyzer.analyzeUserBehavior();\n                const suggestions = IntelligentAnalyzer.generateOptimizationSuggestions();\n                analysisContent.textContent = `${analysis}\\n${suggestions}`;\n                \n                // 画像状態復元\n                if (productData.currentImage && productData.currentImage !== 1) {\n                    changeImage(productData.currentImage);\n                }\n            }, 'Display Update');\n        }\n\n        function updateButtonStates() {\n            // いいねボタン\n            if (productData.isLiked) {\n                likeBtn.classList.add('liked');\n                likeBtn.setAttribute('aria-pressed', 'true');\n                likeBtn.setAttribute('aria-label', 'いいねを取り消す');\n            } else {\n                likeBtn.classList.remove('liked');\n                likeBtn.setAttribute('aria-pressed', 'false');\n                likeBtn.setAttribute('aria-label', 'この商品にいいねする');\n            }\n            \n            // 詳細ボタン\n            if (productData.showDetails) {\n                productDetails.classList.add('show');\n                productDetails.setAttribute('aria-hidden', 'false');\n                detailsBtn.innerHTML = '<span>📝 閉じる</span>';\n                detailsBtn.setAttribute('aria-expanded', 'true');\n            } else {\n                productDetails.classList.remove('show');\n                productDetails.setAttribute('aria-hidden', 'true');\n                detailsBtn.innerHTML = '<span>📝 詳細</span>';\n                detailsBtn.setAttribute('aria-expanded', 'false');\n            }\n            \n            // カートボタン\n            if (productData.inCart) {\n                cartBtn.classList.add('in-cart');\n                cartBtn.setAttribute('aria-pressed', 'true');\n                cartBtn.innerHTML = '<span>🛒 削除</span>';\n            } else {\n                cartBtn.classList.remove('in-cart');\n                cartBtn.setAttribute('aria-pressed', 'false');\n                cartBtn.innerHTML = '<span>🛒 カート</span>';\n            }\n        }\n\n        // 12. 履歴管理\n        function addToHistory(action) {\n            const timestamp = new Date().toLocaleTimeString();\n            actionHistory.unshift(`${timestamp}: ${action}`);\n            if (actionHistory.length > 15) {\n                actionHistory = actionHistory.slice(0, 10);\n            }\n        }\n\n        // 13. リセット機能\n        function handleReset() {\n            if (confirm('全てのデータをリセットしますか？\\n（学習の進歩は保持されます）')) {\n                localStorage.removeItem('productCardData_v6');\n                localStorage.removeItem('productCardHistory_v6');\n                localStorage.removeItem('performanceMetrics_v6');\n                resetToDefaults();\n                updateDisplay();\n                showNotification('🔄 システムをリセットしました', 'info');\n            }\n        }\n\n        function resetToDefaults() {\n            productData = {\n                name: \"プレミアム Tシャツ\",\n                price: 2980,\n                likes: 0,\n                isLiked: false,\n                showDetails: false,\n                inCart: false,\n                isShared: false,\n                detailViews: 0,\n                cartActions: 0,\n                imageChanges: 0,\n                shareCount: 0,\n                totalActions: 0,\n                currentImage: 1,\n                deviceType: 'desktop',\n                accessibilityMode: false,\n                performanceOptimized: true,\n                lastUpdated: new Date().toISOString(),\n                sessionStart: new Date().toISOString()\n            };\n            actionHistory = [];\n            performanceMetrics = {\n                responseTimes: [],\n                memoryUsages: [],\n                frameRates: []\n            };\n        }\n\n        // 14. イベントリスナー設定\n        likeBtn.addEventListener('click', handleLike);\n        detailsBtn.addEventListener('click', handleDetailsToggle);\n        cartBtn.addEventListener('click', handleCart);\n        shareBtn.addEventListener('click', handleShare);\n        resetBtn.addEventListener('click', handleReset);\n        optimizeBtn.addEventListener('click', optimizeSystem);\n\n        // 画像切替\n        imageButtons.forEach((btn, index) => {\n            btn.addEventListener('click', () => changeImage(index + 1));\n        });\n\n        productImage.addEventListener('click', () => {\n            const nextImage = (productData.currentImage % 5) + 1;\n            changeImage(nextImage);\n        });\n\n        // パフォーマンス監視の定期実行\n        setInterval(() => {\n            PerformanceMonitor.recordMetric('memory', 0);\n            if (Math.random() < 0.1) { // 10%の確率でフレームレート測定\n                frameRate.textContent = '60fps';\n                frameRate.className = 'metric-good';\n            }\n        }, 5000);\n\n        // 15. 初期化処理\n        document.addEventListener('DOMContentLoaded', function() {\n            console.log('=== 19.6 統合システム - 商品カード学習の集大成 ===');\n            console.log('🏆 全技術統合: オブジェクト→DOM→永続化→アニメーション→レスポンシブ→最適化');\n            console.log('⚡ パフォーマンス監視: 処理速度・メモリ・ユーザー行動分析');\n            console.log('🚀 商用レベル品質: エラー処理・アクセシビリティ・最適化完備');\n            \n            loadData();\n            updateDisplay();\n            PerformanceMonitor.updatePerformanceDisplay();\n            \n            addToHistory('統合システム開始');\n            showNotification('🏆 統合システムへようこそ！商品カード学習の集大成です', 'success');\n            \n            // 分析システムの初期化\n            setTimeout(() => {\n                const analysis = IntelligentAnalyzer.analyzeUserBehavior();\n                analysisContent.textContent = analysis;\n            }, 1000);\n            \n            console.log('✨ すべての機能をお試しください。パフォーマンスも監視されます！');\n        });\n\n        // エラーハンドリング強化\n        window.addEventListener('error', function(event) {\n            console.error('システムエラー:', event.error);\n            showNotification('システムエラーが発生しましたが、安全に処理されました', 'warning');\n            addToHistory(`エラー処理: ${event.error?.message || '不明なエラー'}`);\n        });\n\n        // パフォーマンス最適化: 未使用のイベントリスナーのクリーンアップ\n        window.addEventListener('beforeunload', function() {\n            saveData();\n            console.log('🏆 19.6統合システム終了: 全データが安全に保存されました');\n        });\n"
    }
  },
  "expectedResult": {
    "incrementFunction": "プラスボタンでカウンターが増加する",
    "decrementFunction": "マイナスボタンでカウンターが減少する",
    "limitControl": "カウントが0以下にならない制限が動作する",
    "dataStorage": "すべての変更がlocalStorageに保存される",
    "resetFunction": "リセット機能ですべてが初期状態に戻る",
    "behavior": "4つの機能が完全に連携した統合システムが完成する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}