{
  "id": "bootstrap-calc-04",
  "title": "クリアボタン付き計算機",
  "description": "四則演算計算機にクリアボタンを追加し、計算結果と入力欄をリセットできる使いやすい計算機を完成させます",
  "category": "bootstrap-calculator",
  "difficulty": 3,
  "instructions": [
    "四則演算機能に加えてクリア機能を実装する",
    "入力欄を空にする（.value = ''）処理を学ぶ",
    "計算結果をリセットする機能を追加する",
    "ユーザーが使いやすいUIを構築する"
  ],
  "files": {
    "html": {
      "template": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>課題実装</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>課題を実装してください</h1>\n        <!-- ここに実装してください -->\n    </div>\n    \n    <script src=\"script.js\"></script>\n</body>\n</html>",
      "expected": "<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ステップ18.1 - 基本計算機</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"calculator\">\n        <div class=\"calculator-header\">\n            <h1>🧮 基本計算機</h1>\n            <p>四則演算とクリア機能を学ぶ</p>\n        </div>\n        \n        <div class=\"display\" id=\"display\">0</div>\n        \n        <div class=\"buttons\">\n            <button class=\"btn btn-clear\" onclick=\"clearAll()\">C</button>\n            <button class=\"btn btn-clear-entry\" onclick=\"clearEntry()\">CE</button>\n            <button class=\"btn btn-operator\" onclick=\"inputOperator('/')\" title=\"割り算\">÷</button>\n            <button class=\"btn btn-operator\" onclick=\"inputOperator('*')\" title=\"掛け算\">×</button>\n            \n            <button class=\"btn btn-number\" onclick=\"inputNumber(7)\">7</button>\n            <button class=\"btn btn-number\" onclick=\"inputNumber(8)\">8</button>\n            <button class=\"btn btn-number\" onclick=\"inputNumber(9)\">9</button>\n            <button class=\"btn btn-operator\" onclick=\"inputOperator('-')\" title=\"引き算\">-</button>\n            \n            <button class=\"btn btn-number\" onclick=\"inputNumber(4)\">4</button>\n            <button class=\"btn btn-number\" onclick=\"inputNumber(5)\">5</button>\n            <button class=\"btn btn-number\" onclick=\"inputNumber(6)\">6</button>\n            <button class=\"btn btn-operator\" onclick=\"inputOperator('+')\" title=\"足し算\">+</button>\n            \n            <button class=\"btn btn-number\" onclick=\"inputNumber(1)\">1</button>\n            <button class=\"btn btn-number\" onclick=\"inputNumber(2)\">2</button>\n            <button class=\"btn btn-number\" onclick=\"inputNumber(3)\">3</button>\n            <button class=\"btn btn-equals\" onclick=\"calculate()\" rowspan=\"2\">=</button>\n            \n            <button class=\"btn btn-number\" onclick=\"inputNumber(0)\" style=\"grid-column: span 2;\">0</button>\n            <button class=\"btn btn-number\" onclick=\"inputDecimal()\">.</button>\n        </div>\n        \n        <div class=\"status\">\n            <h3>📊 計算機の状態</h3>\n            <div class=\"stats-grid\">\n                <div class=\"stat-item\">\n                    <div class=\"stat-value\" id=\"calculation-count\">0</div>\n                    <div class=\"stat-label\">計算実行回数</div>\n                </div>\n                <div class=\"stat-item\">\n                    <div class=\"stat-value\" id=\"button-count\">0</div>\n                    <div class=\"stat-label\">ボタンクリック回数</div>\n                </div>\n            </div>\n            <div class=\"current-operation\" id=\"current-operation\">\n                計算機が初期化されました\n            </div>\n        </div>\n    </div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>"
    },
    "css": {
      "template": "/* 基本的なスタイル */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 40px;\n    background: #f5f5f5;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background: white;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n/* ここに実装してください */",
      "expected": "/* 基本リセットとレイアウトスタイル */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Arial', sans-serif;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n}\n\n/* ボタンの基本スタイル */\n.btn {\n    border: none;\n    border-radius: 8px;\n    padding: 20px 10px;\n    font-size: 18px;\n    font-weight: bold;\n    cursor: pointer;\n    transition: all 0.2s ease;\n}\n\n.btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n}\n\n.btn:active {\n    transform: translateY(0);\n}\n\n/* 計算機専用スタイル */\n.calculator {\n    background: white;\n    border-radius: 15px;\n    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);\n    padding: 25px;\n    max-width: 350px;\n    width: 100%;\n}\n\n.calculator-header {\n    text-align: center;\n    margin-bottom: 25px;\n}\n\n.calculator-header h1 {\n    color: #333;\n    margin-bottom: 10px;\n    font-size: 24px;\n}\n\n.calculator-header p {\n    color: #666;\n    font-size: 14px;\n}\n\n/* ディスプレイスタイル */\n.display {\n    background: #1a1a1a;\n    color: white;\n    padding: 20px;\n    border-radius: 8px;\n    margin-bottom: 20px;\n    text-align: right;\n    font-size: 24px;\n    min-height: 60px;\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    font-weight: bold;\n    letter-spacing: 1px;\n}\n\n.display.error {\n    color: #ff6b6b;\n    font-size: 18px;\n}\n\n/* ボタングリッドレイアウト */\n.buttons {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 12px;\n}\n\n/* ボタンの種類別スタイル */\n.btn-number {\n    background: #f8f9fa;\n    color: #333;\n}\n\n.btn-number:hover {\n    background: #e9ecef;\n}\n\n.btn-operator {\n    background: #007bff;\n    color: white;\n}\n\n.btn-operator:hover {\n    background: #0056b3;\n}\n\n.btn-equals {\n    background: #28a745;\n    color: white;\n    grid-column: span 2;\n}\n\n.btn-equals:hover {\n    background: #1e7e34;\n}\n\n.btn-clear {\n    background: #dc3545;\n    color: white;\n}\n\n.btn-clear:hover {\n    background: #c82333;\n}\n\n.btn-clear-entry {\n    background: #ffc107;\n    color: #333;\n}\n\n.btn-clear-entry:hover {\n    background: #e0a800;\n}\n\n/* ステータス表示スタイル */\n.status {\n    margin-top: 20px;\n    padding: 15px;\n    background: #f8f9fa;\n    border-radius: 8px;\n    border-left: 4px solid #007bff;\n}\n\n.status h3 {\n    color: #333;\n    margin-bottom: 8px;\n    font-size: 16px;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 10px;\n    margin-bottom: 15px;\n}\n\n.stat-item {\n    text-align: center;\n    padding: 10px;\n    background: white;\n    border-radius: 5px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.stat-value {\n    font-size: 18px;\n    font-weight: bold;\n    color: #007bff;\n}\n\n.stat-label {\n    font-size: 12px;\n    color: #666;\n    margin-top: 3px;\n}\n\n.current-operation {\n    font-size: 14px;\n    color: #666;\n    text-align: center;\n    padding: 8px;\n    background: white;\n    border-radius: 5px;\n    margin-top: 10px;\n}"
    },
    "js": {
      "template": "// JavaScript実装エリア\n\n// ここに実装してください\nconsole.log('課題実装を開始してください');",
      "expected": "// 計算機の状態管理\nlet currentInput = '0';\nlet previousInput = null;\nlet operator = null;\nlet waitingForNewInput = false;\n\n// 統計情報\nlet calculationCount = 0;\nlet buttonClickCount = 0;\n\n// DOM要素の取得\nconst display = document.getElementById('display');\nconst calculationCountElement = document.getElementById('calculation-count');\nconst buttonCountElement = document.getElementById('button-count');\nconst currentOperationElement = document.getElementById('current-operation');\n\n/**\n * 数字ボタンが押された時の処理\n * @param {number} number - 入力された数字\n */\nfunction inputNumber(number) {\n    console.log(`📖 数字入力: ${number}`);\n    \n    if (waitingForNewInput) {\n        currentInput = number.toString();\n        waitingForNewInput = false;\n    } else {\n        if (currentInput === '0') {\n            currentInput = number.toString();\n        } else {\n            currentInput += number.toString();\n        }\n    }\n    \n    updateDisplay();\n    updateButtonCount();\n    updateStatus(`数字 \"${number}\" を入力しました`);\n    \n    console.log(`✅ 現在の入力: ${currentInput}`);\n}\n\n/**\n * 小数点ボタンが押された時の処理\n */\nfunction inputDecimal() {\n    console.log('📖 小数点入力');\n    \n    if (waitingForNewInput) {\n        currentInput = '0.';\n        waitingForNewInput = false;\n    } else if (!currentInput.includes('.')) {\n        currentInput += '.';\n    }\n    \n    updateDisplay();\n    updateButtonCount();\n    updateStatus('小数点を入力しました');\n    \n    console.log(`✅ 現在の入力: ${currentInput}`);\n}\n\n/**\n * 演算子ボタンが押された時の処理\n * @param {string} op - 演算子 (+, -, *, /)\n */\nfunction inputOperator(op) {\n    console.log(`📖 演算子入力: ${op}`);\n    \n    const current = parseFloat(currentInput);\n    \n    if (previousInput === null) {\n        previousInput = current;\n    } else if (operator && !waitingForNewInput) {\n        const result = performCalculation();\n        if (result === null) return; // エラーが発生した場合\n        \n        currentInput = result.toString();\n        previousInput = result;\n        updateDisplay();\n        calculationCount++;\n        updateCalculationCount();\n    } else {\n        previousInput = current;\n    }\n    \n    operator = op;\n    waitingForNewInput = true;\n    \n    const operatorNames = {\n        '+': '足し算',\n        '-': '引き算',\n        '*': '掛け算',\n        '/': '割り算'\n    };\n    \n    updateButtonCount();\n    updateStatus(`${operatorNames[op]}を選択しました`);\n    \n    console.log(`✅ 演算子設定: ${op}, 前の値: ${previousInput}`);\n}\n\n/**\n * イコールボタンが押された時の処理\n */\nfunction calculate() {\n    console.log('📖 計算実行');\n    \n    if (operator === null || previousInput === null) {\n        updateStatus('❌ 計算する式が不完全です');\n        console.log('❌ 計算できない状態');\n        return;\n    }\n    \n    const result = performCalculation();\n    if (result === null) return; // エラーが発生した場合\n    \n    currentInput = result.toString();\n    previousInput = null;\n    operator = null;\n    waitingForNewInput = true;\n    \n    updateDisplay();\n    calculationCount++;\n    updateCalculationCount();\n    updateButtonCount();\n    updateStatus(`✅ 計算完了: 結果 = ${result}`);\n    \n    console.log(`✅ 計算完了: ${result}`);\n}\n\n/**\n * 実際の計算処理\n * @returns {number|null} 計算結果またはnull（エラー時）\n */\nfunction performCalculation() {\n    const prev = previousInput;\n    const current = parseFloat(currentInput);\n    \n    console.log(`📊 計算実行: ${prev} ${operator} ${current}`);\n    \n    let result;\n    \n    try {\n        switch (operator) {\n            case '+':\n                result = prev + current;\n                break;\n            case '-':\n                result = prev - current;\n                break;\n            case '*':\n                result = prev * current;\n                break;\n            case '/':\n                if (current === 0) {\n                    throw new Error('0で割ることはできません');\n                }\n                result = prev / current;\n                break;\n            default:\n                throw new Error('不明な演算子です');\n        }\n        \n        // 結果の精度調整（小数点以下10桁で丸める）\n        result = Math.round(result * 10000000000) / 10000000000;\n        \n        console.log(`✅ 計算結果: ${result}`);\n        return result;\n        \n    } catch (error) {\n        console.error('❌ 計算エラー:', error.message);\n        showError(error.message);\n        return null;\n    }\n}\n\n/**\n * 全クリア（C）ボタンの処理\n */\nfunction clearAll() {\n    console.log('📖 全クリア実行');\n    \n    currentInput = '0';\n    previousInput = null;\n    operator = null;\n    waitingForNewInput = false;\n    \n    updateDisplay();\n    updateButtonCount();\n    updateStatus('🔄 計算機を初期化しました');\n    \n    console.log('✅ 全クリア完了');\n}\n\n/**\n * エントリークリア（CE）ボタンの処理\n */\nfunction clearEntry() {\n    console.log('📖 エントリークリア実行');\n    \n    currentInput = '0';\n    waitingForNewInput = false;\n    \n    updateDisplay();\n    updateButtonCount();\n    updateStatus('🔄 現在の入力をクリアしました');\n    \n    console.log('✅ エントリークリア完了');\n}\n\n/**\n * ディスプレイ表示を更新\n */\nfunction updateDisplay() {\n    display.textContent = currentInput;\n    display.classList.remove('error');\n}\n\n/**\n * エラー表示\n * @param {string} message - エラーメッセージ\n */\nfunction showError(message) {\n    display.textContent = `エラー: ${message}`;\n    display.classList.add('error');\n    \n    // 3秒後に自動的にクリア\n    setTimeout(() => {\n        clearAll();\n    }, 3000);\n}\n\n/**\n * ボタンクリック回数を更新\n */\nfunction updateButtonCount() {\n    buttonClickCount++;\n    buttonCountElement.textContent = buttonClickCount;\n}\n\n/**\n * 計算実行回数を更新\n */\nfunction updateCalculationCount() {\n    calculationCountElement.textContent = calculationCount;\n}\n\n/**\n * ステータス表示を更新\n * @param {string} message - 表示するメッセージ\n */\nfunction updateStatus(message) {\n    const timestamp = new Date().toLocaleTimeString();\n    currentOperationElement.textContent = `[${timestamp}] ${message}`;\n}\n\n// 初期化処理\nconsole.log('🚀 基本計算機が起動しました');\nupdateStatus('基本計算機が起動しました');\n\n// キーボード対応\ndocument.addEventListener('keydown', function(event) {\n    const key = event.key;\n    \n    // 数字キー\n    if (key >= '0' && key <= '9') {\n        inputNumber(parseInt(key));\n        event.preventDefault();\n    }\n    // 演算子キー\n    else if (key === '+') {\n        inputOperator('+');\n        event.preventDefault();\n    } else if (key === '-') {\n        inputOperator('-');\n        event.preventDefault();\n    } else if (key === '*') {\n        inputOperator('*');\n        event.preventDefault();\n    } else if (key === '/') {\n        inputOperator('/');\n        event.preventDefault();\n    }\n    // その他の特殊キー\n    else if (key === 'Enter' || key === '=') {\n        calculate();\n        event.preventDefault();\n    } else if (key === 'Escape') {\n        clearAll();\n        event.preventDefault();\n    } else if (key === 'Backspace') {\n        clearEntry();\n        event.preventDefault();\n    } else if (key === '.') {\n        inputDecimal();\n        event.preventDefault();\n    }\n});\n\nconsole.log('⌨️ キーボード入力制御が有効化されました');"
    }
  },
  "expectedResult": {
    "clearFunction": "クリアボタンで入力と結果がリセットされる",
    "inputReset": "数値入力フィールドが空になる",
    "resultReset": "計算結果表示が初期状態に戻る",
    "operatorReset": "選択した演算子が初期値に戻る",
    "usability": "ミスしても簡単にやり直せる使いやすい計算機が完成する",
    "behavior": "全機能が統合された実用的な計算機が完成する"
  },
  "checks": [
    {
      "id": "doctype",
      "name": "DOCTYPE宣言",
      "type": "structure",
      "message": "DOCTYPE html宣言が必要です"
    },
    {
      "id": "html",
      "name": "<html>タグ",
      "type": "structure",
      "message": "<html>タグが必要です"
    },
    {
      "id": "head",
      "name": "<head>セクション",
      "type": "structure",
      "message": "<head>セクションが必要です"
    },
    {
      "id": "body",
      "name": "<body>セクション",
      "type": "structure",
      "message": "<body>セクションが必要です"
    },
    {
      "id": "title",
      "name": "<title>タグ",
      "type": "structure",
      "message": "<title>タグと内容が必要です"
    },
    {
      "id": "css-content",
      "name": "CSSスタイル",
      "type": "css",
      "message": "CSSでスタイルを設定してください"
    },
    {
      "id": "js-content",
      "name": "JavaScript",
      "type": "js",
      "message": "JavaScriptで動的な動作を実装してください"
    }
  ]
}