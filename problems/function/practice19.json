{
  "id": "function/practice19",
  "title": "問題19：複合関数システム",
  "description": "イベント管理システムで使う総合的な関数を作成して、実践的なプログラミングを学ぼう！",
  "instructions": [
    "複数の関数を組み合わせた総合システムの設計を理解してください。",
    "実用的なイベント管理システムでの関数活用方法を学んでください。",
    "関数間の連携とデータの受け渡し方法を習得してください。"
  ],
  "template": "// 問題19: 複合関数システム\\n// イベント管理システムで使う総合的な関数を作成して、実践的なプログラミングを学ぼう！\\n\\n// 1. createEvent関数を定義してください（引数: name, date, capacity、戻り値: イベントオブジェクト）\\nfunction createEvent(name, date, capacity) {\\n    /* ここにname、date、capacity、participantsプロパティを持つオブジェクトを作成して返すコードを書く */\\n    /* participantsは空の配列で初期化 */\\n}\\n\\n// 2. addParticipant関数を定義してください（引数: event, participantName）\\n/* ここにaddParticipant関数を定義する */\\n/* eventのparticipants配列にparticipantNameを追加（定員以内の場合のみ） */\\n\\n// 3. getEventInfo関数を定義してください（引数: event、戻り値: イベント情報の文字列）\\nfunction getEventInfo(event) {\\n    /* ここに「イベント: [name], 日時: [date], 参加者: [参加者数]/[定員]」を返すコードを書く */\\n}\\n\\n// 4. 関数を呼び出してテストしてください\\nconsole.log(\"=== イベント管理システム ===\");\\n\\n// createEvent関数のテスト\\nlet event1 = /* ここでcreateEvent関数を「プログラミング勉強会」、「2024-05-15」、20で呼び出す */;\\nlet event2 = /* ここでcreateEvent関数を「ゲーム大会」、「2024-05-20」、10で呼び出す */;\\n\\n// addParticipant関数のテスト\\n/* ここでaddParticipant関数をevent1、「田中太郎」で呼び出す */;\\n/* ここでaddParticipant関数をevent1、「佐藤花子」で呼び出す */;\\n/* ここでaddParticipant関数をevent2、「山田次郎」で呼び出す */;\\n\\n// getEventInfo関数のテスト\\nlet info1 = /* ここでgetEventInfo関数をevent1で呼び出す */;\\nconsole.log(info1);\\n\\nlet info2 = /* ここでgetEventInfo関数をevent2で呼び出す */;\\nconsole.log(info2);\\n\\n// 追加の参加者登録テスト\\nconsole.log(\"\\n--- 参加者追加後 ---\");\\n/* ここでaddParticipant関数をevent1、「鈴木一郎」で呼び出す */;\\n/* ここでaddParticipant関数をevent2、「高橋美由紀」で呼び出す */;\\n\\nlet updatedInfo1 = /* ここでgetEventInfo関数をevent1で呼び出す */;\\nconsole.log(\"更新後: \" + updatedInfo1);\\n\\nlet updatedInfo2 = /* ここでgetEventInfo関数をevent2で呼び出す */;\\nconsole.log(\"更新後: \" + updatedInfo2);",
  "testCases": [
    {
      "name": "基本ケース（イベント管理システム）",
      "variables": {},
      "expectedOutput": "=== イベント管理システム ===\\nイベント: プログラミング勉強会, 日時: 2024-05-15, 参加者: 2/20\\nイベント: ゲーム大会, 日時: 2024-05-20, 参加者: 1/10\\n\\n--- 参加者追加後 ---\\n更新後: イベント: プログラミング勉強会, 日時: 2024-05-15, 参加者: 3/20\\n更新後: イベント: ゲーム大会, 日時: 2024-05-20, 参加者: 2/10"
    },
    {
      "name": "createEvent関数チェック",
      "variables": {},
      "expectedOutput": "=== イベント管理システム ===\\nイベント: プログラミング勉強会, 日時: 2024-05-15, 参加者: 2/20\\nイベント: ゲーム大会, 日時: 2024-05-20, 参加者: 1/10\\n\\n--- 参加者追加後 ---\\n更新後: イベント: プログラミング勉強会, 日時: 2024-05-15, 参加者: 3/20\\n更新後: イベント: ゲーム大会, 日時: 2024-05-20, 参加者: 2/10"
    },
    {
      "name": "addParticipant関数チェック",
      "variables": {},
      "expectedOutput": "=== イベント管理システム ===\\nイベント: プログラミング勉強会, 日時: 2024-05-15, 参加者: 2/20\\nイベント: ゲーム大会, 日時: 2024-05-20, 参加者: 1/10\\n\\n--- 参加者追加後 ---\\n更新後: イベント: プログラミング勉強会, 日時: 2024-05-15, 参加者: 3/20\\n更新後: イベント: ゲーム大会, 日時: 2024-05-20, 参加者: 2/10"
    },
    {
      "name": "getEventInfo関数チェック",
      "variables": {},
      "expectedOutput": "=== イベント管理システム ===\\nイベント: プログラミング勉強会, 日時: 2024-05-15, 参加者: 2/20\\nイベント: ゲーム大会, 日時: 2024-05-20, 参加者: 1/10\\n\\n--- 参加者追加後 ---\\n更新後: イベント: プログラミング勉強会, 日時: 2024-05-15, 参加者: 3/20\\n更新後: イベント: ゲーム大会, 日時: 2024-05-20, 参加者: 2/10"
    },
    {
      "name": "複合システム動作チェック",
      "variables": {},
      "expectedOutput": "=== イベント管理システム ===\\nイベント: プログラミング勉強会, 日時: 2024-05-15, 参加者: 2/20\\nイベント: ゲーム大会, 日時: 2024-05-20, 参加者: 1/10\\n\\n--- 参加者追加後 ---\\n更新後: イベント: プログラミング勉強会, 日時: 2024-05-15, 参加者: 3/20\\n更新後: イベント: ゲーム大会, 日時: 2024-05-20, 参加者: 2/10"
    }
  ],
  "expectedOutput": "=== イベント管理システム ===\\nイベント: プログラミング勉強会, 日時: 2024-05-15, 参加者: 2/20\\nイベント: ゲーム大会, 日時: 2024-05-20, 参加者: 1/10\\n\\n--- 参加者追加後 ---\\n更新後: イベント: プログラミング勉強会, 日時: 2024-05-15, 参加者: 3/20\\n更新後: イベント: ゲーム大会, 日時: 2024-05-20, 参加者: 2/10",
  "testVariables": {},
  "points": 100
}